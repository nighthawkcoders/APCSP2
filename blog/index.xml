<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>APCSP2</title>
<link>https://syeung2.github.io/APCSP2/blog/index.html</link>
<atom:link href="https://syeung2.github.io/APCSP2/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Transfer APCSP</description>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Thu, 15 Dec 2022 00:00:00 GMT</lastBuildDate>
<item>
  <title>Unit 3 Sections 17-18</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-12-15-AP-unit3_17_to_18.html</link>
  <description><![CDATA[ 



<section id="objectives" class="level2">
<h2 class="anchored" data-anchor-id="objectives">Objectives</h2>
<blockquote class="blockquote">
<p>Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better</p>
</blockquote>
</section>
<section id="process-for-presenters" class="level2">
<h2 class="anchored" data-anchor-id="process-for-presenters">Process for Presenters</h2>
<ul>
<li>Use “Comments” on this blog page to post materials for lesson</li>
<li>Be sure to include “Period and Teacher” in instructions</li>
<li>Be sure homework assignment, hacks and points/rubric are clearly described</li>
</ul>
</section>
<section id="process-for-individuals" class="level2">
<h2 class="anchored" data-anchor-id="process-for-individuals">Process for Individuals</h2>
<ul>
<li>Each participating Team will post a shared review ticket with individual work clearly listed</li>
<li>Be sure to include “Period, Teacher and Table” in review ticket</li>
<li>Collaboration is encouraged but individual and unique work is required</li>
</ul>


</section>

 ]]></description>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-12-15-AP-unit3_17_to_18.html</guid>
  <pubDate>Thu, 15 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/bigidea3.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Unit 3 Sections 16</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-12-13-AP-unit3_16.html</link>
  <description><![CDATA[ 



<section id="objectives" class="level2">
<h2 class="anchored" data-anchor-id="objectives">Objectives</h2>
<blockquote class="blockquote">
<p>Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better</p>
</blockquote>
</section>
<section id="process-for-presenters" class="level2">
<h2 class="anchored" data-anchor-id="process-for-presenters">Process for Presenters</h2>
<ul>
<li>Use “Comments” on this blog page to post materials for lesson</li>
<li>Be sure to include “Period and Teacher” in instructions</li>
<li>Be sure homework assignment, hacks and points/rubric are clearly described</li>
</ul>
</section>
<section id="process-for-individuals" class="level2">
<h2 class="anchored" data-anchor-id="process-for-individuals">Process for Individuals</h2>
<ul>
<li>Each participating Team will post a shared review ticket with individual work clearly listed</li>
<li>Be sure to include “Period, Teacher and Table” in review ticket</li>
<li>Collaboration is encouraged but individual and unique work is required</li>
</ul>


</section>

 ]]></description>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-12-13-AP-unit3_16.html</guid>
  <pubDate>Tue, 13 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/bigidea3.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Unit 3 Sections 14-15</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-12-12-AP-unit3_14_to_15.html</link>
  <description><![CDATA[ 



<section id="objectives" class="level2">
<h2 class="anchored" data-anchor-id="objectives">Objectives</h2>
<blockquote class="blockquote">
<p>Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better</p>
</blockquote>
</section>
<section id="process-for-presenters" class="level2">
<h2 class="anchored" data-anchor-id="process-for-presenters">Process for Presenters</h2>
<ul>
<li>Use “Comments” on this blog page to post materials for lesson</li>
<li>Be sure to include “Period and Teacher” in instructions</li>
<li>Be sure homework assignment, hacks and points/rubric are clearly described</li>
</ul>
</section>
<section id="process-for-individuals" class="level2">
<h2 class="anchored" data-anchor-id="process-for-individuals">Process for Individuals</h2>
<ul>
<li>Each participating Team will post a shared review ticket with individual work clearly listed</li>
<li>Be sure to include “Period, Teacher and Table” in review ticket</li>
<li>Collaboration is encouraged but individual and unique work is required</li>
</ul>


</section>

 ]]></description>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-12-12-AP-unit3_14_to_15.html</guid>
  <pubDate>Mon, 12 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/bigidea3.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Week of 12-12, Student Teaching Week 3, Pop Live Reviews</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-12-12-PT-student_session3.html</link>
  <description><![CDATA[ 



<section id="plans-week-15" class="level2">
<h2 class="anchored" data-anchor-id="plans-week-15">Plans Week 15</h2>
<blockquote class="blockquote">
<p>Weeks Plans - Monday: 3.14 and 3.15 Libraries and Random Values - Tuesday: 3.16 Simulations - Wednesday: work day, pop live reviews - Thursday: 3.17 and 3.18 Algorithm Efficiency and Undecidable Problems - Friday: Kick Ball, Pot Luck Picnic</p>
</blockquote>


</section>

 ]]></description>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-12-12-PT-student_session3.html</guid>
  <pubDate>Mon, 12 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/points.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Unit 3 Sections 12-13</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-12-08-AP-unit3_12_to_13.html</link>
  <description><![CDATA[ 



<section id="objectives" class="level2">
<h2 class="anchored" data-anchor-id="objectives">Objectives</h2>
<blockquote class="blockquote">
<p>Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better</p>
</blockquote>
</section>
<section id="process-for-presenters" class="level2">
<h2 class="anchored" data-anchor-id="process-for-presenters">Process for Presenters</h2>
<ul>
<li>Use “Comments” on this blog page to post materials for lesson</li>
<li>Be sure to include “Period and Teacher” in instructions</li>
<li>Be sure homework assignment, hacks and points/rubric are clearly described</li>
</ul>
</section>
<section id="process-for-individuals" class="level2">
<h2 class="anchored" data-anchor-id="process-for-individuals">Process for Individuals</h2>
<ul>
<li>Each participating Team will post a shared review ticket with individual work clearly listed</li>
<li>Be sure to include “Period, Teacher and Table” in review ticket</li>
<li>Collaboration is encouraged but individual and unique work is required</li>
</ul>


</section>

 ]]></description>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-12-08-AP-unit3_12_to_13.html</guid>
  <pubDate>Thu, 08 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/bigidea3.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Unit 3 Sections 9 and 11</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-12-06-AP-unit3_9_and_11.html</link>
  <description><![CDATA[ 



<section id="objectives" class="level2">
<h2 class="anchored" data-anchor-id="objectives">Objectives</h2>
<blockquote class="blockquote">
<p>Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better</p>
</blockquote>
</section>
<section id="process-for-presenters" class="level2">
<h2 class="anchored" data-anchor-id="process-for-presenters">Process for Presenters</h2>
<ul>
<li>Use “Comments” on this blog page to post materials for lesson</li>
<li>Be sure to include “Period and Teacher” in instructions</li>
<li>Be sure homework assignment, hacks and points/rubric are clearly described</li>
</ul>
</section>
<section id="process-for-individuals" class="level2">
<h2 class="anchored" data-anchor-id="process-for-individuals">Process for Individuals</h2>
<ul>
<li>Each participating Team will post a shared review ticket with individual work clearly listed</li>
<li>Be sure to include “Period, Teacher and Table” in review ticket</li>
<li>Collaboration is encouraged but individual and unique work is required</li>
</ul>


</section>

 ]]></description>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-12-06-AP-unit3_9_and_11.html</guid>
  <pubDate>Tue, 06 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/bigidea3.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Week of 12-05, Student Teaching Week 2, Pop Live Reviews</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-12-05-PT-student_session2.html</link>
  <description><![CDATA[ 



<section id="plans-week-15" class="level2">
<h2 class="anchored" data-anchor-id="plans-week-15">Plans Week 15</h2>
<blockquote class="blockquote">
<p>Weeks Plans - Monday: 3.8 and 3.10 Boolean Iteration and Lists - Tuesday: 3.9 and 3.11 Developing Algorithms and Binary Search - Wednesday: work day, pop live reviews - Thursday: 3.12 and 3.13 Calling and Developing Procedures - Friday: work day, pop live reviews</p>
</blockquote>


</section>

 ]]></description>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-12-05-PT-student_session2.html</guid>
  <pubDate>Mon, 05 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/points.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Unit 3 Sections 8 and 10</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-12-05-AP-unit3_8_and_10.html</link>
  <description><![CDATA[ 



<section id="objectives" class="level2">
<h2 class="anchored" data-anchor-id="objectives">Objectives</h2>
<blockquote class="blockquote">
<p>Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better</p>
</blockquote>
</section>
<section id="process-for-presenters" class="level2">
<h2 class="anchored" data-anchor-id="process-for-presenters">Process for Presenters</h2>
<ul>
<li>Use “Comments” on this blog page to post materials for lesson</li>
<li>Be sure to include “Period and Teacher” in instructions</li>
<li>Be sure homework assignment, hacks and points/rubric are clearly described</li>
</ul>
</section>
<section id="process-for-individuals" class="level2">
<h2 class="anchored" data-anchor-id="process-for-individuals">Process for Individuals</h2>
<ul>
<li>Each participating Team will post a shared review ticket with individual work clearly listed</li>
<li>Be sure to include “Period, Teacher and Table” in review ticket</li>
<li>Collaboration is encouraged but individual and unique work is required</li>
</ul>


</section>

 ]]></description>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-12-05-AP-unit3_8_and_10.html</guid>
  <pubDate>Mon, 05 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/bigidea3.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Unit 3 Sections 5-7</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-12-01-AP-unit3_5_to_7.html</link>
  <description><![CDATA[ 



<section id="objectives" class="level2">
<h2 class="anchored" data-anchor-id="objectives">Objectives</h2>
<blockquote class="blockquote">
<p>Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better</p>
</blockquote>
</section>
<section id="process-for-presenters" class="level2">
<h2 class="anchored" data-anchor-id="process-for-presenters">Process for Presenters</h2>
<ul>
<li>Use “Comments” on this blog page to post materials for lesson</li>
<li>Be sure to include “Period and Teacher” in instructions</li>
<li>Be sure homework assignment, hacks and points/rubric are clearly described</li>
</ul>
</section>
<section id="process-for-individuals" class="level2">
<h2 class="anchored" data-anchor-id="process-for-individuals">Process for Individuals</h2>
<ul>
<li>Each participating Team will post a shared review ticket with individual work clearly listed</li>
<li>Be sure to include “Period, Teacher and Table” in review ticket</li>
<li>Collaboration is encouraged but individual and unique work is required</li>
</ul>


</section>

 ]]></description>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-12-01-AP-unit3_5_to_7.html</guid>
  <pubDate>Thu, 01 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/bigidea3.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Python 2D Iteration</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-12-01-pbl-2d-iteration.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="hacks-2d-array-mini-lab" class="level2">
<h2 class="anchored" data-anchor-id="hacks-2d-array-mini-lab">Hacks 2D array (Mini-lab)</h2>
<blockquote class="blockquote">
<p>Try to build a Christmas Tree. The top shape and a trunk. There are two ways to do this… - Build it by pre-populating a 2D array - Build it completely programmatically</p>
</blockquote>
<p>Use the code below to help guide your adventure</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;">* Creator: Nighthawk Coding Society</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">2D arrays</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># Classic nested loops using ij indexes, this shows 2 dimensions</span></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;">def</span> print_matrix1(matrix):</span>
<span id="cb1-8">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Classic nested loops using ij indexes"</span>)</span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(matrix)):  <span class="co" style="color: #5E5E5E;"># outer loop (i), built on length of matrix (rows)</span></span>
<span id="cb1-10">        <span class="cf" style="color: #003B4F;">for</span> j <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(matrix[i])):  <span class="co" style="color: #5E5E5E;"># inner loop (j), built on length of items (columns)</span></span>
<span id="cb1-11">            <span class="bu" style="color: null;">print</span>(matrix[i][j], end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">" "</span>)  <span class="co" style="color: #5E5E5E;"># [i][j] is 2D representation, end changes newline to space</span></span>
<span id="cb1-12">        <span class="bu" style="color: null;">print</span>()</span>
<span id="cb1-13"></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;"># Enhanced nested for loops, row and col variables</span></span>
<span id="cb1-16"><span class="kw" style="color: #003B4F;">def</span> print_matrix2(matrix):</span>
<span id="cb1-17">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Enhanced nested for loops"</span>)</span>
<span id="cb1-18">    <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> matrix:  <span class="co" style="color: #5E5E5E;"># short hand row iterator, index is not required</span></span>
<span id="cb1-19">        <span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> row:  <span class="co" style="color: #5E5E5E;"># short hand column iterator</span></span>
<span id="cb1-20">            <span class="bu" style="color: null;">print</span>(col, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb1-21">        <span class="bu" style="color: null;">print</span>()</span>
<span id="cb1-22"></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;"># For loop with shortcut (*) row expansion</span></span>
<span id="cb1-25"><span class="kw" style="color: #003B4F;">def</span> print_matrix3(matrix):</span>
<span id="cb1-26">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"For loop with shortcut (*) row expansion"</span>)</span>
<span id="cb1-27">    <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> matrix:</span>
<span id="cb1-28">        <span class="bu" style="color: null;">print</span>(<span class="op" style="color: #5E5E5E;">*</span>row)  <span class="co" style="color: #5E5E5E;"># pythons has (*) that is one line expansion of row into columns</span></span>
<span id="cb1-29"></span>
<span id="cb1-30"></span>
<span id="cb1-31"><span class="kw" style="color: #003B4F;">def</span> test_matrices():</span>
<span id="cb1-32">    <span class="co" style="color: #5E5E5E;"># setup some text matrices</span></span>
<span id="cb1-33">    keypad <span class="op" style="color: #5E5E5E;">=</span> [[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>],</span>
<span id="cb1-34">              [<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>],</span>
<span id="cb1-35">              [<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>],</span>
<span id="cb1-36">              [<span class="st" style="color: #20794D;">" "</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">" "</span>]]</span>
<span id="cb1-37"></span>
<span id="cb1-38">    keyboard <span class="op" style="color: #5E5E5E;">=</span> [[<span class="st" style="color: #20794D;">"`"</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">"-"</span>, <span class="st" style="color: #20794D;">"="</span>],</span>
<span id="cb1-39">                [<span class="st" style="color: #20794D;">"Q"</span>, <span class="st" style="color: #20794D;">"W"</span>, <span class="st" style="color: #20794D;">"E"</span>, <span class="st" style="color: #20794D;">"R"</span>, <span class="st" style="color: #20794D;">"T"</span>, <span class="st" style="color: #20794D;">"Y"</span>, <span class="st" style="color: #20794D;">"U"</span>, <span class="st" style="color: #20794D;">"I"</span>, <span class="st" style="color: #20794D;">"O"</span>, <span class="st" style="color: #20794D;">"P"</span>, <span class="st" style="color: #20794D;">"["</span>, <span class="st" style="color: #20794D;">"]"</span>],</span>
<span id="cb1-40">                [<span class="st" style="color: #20794D;">"A"</span>, <span class="st" style="color: #20794D;">"S"</span>, <span class="st" style="color: #20794D;">"D"</span>, <span class="st" style="color: #20794D;">"F"</span>, <span class="st" style="color: #20794D;">"G"</span>, <span class="st" style="color: #20794D;">"H"</span>, <span class="st" style="color: #20794D;">"J"</span>, <span class="st" style="color: #20794D;">"K"</span>, <span class="st" style="color: #20794D;">"L"</span>, <span class="st" style="color: #20794D;">";"</span>, <span class="st" style="color: #20794D;">"'"</span>],</span>
<span id="cb1-41">                [<span class="st" style="color: #20794D;">"Z"</span>, <span class="st" style="color: #20794D;">"X"</span>, <span class="st" style="color: #20794D;">"C"</span>, <span class="st" style="color: #20794D;">"V"</span>, <span class="st" style="color: #20794D;">"B"</span>, <span class="st" style="color: #20794D;">"N"</span>, <span class="st" style="color: #20794D;">"M"</span>, <span class="st" style="color: #20794D;">","</span>, <span class="st" style="color: #20794D;">"."</span>, <span class="st" style="color: #20794D;">"/"</span>]]</span>
<span id="cb1-42"></span>
<span id="cb1-43">    numbers <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb1-44">            [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], <span class="co" style="color: #5E5E5E;"># binary</span></span>
<span id="cb1-45">            [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>], <span class="co" style="color: #5E5E5E;"># decimal</span></span>
<span id="cb1-46">            [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>, <span class="st" style="color: #20794D;">"A"</span>, <span class="st" style="color: #20794D;">"B"</span>, <span class="st" style="color: #20794D;">"C"</span>, <span class="st" style="color: #20794D;">"D"</span>, <span class="st" style="color: #20794D;">"E"</span>, <span class="st" style="color: #20794D;">"F"</span>] <span class="co" style="color: #5E5E5E;"># hexadecimal</span></span>
<span id="cb1-47">            ]</span>
<span id="cb1-48"></span>
<span id="cb1-49">    <span class="co" style="color: #5E5E5E;"># pack into a list of matrices with titles</span></span>
<span id="cb1-50">    matrices <span class="op" style="color: #5E5E5E;">=</span> [[<span class="st" style="color: #20794D;">"Keypad"</span>, keypad], [<span class="st" style="color: #20794D;">"Keyboard"</span>, keyboard], [<span class="st" style="color: #20794D;">"Number Systems"</span>, numbers]]</span>
<span id="cb1-51"></span>
<span id="cb1-52">    <span class="co" style="color: #5E5E5E;"># loop 2D matrix with returning list in [key, value] arrangement</span></span>
<span id="cb1-53">    <span class="cf" style="color: #003B4F;">for</span> title, matrix <span class="kw" style="color: #003B4F;">in</span> matrices:  <span class="co" style="color: #5E5E5E;"># unpack title and matrix as variables</span></span>
<span id="cb1-54">        </span>
<span id="cb1-55">        <span class="co" style="color: #5E5E5E;"># formatted message with concatenation</span></span>
<span id="cb1-56">        <span class="bu" style="color: null;">print</span>(title, <span class="bu" style="color: null;">len</span>(matrix), <span class="st" style="color: #20794D;">"x"</span>, <span class="st" style="color: #20794D;">"~"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(<span class="bu" style="color: null;">len</span>(matrix[<span class="dv" style="color: #AD0000;">0</span>])))  </span>
<span id="cb1-57">        </span>
<span id="cb1-58">        <span class="co" style="color: #5E5E5E;"># use three different methods</span></span>
<span id="cb1-59">        print_matrix1(matrix)</span>
<span id="cb1-60">        print_matrix2(matrix)</span>
<span id="cb1-61">        print_matrix3(matrix)</span>
<span id="cb1-62">        <span class="co" style="color: #5E5E5E;"># blank link in between</span></span>
<span id="cb1-63">        <span class="bu" style="color: null;">print</span>()</span>
<span id="cb1-64"></span>
<span id="cb1-65"></span>
<span id="cb1-66"><span class="co" style="color: #5E5E5E;"># tester section</span></span>
<span id="cb1-67"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb1-68">    test_matrices()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Keypad 4 x ~3
Classic nested loops using ij indexes
1 2 3 
4 5 6 
7 8 9 
  0   
Enhanced nested for loops
1 2 3 
4 5 6 
7 8 9 
  0   
For loop with shortcut (*) row expansion
1 2 3
4 5 6
7 8 9
  0  

Keyboard 4 x ~13
Classic nested loops using ij indexes
` 1 2 3 4 5 6 7 8 9 0 - = 
Q W E R T Y U I O P [ ] 
A S D F G H J K L ; ' 
Z X C V B N M , . / 
Enhanced nested for loops
` 1 2 3 4 5 6 7 8 9 0 - = 
Q W E R T Y U I O P [ ] 
A S D F G H J K L ; ' 
Z X C V B N M , . / 
For loop with shortcut (*) row expansion
` 1 2 3 4 5 6 7 8 9 0 - =
Q W E R T Y U I O P [ ]
A S D F G H J K L ; '
Z X C V B N M , . /

Number Systems 3 x ~2
Classic nested loops using ij indexes
0 1 
0 1 2 3 4 5 6 7 8 9 
0 1 2 3 4 5 6 7 8 9 A B C D E F 
Enhanced nested for loops
0 1 
0 1 2 3 4 5 6 7 8 9 
0 1 2 3 4 5 6 7 8 9 A B C D E F 
For loop with shortcut (*) row expansion
0 1
0 1 2 3 4 5 6 7 8 9
0 1 2 3 4 5 6 7 8 9 A B C D E F
</code></pre>
</div>
</div>
</section>
<section id="hacks-monkey-jumpers-mini-lab" class="level2">
<h2 class="anchored" data-anchor-id="hacks-monkey-jumpers-mini-lab">Hacks Monkey Jumpers (Mini-lab)</h2>
<blockquote class="blockquote">
<p>Feel free to use any ASCII art of your choice, there are some much better monkeys <a href="https://www.asciiart.eu/animals/monkeys">here</a>. My little guys were simply made up out of my head while looking at unicode characters.</p>
</blockquote>
<ul>
<li>Build more monkeys, different monkeys or entire rhyme for the “Monkey Jumpers” countdown poem</li>
<li>Add names or other properties to the monkeys</li>
<li>Use a completely different application of something that is 2D.</li>
<li>Print monkeys horizontally versus vertically.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"> * Creator: Nighthawk Coding Society</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"> * Mini Lab Name: Hello Series, featuring Monkey Jumpers Poem</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;">def</span> main():</span>
<span id="cb3-7">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Nursery Rhyme"</span>)  <span class="co" style="color: #5E5E5E;"># identification message</span></span>
<span id="cb3-8">    </span>
<span id="cb3-9">    <span class="co" style="color: #5E5E5E;"># ANSI Color Codes</span></span>
<span id="cb3-10">    Red <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[31m"</span></span>
<span id="cb3-11">    Green <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[32m"</span></span>
<span id="cb3-12">    Yellow <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[33m"</span></span>
<span id="cb3-13">    Blue <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m"</span></span>
<span id="cb3-14">    Magenta <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[35m"</span></span>
<span id="cb3-15"></span>
<span id="cb3-16">    <span class="co" style="color: #5E5E5E;">""" 2D array data assignment """</span></span>
<span id="cb3-17">    monkeys <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb3-18">        [</span>
<span id="cb3-19">            Red,</span>
<span id="cb3-20">            <span class="st" style="color: #20794D;">"ʕง ͠° ͟ل͜ ͡°)ʔ "</span>,  <span class="co" style="color: #5E5E5E;"># [0][0] eyes</span></span>
<span id="cb3-21">            <span class="st" style="color: #20794D;">"  </span><span class="ch" style="color: #20794D;">\\</span><span class="st" style="color: #20794D;">_⏄_/  "</span>,  <span class="co" style="color: #5E5E5E;"># [0][1] chin</span></span>
<span id="cb3-22">            <span class="st" style="color: #20794D;">"  --0--   "</span>,  <span class="co" style="color: #5E5E5E;"># [0][2] body</span></span>
<span id="cb3-23">            <span class="st" style="color: #20794D;">"  ⎛   ⎞   "</span>  <span class="co" style="color: #5E5E5E;"># [0][3] legs</span></span>
<span id="cb3-24">        ],</span>
<span id="cb3-25">        [</span>
<span id="cb3-26">            Green,</span>
<span id="cb3-27">            <span class="st" style="color: #20794D;">" ʕ༼ ◕_◕ ༽ʔ "</span>,  <span class="co" style="color: #5E5E5E;"># [1][0]</span></span>
<span id="cb3-28">            <span class="st" style="color: #20794D;">"  </span><span class="ch" style="color: #20794D;">\\</span><span class="st" style="color: #20794D;">_⎏_/  "</span>,</span>
<span id="cb3-29">            <span class="st" style="color: #20794D;">"  ++1++  "</span>,</span>
<span id="cb3-30">            <span class="st" style="color: #20794D;">"   ⌋ ⌊   "</span></span>
<span id="cb3-31">        ],</span>
<span id="cb3-32">        [</span>
<span id="cb3-33">            Yellow,</span>
<span id="cb3-34">            <span class="st" style="color: #20794D;">" ʕ(▀ ⍡ ▀)ʔ"</span>,  <span class="co" style="color: #5E5E5E;"># [2][0]</span></span>
<span id="cb3-35">            <span class="st" style="color: #20794D;">"  </span><span class="ch" style="color: #20794D;">\\</span><span class="st" style="color: #20794D;">_⎐_/ "</span>,</span>
<span id="cb3-36">            <span class="st" style="color: #20794D;">"  &lt;-2-&gt;  "</span>,</span>
<span id="cb3-37">            <span class="st" style="color: #20794D;">"  〈  〉 "</span></span>
<span id="cb3-38">        ],</span>
<span id="cb3-39">        [</span>
<span id="cb3-40">            Blue,</span>
<span id="cb3-41">            <span class="st" style="color: #20794D;">"ʕ ͡° ͜ʖ ° ͡ʔ"</span>,  <span class="co" style="color: #5E5E5E;"># [3][0]</span></span>
<span id="cb3-42">            <span class="st" style="color: #20794D;">"  </span><span class="ch" style="color: #20794D;">\\</span><span class="st" style="color: #20794D;">_⍾_/  "</span>,</span>
<span id="cb3-43">            <span class="st" style="color: #20794D;">"  ==3==  "</span>,</span>
<span id="cb3-44">            <span class="st" style="color: #20794D;">"  _/ </span><span class="ch" style="color: #20794D;">\\</span><span class="st" style="color: #20794D;">_  "</span></span>
<span id="cb3-45">        ],</span>
<span id="cb3-46">        [</span>
<span id="cb3-47">            Magenta,</span>
<span id="cb3-48">            <span class="st" style="color: #20794D;">"  (◕‿◕✿) "</span>,  <span class="co" style="color: #5E5E5E;"># [4][0]</span></span>
<span id="cb3-49">            <span class="st" style="color: #20794D;">"  </span><span class="ch" style="color: #20794D;">\\</span><span class="st" style="color: #20794D;">_⍾_/ "</span>,  <span class="co" style="color: #5E5E5E;"># [4][1]</span></span>
<span id="cb3-50">            <span class="st" style="color: #20794D;">"  ==4==  "</span>,  <span class="co" style="color: #5E5E5E;"># [4][2]</span></span>
<span id="cb3-51">            <span class="st" style="color: #20794D;">"  _/ </span><span class="ch" style="color: #20794D;">\\</span><span class="st" style="color: #20794D;">_ "</span>  <span class="co" style="color: #5E5E5E;"># [4][3]</span></span>
<span id="cb3-52">        ]</span>
<span id="cb3-53">    ]</span>
<span id="cb3-54"></span>
<span id="cb3-55">    <span class="co" style="color: #5E5E5E;">""" 2D array program logic """</span></span>
<span id="cb3-56">    <span class="co" style="color: #5E5E5E;"># cycles through 2D array backwards</span></span>
<span id="cb3-57">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(monkeys), <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb3-58">        <span class="co" style="color: #5E5E5E;"># this print statement shows current count of Monkeys</span></span>
<span id="cb3-59">        <span class="co" style="color: #5E5E5E;"># concatenation (+) of the loop variable and string to form a countdown message</span></span>
<span id="cb3-60">        <span class="bu" style="color: null;">print</span>(<span class="bu" style="color: null;">str</span>(i) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">" little monkeys jumping on the bed..."</span>)</span>
<span id="cb3-61"></span>
<span id="cb3-62">        <span class="co" style="color: #5E5E5E;"># cycle through monkeys that are left in poem countdown</span></span>
<span id="cb3-63">        <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(i <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>):  <span class="co" style="color: #5E5E5E;"># cycles through remaining monkeys in countdown</span></span>
<span id="cb3-64"></span>
<span id="cb3-65">            <span class="co" style="color: #5E5E5E;"># cycles through monkey part by part</span></span>
<span id="cb3-66">            <span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(monkeys[row])):</span>
<span id="cb3-67">                <span class="co" style="color: #5E5E5E;"># prints specific part of the monkey from the 2D cell</span></span>
<span id="cb3-68">                <span class="bu" style="color: null;">print</span>(monkeys[row][col] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb3-69"></span>
<span id="cb3-70">            <span class="co" style="color: #5E5E5E;"># this new line gives separation between stanza of poem</span></span>
<span id="cb3-71">            <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[0m"</span>)  <span class="co" style="color: #5E5E5E;"># reset color</span></span>
<span id="cb3-72"></span>
<span id="cb3-73">    <span class="co" style="color: #5E5E5E;"># out of all the loops, prints finishing messages</span></span>
<span id="cb3-74">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"No more monkeys jumping on the bed"</span>)</span>
<span id="cb3-75">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"0000000000000000000000000000000000"</span>)</span>
<span id="cb3-76">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"             THE END              "</span>)</span>
<span id="cb3-77"></span>
<span id="cb3-78"></span>
<span id="cb3-79"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb3-80">    main()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Nursery Rhyme
5 little monkeys jumping on the bed...
 
  (◕‿◕✿)  
  \_⍾_/  
  ==4==   
  _/ \_  

 
ʕ ͡° ͜ʖ ° ͡ʔ 
  \_⍾_/   
  ==3==   
  _/ \_   

 
 ʕ(▀ ⍡ ▀)ʔ 
  \_⎐_/  
  &lt;-2-&gt;   
  〈  〉  

 
 ʕ༼ ◕_◕ ༽ʔ  
  \_⎏_/   
  ++1++   
   ⌋ ⌊    

 
ʕง ͠° ͟ل͜ ͡°)ʔ  
  \_⏄_/   
  --0--    
  ⎛   ⎞    

4 little monkeys jumping on the bed...
 
ʕ ͡° ͜ʖ ° ͡ʔ 
  \_⍾_/   
  ==3==   
  _/ \_   

 
 ʕ(▀ ⍡ ▀)ʔ 
  \_⎐_/  
  &lt;-2-&gt;   
  〈  〉  

 
 ʕ༼ ◕_◕ ༽ʔ  
  \_⎏_/   
  ++1++   
   ⌋ ⌊    

 
ʕง ͠° ͟ل͜ ͡°)ʔ  
  \_⏄_/   
  --0--    
  ⎛   ⎞    

3 little monkeys jumping on the bed...
 
 ʕ(▀ ⍡ ▀)ʔ 
  \_⎐_/  
  &lt;-2-&gt;   
  〈  〉  

 
 ʕ༼ ◕_◕ ༽ʔ  
  \_⎏_/   
  ++1++   
   ⌋ ⌊    

 
ʕง ͠° ͟ل͜ ͡°)ʔ  
  \_⏄_/   
  --0--    
  ⎛   ⎞    

2 little monkeys jumping on the bed...
 
 ʕ༼ ◕_◕ ༽ʔ  
  \_⎏_/   
  ++1++   
   ⌋ ⌊    

 
ʕง ͠° ͟ل͜ ͡°)ʔ  
  \_⏄_/   
  --0--    
  ⎛   ⎞    

1 little monkeys jumping on the bed...
 
ʕง ͠° ͟ل͜ ͡°)ʔ  
  \_⏄_/   
  --0--    
  ⎛   ⎞    

0 little monkeys jumping on the bed...
No more monkeys jumping on the bed
0000000000000000000000000000000000
             THE END              </code></pre>
</div>
</div>
</section>
<section id="animation-the-energetic-versus-lazy-programmer-methodsmini-lab" class="level2">
<h2 class="anchored" data-anchor-id="animation-the-energetic-versus-lazy-programmer-methodsmini-lab">Animation, the Energetic versus Lazy Programmer methods(Mini-lab)</h2>
<blockquote class="blockquote">
<p>Build your own moving object. Make a few frames the energetic way, then figure out how to do it the programmatic way. - Be creative, by the way, I have always wanted my Monkeys jumping on a bed.</p>
</blockquote>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;">* Creator: Nighthawk Coding Society</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;">Sailing Ship Animation (long method)</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="im" style="color: #00769E;">import</span> time <span class="co" style="color: #5E5E5E;"># used for delay</span></span>
<span id="cb5-7"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> clear_output  <span class="co" style="color: #5E5E5E;"># jupyter specific clear</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;"># ANSI Color Codes</span></span>
<span id="cb5-10">Color34 <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m"</span></span>
<span id="cb5-11">Color37 <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span></span>
<span id="cb5-12"></span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;"># As you can see, its not very optimal </span></span>
<span id="cb5-15"><span class="kw" style="color: #003B4F;">def</span> ship1():</span>
<span id="cb5-16">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"    |\ "</span>)</span>
<span id="cb5-17">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"    |/ "</span>)</span>
<span id="cb5-18">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"\__ |__/ "</span>)</span>
<span id="cb5-19">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">" \____/ "</span>)</span>
<span id="cb5-20">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m -------------------------------------------- </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-21"></span>
<span id="cb5-22"></span>
<span id="cb5-23"><span class="kw" style="color: #003B4F;">def</span> ship2():</span>
<span id="cb5-24">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"      |\ "</span>)</span>
<span id="cb5-25">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"      |/ "</span>)</span>
<span id="cb5-26">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"  \__ |__/ "</span>)</span>
<span id="cb5-27">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"   \____/ "</span>)</span>
<span id="cb5-28">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-29"></span>
<span id="cb5-30"></span>
<span id="cb5-31"><span class="kw" style="color: #003B4F;">def</span> ship3():</span>
<span id="cb5-32">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"        |\ "</span>)</span>
<span id="cb5-33">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"        |/ "</span>)</span>
<span id="cb5-34">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"    \__ |__/ "</span>)</span>
<span id="cb5-35">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"     \____/ "</span>)</span>
<span id="cb5-36">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-37"></span>
<span id="cb5-38"></span>
<span id="cb5-39"><span class="kw" style="color: #003B4F;">def</span> ship4():</span>
<span id="cb5-40">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"          |\ "</span>)</span>
<span id="cb5-41">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"          |/ "</span>)</span>
<span id="cb5-42">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"      \__ |__/ "</span>)</span>
<span id="cb5-43">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"       \____/ "</span>)</span>
<span id="cb5-44">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-45"></span>
<span id="cb5-46"></span>
<span id="cb5-47"><span class="kw" style="color: #003B4F;">def</span> ship5():</span>
<span id="cb5-48">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"            |\ "</span>)</span>
<span id="cb5-49">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"            |/ "</span>)</span>
<span id="cb5-50">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"        \__ |__/ "</span>)</span>
<span id="cb5-51">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"         \____/ "</span>)</span>
<span id="cb5-52">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m -------------------------------------------- </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-53"></span>
<span id="cb5-54"></span>
<span id="cb5-55"><span class="kw" style="color: #003B4F;">def</span> ship6():</span>
<span id="cb5-56">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"              |\ "</span>)</span>
<span id="cb5-57">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"              |/ "</span>)</span>
<span id="cb5-58">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"          \__ |__/ "</span>)</span>
<span id="cb5-59">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"           \____/ "</span>)</span>
<span id="cb5-60">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-61"></span>
<span id="cb5-62"></span>
<span id="cb5-63"><span class="kw" style="color: #003B4F;">def</span> ship7():</span>
<span id="cb5-64">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                |\ "</span>)</span>
<span id="cb5-65">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                |/ "</span>)</span>
<span id="cb5-66">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"            \__ |__/ "</span>)</span>
<span id="cb5-67">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"             \____/ "</span>)</span>
<span id="cb5-68">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-69"></span>
<span id="cb5-70"></span>
<span id="cb5-71"><span class="kw" style="color: #003B4F;">def</span> ship8():</span>
<span id="cb5-72">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                  |\ "</span>)</span>
<span id="cb5-73">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                  |/ "</span>)</span>
<span id="cb5-74">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"              \__ |__/ "</span>)</span>
<span id="cb5-75">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"               \____/ "</span>)</span>
<span id="cb5-76">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m -------------------------------------------- </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-77"></span>
<span id="cb5-78"></span>
<span id="cb5-79"><span class="kw" style="color: #003B4F;">def</span> ship9():</span>
<span id="cb5-80">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                    |\ "</span>)</span>
<span id="cb5-81">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                    |/ "</span>)</span>
<span id="cb5-82">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                \__ |__/ "</span>)</span>
<span id="cb5-83">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                 \____/ "</span>)</span>
<span id="cb5-84">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-85"></span>
<span id="cb5-86"></span>
<span id="cb5-87"><span class="kw" style="color: #003B4F;">def</span> ship10():</span>
<span id="cb5-88">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                      |\ "</span>)</span>
<span id="cb5-89">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                      |/ "</span>)</span>
<span id="cb5-90">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                  \__ |__/ "</span>)</span>
<span id="cb5-91">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                   \____/ "</span>)</span>
<span id="cb5-92">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-93"></span>
<span id="cb5-94"></span>
<span id="cb5-95"><span class="kw" style="color: #003B4F;">def</span> ship11():</span>
<span id="cb5-96">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                        |\ "</span>)</span>
<span id="cb5-97">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                        |/ "</span>)</span>
<span id="cb5-98">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                    \__ |__/ "</span>)</span>
<span id="cb5-99">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                     \____/ "</span>)</span>
<span id="cb5-100">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m -------------------------------------------- </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-101"></span>
<span id="cb5-102"></span>
<span id="cb5-103"><span class="kw" style="color: #003B4F;">def</span> ship12():</span>
<span id="cb5-104">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                          |\ "</span>)</span>
<span id="cb5-105">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                          |/ "</span>)</span>
<span id="cb5-106">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                      \__ |__/ "</span>)</span>
<span id="cb5-107">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                       \____/ "</span>)</span>
<span id="cb5-108">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-109"></span>
<span id="cb5-110"></span>
<span id="cb5-111"><span class="kw" style="color: #003B4F;">def</span> ship13():</span>
<span id="cb5-112">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                            |\ "</span>)</span>
<span id="cb5-113">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                            |/ "</span>)</span>
<span id="cb5-114">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                        \__ |__/ "</span>)</span>
<span id="cb5-115">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                         \____/ "</span>)</span>
<span id="cb5-116">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-117"></span>
<span id="cb5-118"></span>
<span id="cb5-119"><span class="kw" style="color: #003B4F;">def</span> ship14():</span>
<span id="cb5-120">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                              |\ "</span>)</span>
<span id="cb5-121">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                              |/ "</span>)</span>
<span id="cb5-122">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                          \__ |__/ "</span>)</span>
<span id="cb5-123">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                           \____/ "</span>)</span>
<span id="cb5-124">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-125"></span>
<span id="cb5-126"></span>
<span id="cb5-127"><span class="kw" style="color: #003B4F;">def</span> ship15():</span>
<span id="cb5-128">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                |\ "</span>)</span>
<span id="cb5-129">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                |/ "</span>)</span>
<span id="cb5-130">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                            \__ |__/ "</span>)</span>
<span id="cb5-131">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                             \____/ "</span>)</span>
<span id="cb5-132">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m -------------------------------------------- </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-133"></span>
<span id="cb5-134"></span>
<span id="cb5-135"><span class="kw" style="color: #003B4F;">def</span> ship16():</span>
<span id="cb5-136">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                  |\ "</span>)</span>
<span id="cb5-137">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                  |/ "</span>)</span>
<span id="cb5-138">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                              \__ |__/ "</span>)</span>
<span id="cb5-139">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                               \____/ "</span>)</span>
<span id="cb5-140">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-141"></span>
<span id="cb5-142"></span>
<span id="cb5-143"><span class="kw" style="color: #003B4F;">def</span> ship17():</span>
<span id="cb5-144">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                    |\ "</span>)</span>
<span id="cb5-145">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                    |/ "</span>)</span>
<span id="cb5-146">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                \__ |__/ "</span>)</span>
<span id="cb5-147">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                 \____/ "</span>)</span>
<span id="cb5-148">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m -------------------------------------------- </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-149"></span>
<span id="cb5-150"></span>
<span id="cb5-151"><span class="kw" style="color: #003B4F;">def</span> ship18():</span>
<span id="cb5-152">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                      |\ "</span>)</span>
<span id="cb5-153">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                      |/ "</span>)</span>
<span id="cb5-154">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                  \__ |__/ "</span>)</span>
<span id="cb5-155">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                   \____/ "</span>)</span>
<span id="cb5-156">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-157"></span>
<span id="cb5-158"></span>
<span id="cb5-159"><span class="kw" style="color: #003B4F;">def</span> ship19():</span>
<span id="cb5-160">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                        |\ "</span>)</span>
<span id="cb5-161">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                        |/ "</span>)</span>
<span id="cb5-162">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                    \__ |__/ "</span>)</span>
<span id="cb5-163">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                     \____/ "</span>)</span>
<span id="cb5-164">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m -------------------------------------------- </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-165"></span>
<span id="cb5-166"></span>
<span id="cb5-167"><span class="kw" style="color: #003B4F;">def</span> ship20():</span>
<span id="cb5-168">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                          |\ "</span>)</span>
<span id="cb5-169">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                          |/ "</span>)</span>
<span id="cb5-170">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                      \__ |__/ "</span>)</span>
<span id="cb5-171">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"                                       \____/ "</span>)</span>
<span id="cb5-172">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[34m -------------------------------------------- </span><span class="ch" style="color: #20794D;">\u001b</span><span class="st" style="color: #20794D;">[37m"</span>)</span>
<span id="cb5-173"></span>
<span id="cb5-174"></span>
<span id="cb5-175">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-176">time.sleep(<span class="fl" style="color: #AD0000;">.1</span>)</span>
<span id="cb5-177">ship1()</span>
<span id="cb5-178">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-179">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-180">ship2()</span>
<span id="cb5-181">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-182">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-183">ship3()</span>
<span id="cb5-184">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-185">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-186">ship4()</span>
<span id="cb5-187">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-188">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-189">ship5()</span>
<span id="cb5-190">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-191">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-192">ship6()</span>
<span id="cb5-193">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-194">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-195">ship7()</span>
<span id="cb5-196">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-197">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-198">ship8()</span>
<span id="cb5-199">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-200">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-201">ship9()</span>
<span id="cb5-202">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-203">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-204">ship10()</span>
<span id="cb5-205">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-206">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-207">ship11()</span>
<span id="cb5-208">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-209">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-210">ship12()</span>
<span id="cb5-211">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-212">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-213">ship13()</span>
<span id="cb5-214">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-215">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-216">ship14()</span>
<span id="cb5-217">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-218">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-219">ship15()</span>
<span id="cb5-220">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-221">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-222">ship16()</span>
<span id="cb5-223">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-224">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-225">ship17()</span>
<span id="cb5-226">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-227">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-228">ship18()</span>
<span id="cb5-229">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-230">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-231">ship19()</span>
<span id="cb5-232">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span>
<span id="cb5-233">clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-234">ship20()</span>
<span id="cb5-235">time.sleep(<span class="fl" style="color: #AD0000;">.5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                                          |\ 
                                          |/ 
                                      \__ |__/ 
                                       \____/ 
 -------------------------------------------- </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;">* Creator: Nighthawk Coding Society</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">Sailing Ship Animation (programatic method)</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="im" style="color: #00769E;">import</span> time <span class="co" style="color: #5E5E5E;"># used for delay</span></span>
<span id="cb7-7"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> clear_output  <span class="co" style="color: #5E5E5E;"># jupyter specific clear</span></span>
<span id="cb7-8"></span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;"># ANSI Color Codes</span></span>
<span id="cb7-11">OCEAN_COLOR <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\u001B</span><span class="st" style="color: #20794D;">[34m</span><span class="ch" style="color: #20794D;">\u001B</span><span class="st" style="color: #20794D;">[2D"</span></span>
<span id="cb7-12">SHIP_COLOR <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\u001B</span><span class="st" style="color: #20794D;">[32m</span><span class="ch" style="color: #20794D;">\u001B</span><span class="st" style="color: #20794D;">[2D"</span></span>
<span id="cb7-13">RESET_COLOR <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\u001B</span><span class="st" style="color: #20794D;">[0m</span><span class="ch" style="color: #20794D;">\u001B</span><span class="st" style="color: #20794D;">[2D"</span></span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="kw" style="color: #003B4F;">def</span> ship_print(position):  <span class="co" style="color: #5E5E5E;"># print ship with colors and leading spaces according to position</span></span>
<span id="cb7-16">    clear_output(wait<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb7-17">    <span class="bu" style="color: null;">print</span>(RESET_COLOR)</span>
<span id="cb7-18">    </span>
<span id="cb7-19">    sp <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">" "</span> <span class="op" style="color: #5E5E5E;">*</span> position</span>
<span id="cb7-20">    <span class="bu" style="color: null;">print</span>(sp <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"    |\   "</span>)</span>
<span id="cb7-21">    <span class="bu" style="color: null;">print</span>(sp <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"    |/   "</span>)</span>
<span id="cb7-22">    <span class="bu" style="color: null;">print</span>(SHIP_COLOR, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb7-23">    <span class="bu" style="color: null;">print</span>(sp <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"\__ |__/ "</span>)</span>
<span id="cb7-24">    <span class="bu" style="color: null;">print</span>(sp <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">" \____/  "</span>)</span>
<span id="cb7-25">    <span class="bu" style="color: null;">print</span>(OCEAN_COLOR <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"--"</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">35</span> <span class="op" style="color: #5E5E5E;">+</span> RESET_COLOR)</span>
<span id="cb7-26"></span>
<span id="cb7-27"></span>
<span id="cb7-28"><span class="kw" style="color: #003B4F;">def</span> ship():  <span class="co" style="color: #5E5E5E;"># ship function, loop/controller for animation speed and times</span></span>
<span id="cb7-29">    <span class="co" style="color: #5E5E5E;"># loop control variables</span></span>
<span id="cb7-30">    start <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span>  <span class="co" style="color: #5E5E5E;"># start at zero</span></span>
<span id="cb7-31">    distance <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span>  <span class="co" style="color: #5E5E5E;"># how many times to repeat</span></span>
<span id="cb7-32">    step <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span>  <span class="co" style="color: #5E5E5E;"># count by 2</span></span>
<span id="cb7-33"></span>
<span id="cb7-34">    <span class="co" style="color: #5E5E5E;"># loop purpose is to animate ship sailing</span></span>
<span id="cb7-35">    <span class="cf" style="color: #003B4F;">for</span> position <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(start, distance, step):</span>
<span id="cb7-36">        ship_print(position)  <span class="co" style="color: #5E5E5E;"># call to function with parameter</span></span>
<span id="cb7-37">        time.sleep(<span class="fl" style="color: #AD0000;">.2</span>)</span>
<span id="cb7-38"></span>
<span id="cb7-39">        </span>
<span id="cb7-40">ship() <span class="co" style="color: #5E5E5E;"># activate/call ship function</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
                                                              |\   
                                                              |/   
                                                          \__ |__/ 
                                                           \____/  
----------------------------------------------------------------------</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>1.D</category>
  <category>2.B</category>
  <category>3.B</category>
  <category>C3.1</category>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-12-01-pbl-2d-iteration.html</guid>
  <pubDate>Thu, 01 Dec 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/monkeys.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Unit 3 Sections 3-4</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-11-29-AP-unit3_3_to_4.html</link>
  <description><![CDATA[ 



<section id="objectives" class="level2">
<h2 class="anchored" data-anchor-id="objectives">Objectives</h2>
<blockquote class="blockquote">
<p>Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better</p>
</blockquote>
</section>
<section id="process-for-presenters" class="level2">
<h2 class="anchored" data-anchor-id="process-for-presenters">Process for Presenters</h2>
<ul>
<li>Use “Comments” on this blog page to post materials for lesson</li>
<li>Be sure to include “Period and Teacher” in instructions</li>
<li>Be sure homework assignment, hacks and points/rubric are clearly described</li>
</ul>
</section>
<section id="process-for-individuals" class="level2">
<h2 class="anchored" data-anchor-id="process-for-individuals">Process for Individuals</h2>
<ul>
<li>Each participating Team will post a shared review ticket with individual work clearly listed</li>
<li>Be sure to include “Period, Teacher and Table” in review ticket</li>
<li>Collaboration is encouraged but individual and unique work is required</li>
</ul>


</section>

 ]]></description>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-11-29-AP-unit3_3_to_4.html</guid>
  <pubDate>Tue, 29 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/bigidea3.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Week of 11-28, Student Teaching Week 1</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-11-28-PT-student_session1.html</link>
  <description><![CDATA[ 



<section id="plans-week-14" class="level2">
<h2 class="anchored" data-anchor-id="plans-week-14">Plans Week 14</h2>
<blockquote class="blockquote">
<p>Weeks Plans - Monday: 3.1 and 3.2 Variables, Assignments, and Data Abstractions - Tuesday: 3.3 and 3.4 Mathematical Expressions and Strings - Wednesday: work day - Thursday: 3.5-3.7 Boolean Expression, Conditionals, Nested Conditionals - Friday: work day</p>
</blockquote>


</section>

 ]]></description>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-11-28-PT-student_session1.html</guid>
  <pubDate>Mon, 28 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/points.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Unit 3 Sections 1-2</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-11-28-AP-unit3_1_to_2.html</link>
  <description><![CDATA[ 



<section id="objectives" class="level2">
<h2 class="anchored" data-anchor-id="objectives">Objectives</h2>
<blockquote class="blockquote">
<p>Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better</p>
</blockquote>
</section>
<section id="process-for-presenters" class="level2">
<h2 class="anchored" data-anchor-id="process-for-presenters">Process for Presenters</h2>
<ul>
<li>Use “Comments” on this blog page to post materials for lesson</li>
<li>Be sure to include “Period and Teacher” in instructions</li>
<li>Be sure homework assignment, hacks and points/rubric are clearly described</li>
</ul>
</section>
<section id="process-for-individuals" class="level2">
<h2 class="anchored" data-anchor-id="process-for-individuals">Process for Individuals</h2>
<ul>
<li>Each participating Team will post a shared review ticket with individual work clearly listed</li>
<li>Be sure to include “Period, Teacher and Table” in review ticket</li>
<li>Collaboration is encouraged but individual and unique work is required</li>
</ul>


</section>

 ]]></description>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-11-28-AP-unit3_1_to_2.html</guid>
  <pubDate>Mon, 28 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/bigidea3.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Post With Code</title>
  <dc:creator>Harlow Malloc</dc:creator>
  <link>https://syeung2.github.io/APCSP2/blog/posts/post-with-code/index.html</link>
  <description><![CDATA[ 



<p>This is a post with executable code.</p>



 ]]></description>
  <category>news</category>
  <category>code</category>
  <category>analysis</category>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/post-with-code/index.html</guid>
  <pubDate>Tue, 22 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/post-with-code/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Welcome To My Blog</title>
  <dc:creator>Tristan O&#39;Malley</dc:creator>
  <link>https://syeung2.github.io/APCSP2/blog/posts/welcome/index.html</link>
  <description><![CDATA[ 



<p>This is the first post in a Quarto blog. Welcome!</p>
<p><img src="https://syeung2.github.io/APCSP2/blog/posts/welcome/thumbnail.jpg" class="img-fluid"></p>
<p>Since this post doesn’t specify an explicit <code>image</code>, the first image in the post will be used in the listing page of posts.</p>



 ]]></description>
  <category>news</category>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/welcome/index.html</guid>
  <pubDate>Sat, 19 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/welcome/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Week of 11-14, Tri 2 Into, Tools and Issues</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-11-14-PT-tri2_tools_cb.html</link>
  <description><![CDATA[ 



<section id="plans-week-13" class="level2">
<h2 class="anchored" data-anchor-id="plans-week-13">Plans Week 13</h2>
<blockquote class="blockquote">
<p>Weeks Plans - Monday: <strong><em>Check #announcements daily, Form Teams, Pick Teaching Topic, GDP, Setup Team, Carry over or establish new Projects and Team repositories, Establish scrum board</em></strong> . Teachers will have very <strong><em>little tolerance for tools that are not working!!!</em></strong> Verify Tools, Fastpages Kernels, WSL, and Anaconda as applicable (Due Friday). - Tuesday: Binary Logic and Abstractions review, <a href="https://cs50.harvard.edu/x/2022/weeks/0/">Harvard CS50</a> minute 0 to minute 50 to provide background on binary, complete all 50 minutes recommended - Wednesday: Substitute, Work Day - Thursday: Lesson Points, Lesson Homework, Tour/highlights of Binary Code 10 minutes, Work Day - Friday: *<strong>Tools and Lesson Plan/Issues Verification Due</strong></p>
</blockquote>
</section>
<section id="trimester-2-pre-holiday-objectives" class="level2">
<h2 class="anchored" data-anchor-id="trimester-2-pre-holiday-objectives">Trimester 2 Pre-Holiday Objectives</h2>
<blockquote class="blockquote">
<p><mark>Unit 2 and Unit 3 mastery.</mark> - Students needs to master Big Idea 3 Algorithms and Programming from College Board online curriculum prior to winter break. - Students should master Unit 2, topics 2.1, 2.3, and 2.4 before winter break. - Teams will share a lesson. - Every team must present and be clearly involved in preparation. Review tickets are required for each student with links to tangibles. - In lesson preparation and teaching students should try to use Binary as data in lessons. All algorithms need data and there are many applications of Binary that can support the Algorithms from College Board Unit 3 - Exceptions can be made to Binary. But, this must be discussed with Teacher in advance. - Students will be working with Fastpages, <strong><em>Jupyter Notebooks: Python, JavaScript kernels.</em></strong> Additionally, students will work in <strong><em>Frontend JavaScript code in Fastpages Markdown files</em></strong> (see <a href="https://nighthawkcoders.github.io/APCSP/frontend/overview">Frontend Examples</a>. - Through the Trimester students will be expected to *<strong>present Fastpages/Blog with Homework assignments and one-to-many Frontend JavaScrip web applications.</strong></p>
</blockquote>
</section>
<section id="trimester-2-post-holiday-objectives" class="level2">
<h2 class="anchored" data-anchor-id="trimester-2-post-holiday-objectives">Trimester 2 Post-Holiday Objectives</h2>
<blockquote class="blockquote">
<p><mark>Create Performance Task completed.</mark> - After additional Data and Algorithm mastery in initial 5 weeks of trimester… students and teams will <strong><em>transition to “Create Performance Task” projects</em></strong>. 12 hours of class time will be allocated to this task over the final 7 weeks. Additionally, you will use this project in Trimester 2 N@tM presentations.<br>
- Be sure to have an <strong><em>interactive portion to this project</em></strong>, this is key to College Board Video and N@tM presentations. - During the 7 weeks we will be <strong><em>learning more about APIs, creating Frontend forms, storing forms in Databases, posting comments, uploading (images) and continuing with likes. As we transition to Trimester 3 we will creating user login and site security.</em></strong> - <strong><em>Plan your Create Performance Task with these features in mind.</em></strong> FYI, 1-4 people can work on a project, but everyone must have there own feature that represents all the College Board requirements. - We will have Tech Talks in Career Tech, AP Test and Human Development during the last 7 weeks.</p>
</blockquote>
</section>
<section id="tools-and-issue-verification-3-points" class="level2">
<h2 class="anchored" data-anchor-id="tools-and-issue-verification-3-points">Tools and Issue Verification (3 points)</h2>
<blockquote class="blockquote">
<p><mark>Summary of Points.</mark> - Individual Tools Verification, VSCode, JavaScript and Python Kernels working on Laptop/Desktop. “Python Jupyter Notebook” and “Javascript Fastpages Markdown files will be key technical platforms. If you have problems currently, go back and re-install tools from 1st trimester guide. Be sure VS Code is running out of Anaconda environment. Perform <strong><em>make server</em></strong> to pretest prior to commits. Show <strong><em>running code</em></strong> in Fastpages for Binary Markdown and FastPage Python. - Each member of team pick a different hack or pair program 2 hacks. Create <strong><em>Individual Issue</em></strong> with checkboxes. This should be planned in Individual FastPages. However, you should plan a hack that is beneficial to topic that you will be Teaching. Consider this individual research.</p>
</blockquote>
</section>
<section id="lesson-plans-and-presentation-7-points-.-recording-will-be-in-parts" class="level2">
<h2 class="anchored" data-anchor-id="lesson-plans-and-presentation-7-points-.-recording-will-be-in-parts">Lesson Plans and Presentation, (7 points) . – recording will be in parts</h2>
<ul>
<li><strong><em>Plan Individual Binary Logic and Abstraction Hacks.</em></strong> Each member of team pick a different hack or pair program 2 hacks. Create <strong><em>Individual Issue</em></strong> with checkboxes. Topics for Hacks are in Binary Logic and Algorithms Blog. Build all hacks that you interpret as valuable/required for your lesson plan!!! <strong><em>Consider redesign of screen or if you will build many different Markdown files for each hack.</em></strong> Plan to leave challenge when providing lesson.</li>
<li><strong><em>Plan Team Lesson and Issue(s)</em></strong>, requires checkboxes!!!
<ul>
<li>Planning and Presenting Lesson <mark>4 points</mark>
<ul>
<li>Planning. Issues used in preparation and tangibles completed in individual portions of work.</li>
<li>Topic, presentation quality and expertise. Make sure you watch College Board videos on material, become expert on ideas. Perform other research. <strong><em>Quality of reflecting material is key to points</em></strong>. Communicate to student key ideas and learnings needed.</li>
<li>Technicals and Data used. You must consider <strong><em>using Binary project or hacks to supplement teaching/learning of lesson material.</em></strong> Consider Career Tech blogs on Schedule as supplemental Topics/Hacks to the initial Binary Tech Talk. <strong><em>Coordinate with other Teams for the same week</em></strong>. Coordinate on Homework to make sure it is about 1.5 hours total, not on same hack. Be sure to emphasize Topics and Ideas with Technicals.</li>
<li>Algorithm and homework assignment. Objective in <strong><em>each lesson is to teach Algorithm and key Data topics at the same time.</em></strong> Make sure Frontend code is created from homework. Homework should be limited to 30 minutes a lesson, including activities or games. Remainder of class should be to start homework. Publish materials and receive homework on Comment page of blog where you signed up for lesson.</li>
</ul></li>
<li>Grading: <mark>2 points</mark>. Plan to receive and grade homework. Set due date and be sure to grade within 2 to 3 days after Teaching.
<ul>
<li>Grading participation. Each person will be grading ~10 homeworks.<br>
</li>
<li>Completeness and quality. <strong><em>Homework grading and presenting summary and scores to each student is key part to a lessons</em></strong>. Grade each student on 3 criteria, it will be worth 1 point total. Set expectations at 90% if the attempt/meet criteria. Plus or minus on adding or missing criteria. Any submit is about 80%, any participation is about 70%.<br>
</li>
</ul></li>
<li>Grading Summary: <mark>1 point</mark>. Submit a summary of all grades and reflection to Teacher. Make it easy for Teacher to record and know work was complete.</li>
</ul></li>
</ul>


</section>

 ]]></description>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-11-14-PT-tri2_tools_cb.html</guid>
  <pubDate>Mon, 14 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/points.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Binary Logic and Abstraction</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-11-14-AP-binary_logic.html</link>
  <description><![CDATA[ 



<section id="binary-data-data-structures-data-abstraction-ascii-unicode-color-codes" class="level2">
<h2 class="anchored" data-anchor-id="binary-data-data-structures-data-abstraction-ascii-unicode-color-codes">Binary, Data, Data Structures, Data Abstraction (ASCII, Unicode, Color Codes),</h2>
<blockquote class="blockquote">
<p>Algorithms, Data and Data Structures go together. It is <strong><em>required</em></strong> to have a data topic as you venture into Algorithms and Lessons. This blog is a collection of binary, data and data structures that should be <strong><em>your data topic</em></strong>!!! Use <strong><em>a data topic</em></strong> as you learn algorithms and programming. - <strong><em>Explore that topic in Computer Science manner</em></strong> (research, jupyter notebooks, frontend / backend coding) - Build a lesson that is more interesting, by explaining an algorithm and logic using a data topic. - Teach with examples… <strong><em>Segment from <a href="https://youtu.be/1tnj3UCkuxU?t=336">CS50</a> and go to minute 13:15.</em></strong> - Tour the Code. <strong><em>Use <a href="https://nighthawkcoders.github.io/APCSP/frontend/binary">Binary Frontend Code</a></em></strong> to get you started. <mark>Better clone APCSP project drag and drop _posts/2022-07-07-PBL-binary.md to your project and Debug</mark> - This Tech Talk will finish by <strong><em>reviewing hacks</em></strong>, the remainder of this blog and Binary Frontend Code is part of your research.</p>
</blockquote>
</section>
<section id="math-in-binary" class="level2">
<h2 class="anchored" data-anchor-id="math-in-binary">Math in Binary</h2>
<blockquote class="blockquote">
<p>Learn binary by bitwise operators and more. Shifting bits is a common computer operation and does wonderful things in math like multiply and divide. Last bit always determines odd or even. Look for shift on <a href="https://www.w3schools.com/js/js_bitwise.asp">w3schools</a></p>
</blockquote>
<section id="logic-of-shift" class="level3">
<h3 class="anchored" data-anchor-id="logic-of-shift">Logic of Shift</h3>
<blockquote class="blockquote">
<p>Explore right and left shifts with binary numbers.<br>
- In an arithmetic shift, the bits that are shifted out of either end are discarded. - In a left arithmetic shift, zeros are shifted in on the right. <img src="https://syeung2.github.io/APCSP2/blog/posts/logic_of_shift.png" class="img-fluid"></p>
</blockquote>
</section>
<section id="understand-binary-numbers-by-elaboration-of-shift-20-21-22" class="level3">
<h3 class="anchored" data-anchor-id="understand-binary-numbers-by-elaboration-of-shift-20-21-22">Understand binary Numbers by elaboration of Shift (2^^0, 2^^1, 2^^2)</h3>
<blockquote class="blockquote">
<p>How does the Power of 2 work? What is a binary number? What is Base2, Base10, Base16. - This example uses an 8-bit register. Math can be represented in much in many more bits, 32 bits or 2 bytes is common for integer in modern computer languages. - Most Significant Bit (MSB), least (LSB) - This example shows negative and positive numbers, using technique called Twos Complement. - In the first case, the leftmost digit was shifted past the end of the register, and a new 0 was shifted into the rightmost position. Positive Multiply. - In the second case, the rightmost 1 was shifted out, and a new 1 was copied into the leftmost position, preserving the sign of the number. Negative Divide, this example obviously needs more study. <img src="https://syeung2.github.io/APCSP2/blog/posts/elaboration_of_shift.png" class="img-fluid"></p>
</blockquote>
</section>
<section id="ui-conceptdesign" class="level3">
<h3 class="anchored" data-anchor-id="ui-conceptdesign">UI Concept/Design</h3>
<blockquote class="blockquote">
<p>Conceptualize on a UI that will illustrate binary and decimal. In learning these concepts, it is best to code and example to illustrate what is happening. - <em>n Right Shifts (divides by 2^n); n Left Shifts (multiplies by 2^n)</em> - Add buttons for “&lt;&lt;” and ” &gt;&gt;” <img src="https://syeung2.github.io/APCSP2/blog/posts/binary_shift.png" class="img-fluid"></p>
</blockquote>
</section>
</section>
<section id="ascii-and-unicode" class="level2">
<h2 class="anchored" data-anchor-id="ascii-and-unicode">ASCII and Unicode</h2>
<blockquote class="blockquote">
<p>Computers represent more than Math. Mostly everyone is familiar with the characters on a keyboard and Emojis. These are all represented in binary, the data abstraction being the characters we visualize. 😂</p>
</blockquote>
<section id="character-data-abstraction" class="level3">
<h3 class="anchored" data-anchor-id="character-data-abstraction">Character Data Abstraction</h3>
<blockquote class="blockquote">
<p>How are characters stored? How many bits do they take?<br>
- ASCII is 8 bits, it generally represent keys on keyboard. Look up ASCII Table. - Unicode can be UTF-8, 16 or 32, each representing bits. ASCII is preserved in Unicode. - ASCII - 7 bits, extended to 8 bits with Unicode - UTF-8 - UTF-16 - UTF-32 <img src="https://syeung2.github.io/APCSP2/blog/posts/sample_unicode.png" class="img-fluid"> <em>Sample of Unicode characters.</em></p>
</blockquote>
</section>
<section id="ui-conceptdesign-1" class="level3">
<h3 class="anchored" data-anchor-id="ui-conceptdesign-1">UI Concept/Design</h3>
<blockquote class="blockquote">
<p>The ASCII value in picture should be change based off of the bits in evaluation you are doing. Bits displayed, label, and evaluation would be specific to evaluation type: <img src="https://syeung2.github.io/APCSP2/blog/posts/ascii_label.png" class="img-fluid"> <em>Original ASCII</em></p>
</blockquote>
</section>
</section>
<section id="color-codes" class="level2">
<h2 class="anchored" data-anchor-id="color-codes">Color Codes</h2>
<blockquote class="blockquote">
<p>Pixels are little dots on Monitors and TVs that make up the display. Each pixel has an Red Green and Blue value (RGB). All pictures we see or take are composed of RGB using a density measurement. These are stored and then represented by digitally or in print. - Monitors - 1280 x 1024 Super-eXtended Graphics Array (SXGA) - 1366 x 768 High Definition (HD) - 1600 x 900 High Definition Plus (HD+) - 1920 x 1080 Full High Definition (FHD) - 1920 x 1200 Wide Ultra Extended Graphics Array (WUXGA) - TVs - 4K Ultra HD: The term 4K means the screen is about 4,000 pixels wide. … - 1080p (Full HD): This resolution is 1,920 x 1,080 pixels. … - 720p (HD Ready): This is mostly found on smaller TVs, and it has a resolution of 1,280 x 720. - Camera |Sensor Resolution (megapixels)|Typical Image Resolution (pixels)| |2.16|1800 x 1200| |3.9|2272 x 1704|<br>
|5.0|2592 x 1944|<br>
|7.1|3072 x 2304|<br>
|8.0|3264 x 2448| |10.0|3648 x 2736|<br>
|12.1|4000 x 3000|<br>
|14.7|4416 x 3312|<br>
|21.0|5616 x 3744|</p>
</blockquote>
<section id="a-color-code-is-a-24-bit-abstraction." class="level3">
<h3 class="anchored" data-anchor-id="a-color-code-is-a-24-bit-abstraction.">A Color code is a 24 bit abstraction.</h3>
<blockquote class="blockquote">
<p>There are 8 bits for Red, 8 bits for Blue, and 8 bits for Green.</p>
</blockquote>
<p>|Name|Hex Code|RGB Code| |Black|#000000|rgb(0, 0, 0)| |Red|#FF0000|rgb(255, 0, 0)| |Maroon|#800000|rgb(128, 0, 0)| |Yellow|#FFFF00|rgb(255, 255, 0)|</p>
<p><img src="https://syeung2.github.io/APCSP2/blog/posts/color_code.png" class="img-fluid"> <em>255 </em> 255 * 255 combinations of R, G, B*</p>
</section>
<section id="ui-design" class="level3">
<h3 class="anchored" data-anchor-id="ui-design">UI Design</h3>
<blockquote class="blockquote">
<p>Here is a sample program a student used to visualize color by turning buttons on and off. <img src="https://syeung2.github.io/APCSP2/blog/posts/color_block.png" class="img-fluid"> <em>by Anthony Vo</em> 3 rows representing R, G, B Resulting color displayed in block</p>
</blockquote>
</section>
</section>
<section id="logic-gates" class="level2">
<h2 class="anchored" data-anchor-id="logic-gates">Logic Gates</h2>
<blockquote class="blockquote">
<p>The fundamentals of all decisions in computers is made by logic gates. These gates are visualized by permuting 1 and 0 across many different types of decisions. The result is an expression that evaluated to 1 or 0. These are called Truth Tables.</p>
</blockquote>
<section id="logic-gates-can-be-simulated-with-2-bits" class="level3">
<h3 class="anchored" data-anchor-id="logic-gates-can-be-simulated-with-2-bits">Logic Gates can be simulated with 2 bits</h3>
<p>Look for bitwise operators on <a href="https://www.w3schools.com/js/js_bitwise.asp">w3schools</a></p>
</section>
<section id="ui-concept" class="level3">
<h3 class="anchored" data-anchor-id="ui-concept">UI Concept</h3>
<blockquote class="blockquote">
<p>Visual concept of logic gates - Establish check boxes for A / B on and off - Show result of Boolean Expression using Gate visual <img src="https://syeung2.github.io/APCSP2/blog/posts/logic_gates.png" class="img-fluid"> <em>Logic Gates</em></p>
</blockquote>
</section>
<section id="ui-design-1" class="level3">
<h3 class="anchored" data-anchor-id="ui-design-1">UI Design</h3>
<blockquote class="blockquote">
<p>Logic gate lab in JavaScript <img src="https://syeung2.github.io/APCSP2/blog/posts/logic_gate_lab.png" class="img-fluid"> <em>by Kylie Scharf</em> AB checkboxes with Submit button Table with Symbol, Description, and Result</p>
</blockquote>
</section>
<section id="logic-of-logic-gates" class="level3">
<h3 class="anchored" data-anchor-id="logic-of-logic-gates">Logic of Logic Gates</h3>
<blockquote class="blockquote">
<p>A logic gate can have two inputs (a,b) and by how changing these inputs it impacts the output(c). - There are four possible inputs: - 0 0 - 0 1 - 1 0 - 1 1 - Understanding the output enables us to understand a logical expressions. All outputs are routed in Logic Gates (similar to how a language is routed in Latin). - AND is true for 1 1; NAND is true opposite of AND 0 0, 0 1, 1 0 - OR is true for 1 1, 0 1, 1 0, NOR is true opposite of OR 0 0 - XOR is true for 0 1, 1 0</p>
</blockquote>
</section>
<section id="practical-application" class="level3">
<h3 class="anchored" data-anchor-id="practical-application">Practical Application</h3>
<blockquote class="blockquote">
<p>Logic gates are used everywhere <img src="https://syeung2.github.io/APCSP2/blog/posts/logic_gate_application.png" class="img-fluid"></p>
</blockquote>
</section>
</section>
<section id="unsigned-addition" class="level2">
<h2 class="anchored" data-anchor-id="unsigned-addition">Unsigned Addition</h2>
<p>Here we are requesting 3 rows of bits to simulate Math. This could be done with 4, 8, or 16 bits.</p>
<section id="initial-ui-implementation" class="level3">
<h3 class="anchored" data-anchor-id="initial-ui-implementation">Initial UI Implementation</h3>
<p><img src="https://syeung2.github.io/APCSP2/blog/posts/binary_math_conversion.png" class="img-fluid"> Action buttons for +1 and -1 Additional actions for Turn On and Turn Off</p>
</section>
<section id="unsigned-addition-1" class="level3">
<h3 class="anchored" data-anchor-id="unsigned-addition-1">Unsigned Addition</h3>
<p><img src="https://syeung2.github.io/APCSP2/blog/posts/unsigned_addition.png" class="img-fluid"></p>
</section>
</section>
<section id="signed-addition" class="level2">
<h2 class="anchored" data-anchor-id="signed-addition">Signed Addition</h2>
<p>Integers in most languages are int8, int16, int32, or int64. They typically reserve left most bit for sign.</p>
<section id="common-concept-for-integer-math" class="level3">
<h3 class="anchored" data-anchor-id="common-concept-for-integer-math">Common concept for Integer Math</h3>
<p><img src="https://syeung2.github.io/APCSP2/blog/posts/integer_math_pos.png" class="img-fluid"> <em>Positive number</em></p>
</section>
<section id="basic-concept-but-not-typically-used" class="level3">
<h3 class="anchored" data-anchor-id="basic-concept-but-not-typically-used">Basic concept, but not typically used</h3>
<p><img src="https://syeung2.github.io/APCSP2/blog/posts/integer_math_neg.png" class="img-fluid"> <em>Negative number</em></p>
</section>
<section id="inverting-numbers-twos-complement" class="level3">
<h3 class="anchored" data-anchor-id="inverting-numbers-twos-complement">Inverting numbers, twos complement</h3>
<p><img src="https://syeung2.github.io/APCSP2/blog/posts/twos_complement.png" class="img-fluid"> <em>Two’s complement allows adding for signed and unsigned numbers</em></p>
<p>Basic concept is to invert/negate bits to produce negative. This allows numbers to be added together for expected results. &gt;&gt; and &gt;&gt;&gt; have been adapted to handle signed and zero filled shifting.</p>
</section>
</section>
<section id="technical-helpers" class="level2">
<h2 class="anchored" data-anchor-id="technical-helpers">Technical helpers</h2>
<section id="harvard-cs50-minute-0-to-minute-50-to-provide-background-on-some-of-the-information-below." class="level3">
<h3 class="anchored" data-anchor-id="harvard-cs50-minute-0-to-minute-50-to-provide-background-on-some-of-the-information-below."><a href="https://cs50.harvard.edu/x/2022/weeks/0/">Harvard CS50</a> minute 0 to minute 50 to provide background on some of the information below.</h3>
</section>
<section id="algorithm-in-jinja2-to-limit-bits-per-row" class="level3">
<h3 class="anchored" data-anchor-id="algorithm-in-jinja2-to-limit-bits-per-row">Algorithm in Jinja2 to limit Bits per row</h3>
<img src="https://syeung2.github.io/APCSP2/blog/posts/binary_math_conversion_example.png" class="img-fluid"> <em>8 images per row by Kylie Scharf</em> Modulo 8 algorithm add

<p>for every eight bits (code).</p>
</section>
<section id="research-helpers" class="level3">
<h3 class="anchored" data-anchor-id="research-helpers">Research Helpers</h3>
<p><a href="https://chortle.ccsu.edu/AssemblyTutorial/Chapter-08/ass08_1.html">CHAPTER 8 - Binary Addition and Two’s Complement</a> <em>Overview find by Val Wilson</em></p>
</section>
</section>
<section id="hacks" class="level2">
<h2 class="anchored" data-anchor-id="hacks">Hacks</h2>
<blockquote class="blockquote">
<p>Data, Data Structures, and Algorithms work together. Data helps supply an interests/topic to an algorithm. It will be expected that you have a topic as you go through various algorithms. - Use data abstraction (ie data structures) in your lesson - <strong><em>Make sure you teach/learn elements from this blog as you learn algorithms</em></strong> - <strong><em>Add “Science” into your process</em></strong> (research, jupyter notebook, and ultimately running application) - <strong><em>Topics used in teaching, not listed in lesson/labs/homework need to be approved by Teacher.</em></strong> The topics above focus on data ideas from Unit 2 of AP Classroom.</p>
</blockquote>


</section>

 ]]></description>
  <category>1.D</category>
  <category>2.B</category>
  <category>3.C</category>
  <category>C4/4</category>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-11-14-AP-binary_logic.html</guid>
  <pubDate>Mon, 14 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/apcsp.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Algorithms and Logic</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-11-07-ap-logic-and-algos.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<section id="algorithm" class="level2">
<h2 class="anchored" data-anchor-id="algorithm">Algorithm</h2>
<blockquote class="blockquote">
<p>An algorithm typically means ‘code’ that solves a problem. Designing an algorithm often requires you to learn the Tech first and then consider how you design your code and algorithms. Code design can take many iterations.</p>
</blockquote>
</section>
<section id="truth-tables" class="level2">
<h2 class="anchored" data-anchor-id="truth-tables">Truth Tables</h2>
<blockquote class="blockquote">
<p>My topic for this blog is Truth Tables. The illustration that follows displays the results of logical operators AND, OR, XOR, NOT versus binary 1 and 0. The output produces a ‘Truth Table’.</p>
</blockquote>
<p><img src="https://syeung2.github.io/APCSP2/blog/posts/images/truth.png" class="img-fluid"></p>
<section id="exploring-truth-tables-operations" class="level3">
<h3 class="anchored" data-anchor-id="exploring-truth-tables-operations">Exploring Truth Tables operations</h3>
<blockquote class="blockquote">
<p>Exploration of this topic requires searching the language for logical operators, then figuring out how to display condition and test result. - Bitwise operations for Truth Tables typically represent 1 - True and 0 - False. - Logical expression in iteration and selection statements result in True or False</p>
</blockquote>
<blockquote class="blockquote">
<p>My objective is Truth Tables. But in my exploration I did both Truth Table and Expression syntax</p>
</blockquote>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Bitwise Tests</span></span>
<span id="cb1-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"OR"</span>)</span>
<span id="cb1-3"><span class="bu" style="color: null;">print</span>( <span class="st" style="color: #20794D;">"1 | 0 = "</span>, <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">|</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-4"><span class="bu" style="color: null;">print</span>( <span class="st" style="color: #20794D;">"~(1 | 0) = "</span>, <span class="op" style="color: #5E5E5E;">~</span>(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">|</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">2</span>)  <span class="co" style="color: #5E5E5E;"># 1 is an integer, not a bit so remainder (modulo) does trick</span></span>
<span id="cb1-5"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"AND"</span>)</span>
<span id="cb1-6"><span class="bu" style="color: null;">print</span>( <span class="st" style="color: #20794D;">"1 &amp; 0 = "</span>, <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&amp;</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-7"><span class="bu" style="color: null;">print</span>( <span class="st" style="color: #20794D;">"~(1 &amp; 0) = "</span>, <span class="op" style="color: #5E5E5E;">~</span>(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&amp;</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">2</span>)  <span class="co" style="color: #5E5E5E;"># modulo again</span></span>
<span id="cb1-8"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"XOR"</span>)</span>
<span id="cb1-9"><span class="bu" style="color: null;">print</span>( <span class="st" style="color: #20794D;">"1 ^ 1 = "</span>, <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">^</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-10"><span class="bu" style="color: null;">print</span>()</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;"># Boolean Tests</span></span>
<span id="cb1-13"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Boolean OR"</span>)</span>
<span id="cb1-14"><span class="bu" style="color: null;">print</span>( <span class="st" style="color: #20794D;">"True or False = "</span>, <span class="va" style="color: #111111;">True</span> <span class="kw" style="color: #003B4F;">or</span> <span class="va" style="color: #111111;">False</span>)</span>
<span id="cb1-15"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Boolean AND"</span>)</span>
<span id="cb1-16"><span class="bu" style="color: null;">print</span>( <span class="st" style="color: #20794D;">"True and False = "</span>, <span class="va" style="color: #111111;">True</span> <span class="kw" style="color: #003B4F;">and</span> <span class="va" style="color: #111111;">False</span>)</span>
<span id="cb1-17"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Boolean XOR"</span>)</span>
<span id="cb1-18"><span class="bu" style="color: null;">print</span>( <span class="st" style="color: #20794D;">"True != True = "</span>, <span class="va" style="color: #111111;">True</span> <span class="op" style="color: #5E5E5E;">!=</span> <span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>OR
1 | 0 =  1
~(1 | 0) =  0
AND
1 &amp; 0 =  0
~(1 &amp; 0) =  1
XOR
1 ^ 1 =  0
Boolean OR
True or False =  True
Boolean AND
True and False =  False
Boolean XOR
True != True =  True</code></pre>
</div>
</div>
</section>
<section id="algorithm-1" class="level3">
<h3 class="anchored" data-anchor-id="algorithm-1">Algorithm 1</h3>
<blockquote class="blockquote">
<p>This algorithm focuses on small reusable procedures/functions (def) for bitwise tests. From the exploratory experience above it seems like a lot of typing would be necessary to represent possibilities.</p>
</blockquote>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">import</span> operator  <span class="co" style="color: #5E5E5E;"># functions for all comparisons, logical operations, mathematical operations and sequence operations</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># builds truth table</span></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;">def</span> truth_options():</span>
<span id="cb3-5">    a_opts <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb3-6">    b_opts <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb3-7">    <span class="cf" style="color: #003B4F;">return</span> [(a, b) <span class="cf" style="color: #003B4F;">for</span> a <span class="kw" style="color: #003B4F;">in</span> a_opts <span class="cf" style="color: #003B4F;">for</span> b <span class="kw" style="color: #003B4F;">in</span> b_opts]  <span class="co" style="color: #5E5E5E;"># double for permutes options</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;"># provides equivalent function lookup for bitwise using operator functions</span></span>
<span id="cb3-10"><span class="kw" style="color: #003B4F;">def</span> bitwise_options(op):</span>
<span id="cb3-11">    ops <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'&amp;'</span>: operator.and_,</span>
<span id="cb3-12">           <span class="st" style="color: #20794D;">'|'</span>: operator.or_,</span>
<span id="cb3-13">           <span class="st" style="color: #20794D;">'^'</span>: operator.xor}</span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;">return</span> ops[op]</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;"># control/eval for bitwise operators, selection is based on number of operators</span></span>
<span id="cb3-17"><span class="kw" style="color: #003B4F;">def</span> bitwise_eval(op, op2<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">""</span>):</span>
<span id="cb3-18">    <span class="cf" style="color: #003B4F;">if</span> op2 <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">""</span>:</span>
<span id="cb3-19">        op_func <span class="op" style="color: #5E5E5E;">=</span> bitwise_options(op)</span>
<span id="cb3-20">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Bitwise </span><span class="sc" style="color: #5E5E5E;">{</span>op<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb3-21">        <span class="cf" style="color: #003B4F;">for</span> a, b <span class="kw" style="color: #003B4F;">in</span> truth_options():</span>
<span id="cb3-22">            <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>a<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> </span><span class="sc" style="color: #5E5E5E;">{</span>op<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> </span><span class="sc" style="color: #5E5E5E;">{</span>b<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> is </span><span class="sc" style="color: #5E5E5E;">{</span>op_func(a, b)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb3-23">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb3-24">        op2_func <span class="op" style="color: #5E5E5E;">=</span> bitwise_options(op2)</span>
<span id="cb3-25">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Bitwise </span><span class="sc" style="color: #5E5E5E;">{</span>op<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb3-26">        <span class="cf" style="color: #003B4F;">for</span> a, b <span class="kw" style="color: #003B4F;">in</span> truth_options():</span>
<span id="cb3-27">            <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>op<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">(</span><span class="sc" style="color: #5E5E5E;">{</span>a<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> </span><span class="sc" style="color: #5E5E5E;">{</span>op2<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> </span><span class="sc" style="color: #5E5E5E;">{</span>b<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">) is </span><span class="sc" style="color: #5E5E5E;">{</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>)[op2_func(a, b)]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)  <span class="co" style="color: #5E5E5E;"># opposite: index 0 returns 1, index 1 return 0</span></span>
<span id="cb3-28"></span>
<span id="cb3-29"><span class="kw" style="color: #003B4F;">def</span> method1():</span>
<span id="cb3-30">    bitwise_eval(<span class="st" style="color: #20794D;">"&amp;"</span>)</span>
<span id="cb3-31">    bitwise_eval(<span class="st" style="color: #20794D;">"NAND"</span>, <span class="st" style="color: #20794D;">"&amp;"</span>)</span>
<span id="cb3-32">    bitwise_eval(<span class="st" style="color: #20794D;">"|"</span>)</span>
<span id="cb3-33">    bitwise_eval(<span class="st" style="color: #20794D;">"NOR"</span>, <span class="st" style="color: #20794D;">"|"</span>)</span>
<span id="cb3-34">    bitwise_eval(<span class="st" style="color: #20794D;">"^"</span>)</span>
<span id="cb3-35"></span>
<span id="cb3-36"><span class="co" style="color: #5E5E5E;"># call bitwise evaluation of truth table</span></span>
<span id="cb3-37"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb3-38">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"***** Method 1 *****"</span>)</span>
<span id="cb3-39">    method1()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>***** Method 1 *****
Bitwise &amp;
1 &amp; 1 is 1
1 &amp; 0 is 0
0 &amp; 1 is 0
0 &amp; 0 is 0
Bitwise NAND
NAND(1 &amp; 1) is 0
NAND(1 &amp; 0) is 1
NAND(0 &amp; 1) is 1
NAND(0 &amp; 0) is 1
Bitwise |
1 | 1 is 1
1 | 0 is 1
0 | 1 is 1
0 | 0 is 0
Bitwise NOR
NOR(1 | 1) is 0
NOR(1 | 0) is 0
NOR(0 | 1) is 0
NOR(0 | 0) is 1
Bitwise ^
1 ^ 1 is 0
1 ^ 0 is 1
0 ^ 1 is 1
0 ^ 0 is 0</code></pre>
</div>
</div>
</section>
<section id="truth-table---algorithm-2" class="level3">
<h3 class="anchored" data-anchor-id="truth-table---algorithm-2">Truth Table - Algorithm 2</h3>
<blockquote class="blockquote">
<p>This algorithm above seemed to me to lose clarity with all the functions. The second attempt focuses on truth tables as a linear sequence, with loops for required repetitions. This seemed more understandable to me than my 1st attempt.</p>
</blockquote>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># each bitwise operator is iterated through truth table </span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;">def</span> method2():</span>
<span id="cb5-3">    truth_table <span class="op" style="color: #5E5E5E;">=</span> [[<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">0</span>], [<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">0</span>]]</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;">for</span> a, b <span class="kw" style="color: #003B4F;">in</span> truth_table:</span>
<span id="cb5-5">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"and </span><span class="sc" style="color: #5E5E5E;">{</span>a<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> &amp; </span><span class="sc" style="color: #5E5E5E;">{</span>b<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">: </span><span class="sc" style="color: #5E5E5E;">{</span>a <span class="op" style="color: #5E5E5E;">&amp;</span> b<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;">for</span> a, b <span class="kw" style="color: #003B4F;">in</span> truth_table:</span>
<span id="cb5-7">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"nand ~(</span><span class="sc" style="color: #5E5E5E;">{</span>a<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> &amp; </span><span class="sc" style="color: #5E5E5E;">{</span>b<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">): </span><span class="sc" style="color: #5E5E5E;">{</span>((a <span class="op" style="color: #5E5E5E;">&amp;</span> b) <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>) <span class="co" style="color: #5E5E5E;"># warning: ~ negates entire integer without modulo</span></span>
<span id="cb5-8">    <span class="cf" style="color: #003B4F;">for</span> a, b <span class="kw" style="color: #003B4F;">in</span> truth_table:</span>
<span id="cb5-9">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"or </span><span class="sc" style="color: #5E5E5E;">{</span>a<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> | </span><span class="sc" style="color: #5E5E5E;">{</span>b<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">: </span><span class="sc" style="color: #5E5E5E;">{</span>a <span class="op" style="color: #5E5E5E;">|</span> b<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb5-10">    <span class="cf" style="color: #003B4F;">for</span> a, b <span class="kw" style="color: #003B4F;">in</span> truth_table:</span>
<span id="cb5-11">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"nor ~(</span><span class="sc" style="color: #5E5E5E;">{</span>a<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> | </span><span class="sc" style="color: #5E5E5E;">{</span>b<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">): </span><span class="sc" style="color: #5E5E5E;">{</span>((a <span class="op" style="color: #5E5E5E;">|</span> b) <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)  <span class="co" style="color: #5E5E5E;"># warning: see above</span></span>
<span id="cb5-12">    <span class="cf" style="color: #003B4F;">for</span> a, b <span class="kw" style="color: #003B4F;">in</span> truth_table:</span>
<span id="cb5-13">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"xor </span><span class="sc" style="color: #5E5E5E;">{</span>a<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> ^ </span><span class="sc" style="color: #5E5E5E;">{</span>b<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">: </span><span class="sc" style="color: #5E5E5E;">{</span>a <span class="op" style="color: #5E5E5E;">^</span> b<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb5-14"></span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;"># call bitwise evaluation of truth table</span></span>
<span id="cb5-17"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb5-18">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"***** Method 2 *****"</span>)</span>
<span id="cb5-19">    method2()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>***** Method 2 *****
and 1 &amp; 1: 1
and 1 &amp; 0: 0
and 0 &amp; 1: 0
and 0 &amp; 0: 0
nand ~(1 &amp; 1): 0
nand ~(1 &amp; 0): 1
nand ~(0 &amp; 1): 1
nand ~(0 &amp; 0): 1
or 1 | 1: 1
or 1 | 0: 1
or 0 | 1: 1
or 0 | 0: 0
nor ~(1 | 1): 0
nor ~(1 | 0): 0
nor ~(0 | 1): 0
nor ~(0 | 0): 1
xor 1 ^ 1: 0
xor 1 ^ 0: 1
xor 0 ^ 1: 1
xor 0 ^ 0: 0</code></pre>
</div>
</div>
</section>
<section id="linear-sequence-of-code" class="level3">
<h3 class="anchored" data-anchor-id="linear-sequence-of-code">Linear Sequence of code</h3>
<blockquote class="blockquote">
<p>The order of executions is strictly from top to bottom. This is good for learning, but is typically a poor method for an Algorithm! This was my 1st exploration above.</p>
</blockquote>
</section>
<section id="procedure-function" class="level3">
<h3 class="anchored" data-anchor-id="procedure-function">Procedure (Function)</h3>
<blockquote class="blockquote">
<p>A Procedure is a set of code instructions that has been abstracted into logical parts. Each code abstraction is called “Procedural Abstraction”.<br>
- In Python, using procedures (def) means you are starting to write “good” code vs “bad” code, mostly in terms of reusability of logic. - A procedure needs to be activated or called, this is performed in the <strong>main</strong> selections above.</p>
</blockquote>
</section>
<section id="hacks" class="level3">
<h3 class="anchored" data-anchor-id="hacks">Hacks</h3>
<blockquote class="blockquote">
<p>As we explore the algorithm Unit students will be designing lessons and homework. Each lesson will have Hacks. Here are some hacks that could go with the lesson above. The three weeks after Thanksgiving will be focused on this activity and build personal portfolio.</p>
</blockquote>
<blockquote class="blockquote">
<p>Try to build a Truth Table as shown above in Python, but switch to JavaScript… - Begin by showing understanding of problem using console.log, this problem can be done in Jupyter Notebook - Build a Truth Table in JavaScript showing output in HTML, this problem is best in FastPages</p>
</blockquote>
<blockquote class="blockquote">
<p>Pick your Algorithmic hack, build in Python and JavaScript. Here are some ideas.. - Binary to Hexadecimal to Decimal conversions - Fibonacci - Palindrome - Other</p>
</blockquote>
<blockquote class="blockquote">
<p>Come up with a Procedure/Function that show…<br>
- Data Abstraction - Procedural Abstraction - Algorithm using iteration and selection - Frontend / Backend, using an API and persistent storage</p>
</blockquote>


</section>
</section>

 ]]></description>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-11-07-ap-logic-and-algos.html</guid>
  <pubDate>Mon, 07 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/truth.png" medium="image" type="image/png" height="45" width="144"/>
</item>
<item>
  <title>Finals Week</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-11-07-PT-finals.html</link>
  <description><![CDATA[ 



<section id="plans-week-12" class="level2">
<h2 class="anchored" data-anchor-id="plans-week-12">Plans Week 12</h2>
<blockquote class="blockquote">
<p>Finals Week Close the book on AP Study - Monday: Work Day - Tuesday, Wednesday, Thursday: MCQ Test and blog - Friday: No School</p>
</blockquote>
</section>
<section id="final-exam-3-points" class="level2">
<h2 class="anchored" data-anchor-id="final-exam-3-points">Final Exam (3 points)</h2>
<blockquote class="blockquote">
<p>Summary of Points - 1.8 of 2 points for scoring above 50% - 1 point on blog</p>
</blockquote>
</section>
<section id="extra-credit-review-and-makeups-must-be-complete-before-eod-thu" class="level2">
<h2 class="anchored" data-anchor-id="extra-credit-review-and-makeups-must-be-complete-before-eod-thu">Extra Credit Review and Makeups must be complete before EOD Thu</h2>
<blockquote class="blockquote">
<p>Posters is an example</p>
</blockquote>
</section>
<section id="coding-for-extra-credit" class="level2">
<h2 class="anchored" data-anchor-id="coding-for-extra-credit">Coding for Extra Credit</h2>
<blockquote class="blockquote">
<p>There are always opportunities to show understanding of coding. This weekend I was observing <a href="https://www.worldometers.info/">World-O-Meter</a>. How would you do this with our group projects.</p>
</blockquote>
<section id="step-1---javascript-document-element-updates" class="level3">
<h3 class="anchored" data-anchor-id="step-1---javascript-document-element-updates">Step 1 - JavaScript document element updates</h3>
<p>Below is a code segment that updates a clock on a page every second, adaptation would be to update data from API fetch on an interval, then updating all document elements after fetch.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">// Clock Control</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;">// clockElement global element set for convenience</span></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;">let</span> clockElement <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">document</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">getElementById</span>(<span class="st" style="color: #20794D;">'clock'</span>)</span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">// Execute clock function on load</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">clock</span>()<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;">// Clock update executes on each interval set by timer</span></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;">function</span> <span class="fu" style="color: #4758AB;">clock</span>() {</span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;">let</span> date <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="bu" style="color: null;">Date</span>()<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-9">    clockElement<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">textContent</span> <span class="op" style="color: #5E5E5E;">=</span> date<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">toLocaleString</span>()<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-10">}</span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;">// Clock refresh timer, a reoccurring event</span></span>
<span id="cb1-12"><span class="pp" style="color: #AD0000;">setInterval</span>(clock<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1000</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</section>
<section id="step-2---javascript-update-backend-content" class="level3">
<h3 class="anchored" data-anchor-id="step-2---javascript-update-backend-content">Step 2 - JavaScript update backend content</h3>
<p>To make the updates document elements meaningful you would need to have an interval to update the Haha or Boohoo content. This could be done in same or different JavaScript timer. This would be calling appropriate fetch in add to the counters. Together, these would give the same effect as the World-O-Meter.</p>
</section>
<section id="step-2-python-option---update-backend-content" class="level3">
<h3 class="anchored" data-anchor-id="step-2-python-option---update-backend-content">Step 2 (Python Option) - update backend content</h3>
<blockquote class="blockquote">
<p>Instead of having frontend update counter, you could have backend update the counter. The below could be adapted to purpose.</p>
</blockquote>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> threading  <span class="co" style="color: #5E5E5E;"># import threading</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;">def</span> keepUpdating(): <span class="co" style="color: #5E5E5E;"># build a function to run over and over</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># global variable setup</span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;">global</span> run  </span>
<span id="cb2-6"><span class="cf" style="color: #003B4F;">try</span>: run</span>
<span id="cb2-7"><span class="cf" style="color: #003B4F;">except</span>: run <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Seconds:"</span>, run)  <span class="co" style="color: #5E5E5E;"># replace this line with updates to data</span></span>
<span id="cb2-10">run <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">3</span>  <span class="co" style="color: #5E5E5E;"># this is update to global variable</span></span>
<span id="cb2-11">threading.Timer(<span class="fl" style="color: #AD0000;">3.0</span>, keepUpdating).start()</span>
<span id="cb2-12"></span>
<span id="cb2-13">keepUpdating()  <span class="co" style="color: #5E5E5E;"># you need to call this function at application startup</span></span></code></pre></div>
</section>
<section id="step-2-bash-option---do-updates-on-server" class="level3">
<h3 class="anchored" data-anchor-id="step-2-bash-option---do-updates-on-server">Step 2 (Bash Option) - do updates on server</h3>
<blockquote class="blockquote">
<p>Update content using curl and scheduling on the system. To make a PUT request with Curl, you need to use the -X PUT command-line option.</p>
</blockquote>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">$</span> curl <span class="at" style="color: #657422;">-X</span> PUT localhost:8080/api/like/1</span></code></pre></div>
<blockquote class="blockquote">
<p>This command would need to be added to crontab or a bash script and crontab to run repeatedly.</p>
</blockquote>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;">$</span> crontab <span class="at" style="color: #657422;">-l</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;"># Edit this file to introduce tasks to be run by cron.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;"># </span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;"># Each task to run has to be defined through a single line</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;"># indicating with different fields when the task will be run</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;"># and what command to run for the task</span></span></code></pre></div>
</section>
<section id="automatic-deployment-for-extra-credit" class="level3">
<h3 class="anchored" data-anchor-id="automatic-deployment-for-extra-credit">Automatic Deployment for Extra Credit</h3>
<blockquote class="blockquote">
<p>Change AWS Spring Deployment to be automatic <a href="https://nighthawkcoders.github.io/APCSA//techtalk/deploy#setting-up-automatic-deployment">Student Reference GitHub Actions</a></p>
</blockquote>


</section>
</section>

 ]]></description>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-11-07-PT-finals.html</guid>
  <pubDate>Mon, 07 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/points.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Project Week 3</title>
  <link>https://syeung2.github.io/APCSP2/blog/posts/2022-11-01-PT-project_week_3.html</link>
  <description><![CDATA[ 



<section id="plans-week-11" class="level2">
<h2 class="anchored" data-anchor-id="plans-week-11">Plans Week 11</h2>
<blockquote class="blockquote">
<p>N@tM Week - Monday: Day Off - Tuesday: Work Day - Wednesday: Work Day - Thursday: N@tM 6 to 7:30pm - Friday: Final Exam Open ## N@tM Schedule Schedule for room and time on evening of event. - 6:00pm Period 1 (A101), Mort 4 (A151) - 6:30pm Period 2 (A101), Yeung 4 (A151) - 7:00pm Period 3 (A101), Yeung 5 (A151) ## N@tM Day (12 points) Summary of Points - Theme, Presentation and Professionalism Status 1 pt x 4 (N@tM is required, make sure Teacher sees you for 1 minute prior to leaving) - Key Technicals BE + DB 1 pt x 5 - Key Technicals FE 1 pt x 3</p>
</blockquote>


</section>

 ]]></description>
  <guid>https://syeung2.github.io/APCSP2/blog/posts/2022-11-01-PT-project_week_3.html</guid>
  <pubDate>Tue, 01 Nov 2022 00:00:00 GMT</pubDate>
  <media:content url="https://syeung2.github.io/APCSP2/blog/posts/points.jpeg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
