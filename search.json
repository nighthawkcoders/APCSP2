[
  {
    "objectID": "cte/index.html",
    "href": "cte/index.html",
    "title": "APCSP2",
    "section": "",
    "text": "{% if site.categories.size > 0 %}\n\nCTE Standards\n\n{% assign categories = “” | split:“” %} {% for c in site.categories %} {% assign categories = categories | push: c[0] %} {% endfor %} {% assign categories = categories | sort_natural %}\n{% for category in categories %} {% if category == “C1.0” or category == “C1.1” or category == “C1.2” or category == “C1.3” or category == “C1.4” or category == “C1.5” or category == “C1.6” or category == “C2.0” or category == “C2.1” or category == “C2.2” or category == “C2.3” or category == “C2.4” or category == “C2.5” or category == “C3.0” or category == “C3.1” or category == “C3.2” or category == “C3.3” or category == “C4.0” or category == “C4.1” or category == “C4.2” or category == “C4.3” or category == “C4.4” or category == “C4.5” or category == “C4.6” or category == “C4.7” or category == “C4.8” or category == “C4.9” or category == “C4.10” or category == “C4.11” or category == “C5.0” or category == “C5.1” or category == “C5.2” or category == “C5.3” or category == “C5.4” or category == “C5.5” or category == “C5.6” or category == “C6.0” or category == “C6.1” or category == “C6.2”or category == “C6.3” or category == “C6.4” or category == “C6.5” or category == “C6.6” or category == “C6.7” or category == “C7.0” or category == “C7.1” or category == “C7.2” or category == “C7.3” or category == “C7.4” or category == “C7.5” or category == “C7.6” or category == “C8.0” or category == “C8.1” or category == “C8.2” or category == “C8.3” or category == “C8.4” or category == “C8.5” or category == “C8.6” or category == “C8.7” or category == “C8.8” or category == “C9.0” or category == “C9.1” or category == “C9.2” or category == “C9.3” or category == “C9.4” or category == “C9.5” or category == “C10.0” or category == “C10.1” or category == “C10.2” or category == “C10.3” or category == “C10.4” %} {% if category == “C1.0” %}\n\n {{ category }} Identify and apply the systems development process.\n\n  {% elsif category == \"C1.1\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Identify the phases of the systems development life cycle, including analysis, design, programming, testing, implementation, maintenance, and improvement. </h3>\n  {% elsif category == \"C1.2\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Identify and describe models of systems development, systems development life cycle (SDLC), and agile computing. </h3>\n  {% elsif category == \"C1.3\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Identify and describe how specifications and requirements are developed for new and existing software applications. </h3>\n  {% elsif category == \"C1.4\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Work as a member of, and within the scope and boundaries of, a development project team. </h3>\n  {% elsif category == \"C1.5\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Track development project milestones using the concept of versions. </h3>\n  {% elsif category == \"C1.6\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Diagram processes using flowcharts and the Unified Modeling Language. </h3>\n  {% elsif category == \"C2.0\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Define and analyze systems and software requirements. </h3>\n  {% elsif category == \"C2.1\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Describe the major purposes and benefits of development, including automation, improving productivity, modeling and analysis, and entertainment. </h3>\n  {% elsif category == \"C2.2\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Recognize and prevent unintended consequences of development work: programming errors, security issues, health and environmental risks, and privacy concerns. </h3>\n  {% elsif category == \"C2.3\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Develop strategies that target the specific needs and desires of the customer. </h3>\n  {% elsif category == \"C2.4\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Analyze customers’ needs for development. </h3>\n  {% elsif category == \"C2.5\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Determine and document the requirements and alternative solutions to fulfill the customers’ needs. </h3>\n  {% elsif category == \"C3.0\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Create effective interfaces between humans and technology. </h3>\n  {% elsif category == \"C3.1\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Describe and apply the basic process of input, processing, and output. </h3>\n  {% elsif category == \"C3.2\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Design effective and intuitive interfaces using knowledge of cognitive, physical, and social interactions. </h3>\n  {% elsif category == \"C3.3\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Support methods of accessibility for all potential users, including users with disabilities and non-English-speaking users. </h3>\n  {% elsif category == \"C4.0\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Develop software using programming languages. </h3>\n  {% elsif category == \"C4.1\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Identify and describe the abstraction level of programming languages from low-level, hardware-based languages to high-level, interpreted, Web-based languages. </h3>\n  {% elsif category == \"C4.2\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Describe the interaction and integration of programming languages and protocols such as how client-side programming can work with server-side programming to use a query language to access a database. </h3>\n  {% elsif category == \"C4.3\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Identify and use different authoring tools and integrated development environments (IDEs). </h3>\n  {% elsif category == \"C4.4\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Identify and apply data types and encoding. </h3>\n  {% elsif category == \"C4.5\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Demonstrate awareness of various programming paradigms, including procedural, object oriented, event-driven, and multithreaded programing. </h3>\n  {% elsif category == \"C4.6\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Use proper programming language syntax. </h3>\n  {% elsif category == \"C4.7\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Use various data structures, arrays, objects, files, and databases. </h3>\n  {% elsif category == \"C4.8\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Use object oriented programming concepts, properties, methods, and inheritance. </h3>\n  {% elsif category == \"C4.9\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Create programs using control structures, procedures, functions, parameters, variables, error recovery, and recursion. </h3>\n  {% elsif category == \"C4.10\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Create and know the comparative advantages of various queue, sorting, and searching algorithms. </h3>\n  {% elsif category == \"C4.11\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Document development work for various audiences, such as comments for other programmers, and manuals for users. </h3>\n  {% elsif category == \"C5.0\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Test, debug, and improve software development work. </h3>\n  {% elsif category == \"C5.1\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Identify the characteristics of reliable, effective, and efficient products. </h3>\n  {% elsif category == \"C5.2\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Describe the ways in which specification changes and technological advances can require the modification of programs. </h3>\n  {% elsif category == \"C5.3\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Use strategies to optimize code for improved performance. </h3>\n  {% elsif category == \"C5.4\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Test software and projects. </h3>\n  {% elsif category == \"C5.5\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Evaluate results against initial requirements. </h3>\n  {% elsif category == \"C5.6\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Debug software as part of the quality assurance process. </h3>\n  {% elsif category == \"C6.0\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Integrate a variety of media into development projects. </h3>\n  {% elsif category == \"C6.1\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Identify the basic design elements necessary to produce effective print, video, audio, and interactive media. </h3>\n  {% elsif category == \"C6.2\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Describe the various encoding methods of media and trade-offs: vector graphics vs. bitmaps, and bit depth. </h3>\n  {% elsif category == \"C6.3\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Use media design and editing software: keyframe animation, drawing software, image editors, and three-dimensional design. </h3>\n  {% elsif category == \"C6.4\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Develop a presentation or other multimedia project: video, game, or interactive Web sites, from storyboard to production. </h3>\n  {% elsif category == \"C6.5\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Analyze the use of media to determine the appropriate file format and level of compression. </h3>\n  {% elsif category == \"C6.6\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Integrate media into a full project using appropriate tools. </h3>\n  {% elsif category == \"C6.7\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Create and/or capture professional-quality media, images, documents, audio, and video clips. </h3>\n  {% elsif category == \"C7.0\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Develop Web and online projects. </h3>\n  {% elsif category == \"C7.1\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Identify the hardware (server) and software required for Web hosting and other services. </h3>\n  {% elsif category == \"C7.2\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Describe the full process of online content delivery, registering domain names, setting up hosting, and setting up e-mail addresses. </h3>\n  {% elsif category == \"C7.3\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Attract Web-site visitors through search engine optimization using various strategies like keywords and meta-tags. </h3>\n  {% elsif category == \"C7.4\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Enable e-commerce capabilities to sell products, create a shopping cart, and handle credit card transactions. </h3>\n  {% elsif category == \"C7.5\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Create an online project, Web-based business, and e-portfolio. </h3>\n  {% elsif category == \"C7.6\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Optimize fast delivery and retrieval of online content such as Web pages. </h3>\n  {% elsif category == \"C8.0\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Develop databases. </h3>\n  {% elsif category == \"C8.1\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Describe the critical function of databases in modern organizations. </h3>\n  {% elsif category == \"C8.2\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Identify and use the basic structures of databases, fields, records, tables, and views. </h3>\n  {% elsif category == \"C8.3\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Identify and explain the types of relationships between tables (one-to-one, one-to-many, many-to-many) and use methods to establish these relationships, including primary keys, foreign keys, and indexes. </h3>\n  {% elsif category == \"C8.4\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Use data modeling techniques to create databases based upon business needs. </h3>\n  {% elsif category == \"C8.5\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Use queries to extract and manipulate data (select queries, action queries). </h3>\n  {% elsif category == \"C8.6\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Develop databases that are properly normalized using appropriate schemas. </h3>\n  {% elsif category == \"C8.7\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Export and import data to and from other applications and a database recognizing the limitations and challenges inherent in the process. </h3>\n  {% elsif category == \"C8.8\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Analyze and display data to assist with decision making using methods like cross tabulations, graphs, and charts. </h3>\n  {% elsif category == \"C9.0\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Develop software for a variety of devices, including robotics. </h3>\n  {% elsif category == \"C9.1\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Demonstrate awareness of the applications of device development work, including personalized computing, robotics, and smart appliances. </h3>\n  {% elsif category == \"C9.2\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Install equipment, assemble hardware, and perform tests using appropriate tools and technology. </h3>\n  {% elsif category == \"C9.3\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Use hardware to gain input, process information, and take action. </h3>\n  {% elsif category == \"C9.4\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Apply the concepts of embedded programming, including digital logic, machine-level representation of data, and memory-system organization. </h3>\n  {% elsif category == \"C9.5\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Program a micro-controller for a device or robot. </h3>\n  {% elsif category == \"C10.0\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Develop intelligent computing. </h3>\n  {% elsif category == \"C10.1\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Describe models of intelligent behavior and what distinguishes humans from machines. </h3>\n  {% elsif category == \"C10.2\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Describe the major areas of intelligent computing, including perception, proximity, processing, and control. </h3>\n  {% elsif category == \"C10.3\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Know artificial intelligence methods such as neural networks, Bayesian inferences, fuzzy logic, and finite state machines. </h3>\n  {% elsif category == \"C10.4\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Implement artificial intelligent behavior through various methods: mathematical modeling, reinforcement learning, and probabilistic analysis. </h3>\n  {% endif %}  \n  <a name=\"{{ category | slugize }}\"></a>\n  {% for post in site.categories[category] %}\n    {% if post.hide != true %}\n    {%- assign date_format = site.minima.date_format | default: \"%b %-d, %Y\" -%}\n    <article class=\"archive-item\">\n      <p class=\"post-meta post-meta-title\"><a class=\"page-meta\" href=\"{{ site.baseurl }}{{ post.url }}\">{{post.title}}</a>  • {{ post.date | date: date_format }}</p>\n    </article>\n    {% endif %}\n  {% endfor %}\n{% endif %}  \n{% endfor %}\n{% endif %}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "APCSP2",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "APCSP2",
    "section": "Install",
    "text": "Install\npip install APCSP2"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "APCSP2",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "nbdev Blog",
    "section": "",
    "text": "Bash\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nUnit 3 Sections 17-18\n\n\n\n\n\n\n\n\n\n\nAlgorithm Efficiency and Undecidable Problems\n\n\n\n\n\n\nDec 15, 2022\n\n\n\n\n\n\n  \n\n\n\n\nUnit 3 Sections 16\n\n\n\n\n\n\n\n\n\n\nSimulations\n\n\n\n\n\n\nDec 13, 2022\n\n\n\n\n\n\n  \n\n\n\n\nUnit 3 Sections 14-15\n\n\n\n\n\n\n\n\n\n\nLibraries and Random Values\n\n\n\n\n\n\nDec 12, 2022\n\n\n\n\n\n\n  \n\n\n\n\nWeek of 12-12, Student Teaching Week 3, Pop Live Reviews\n\n\n\n\n\n\n\n\n\n\nStudent led Teaching with some data instruction by Teachers.\n\n\n\n\n\n\nDec 12, 2022\n\n\n\n\n\n\n  \n\n\n\n\nUnit 3 Sections 12-13\n\n\n\n\n\n\n\n\n\n\nCalling and Developing Procedures\n\n\n\n\n\n\nDec 8, 2022\n\n\n\n\n\n\n  \n\n\n\n\nUnit 3 Sections 9 and 11\n\n\n\n\n\n\n\n\n\n\nDeveloping Algorithms and Binary Search\n\n\n\n\n\n\nDec 6, 2022\n\n\n\n\n\n\n  \n\n\n\n\nWeek of 12-05, Student Teaching Week 2, Pop Live Reviews\n\n\n\n\n\n\n\n\n\n\nStudent led Teaching with some data instruction by Teachers.\n\n\n\n\n\n\nDec 5, 2022\n\n\n\n\n\n\n  \n\n\n\n\nUnit 3 Sections 8 and 10\n\n\n\n\n\n\n\n\n\n\nBoolean Iteration and Lists\n\n\n\n\n\n\nDec 5, 2022\n\n\n\n\n\n\n  \n\n\n\n\nUnit 3 Sections 5-7\n\n\n\n\n\n\n\n\n\n\nBoolean Expression, Conditionals, Nested Conditionals\n\n\n\n\n\n\nDec 1, 2022\n\n\n\n\n\n\n  \n\n\n\n\nPython 2D Iteration\n\n\n\n\n\n\n\n1.D\n\n\n2.B\n\n\n3.B\n\n\nC3.1\n\n\n\n\nSeveral 2D arrays and Animations hacks are provided to further learn iteration and data in Python. The objective is to build a stronger foundation in iteration and data. Also, it is important to see concepts like printing color and moving objects in terminal, prior to moving to frontend development with JavaScript.\n\n\n\n\n\n\nDec 1, 2022\n\n\n\n\n\n\n  \n\n\n\n\nUnit 3 Sections 3-4\n\n\n\n\n\n\n\n\n\n\nMathematical Expressions and Strings\n\n\n\n\n\n\nNov 29, 2022\n\n\n\n\n\n\n  \n\n\n\n\nWeek of 11-28, Student Teaching Week 1\n\n\n\n\n\n\n\n\n\n\nStudent led Teaching with some data instruction by Teachers.\n\n\n\n\n\n\nNov 28, 2022\n\n\n\n\n\n\n  \n\n\n\n\nUnit 3 Sections 1-2\n\n\n\n\n\n\n\n\n\n\nVariables, Assignments, and Data Abstractions\n\n\n\n\n\n\nNov 28, 2022\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 22, 2022\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 19, 2022\n\n\nTristan O’Malley\n\n\n\n\n\n\n  \n\n\n\n\nWeek of 11-14, Tri 2 Into, Tools and Issues\n\n\n\n\n\n\n\n\n\n\nOverview of objectives for Trimester 2. Lessons, Algorithms, and Create Performance Task.\n\n\n\n\n\n\nNov 14, 2022\n\n\n\n\n\n\n  \n\n\n\n\nBinary Logic and Abstraction\n\n\n\n\n\n\n\n1.D\n\n\n2.B\n\n\n3.C\n\n\nC4/4\n\n\n\n\nTaking a look at binary abstractions (ASCII, Unicode, Images),logic gates, etc\n\n\n\n\n\n\nNov 14, 2022\n\n\n\n\n\n\n  \n\n\n\n\nAlgorithms and Logic\n\n\n\n\n\n\n\n\n\n\nA discussion on Logic and Algorithms.\n\n\n\n\n\n\nNov 7, 2022\n\n\n\n\n\n\n  \n\n\n\n\nFinals Week\n\n\n\n\n\n\n\n\n\n\nFinal Exam plus blog\n\n\n\n\n\n\nNov 7, 2022\n\n\n\n\n\n\n  \n\n\n\n\nProject Week 3\n\n\n\n\n\n\n\n\n\n\nN@tM\n\n\n\n\n\n\nNov 1, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJavascript Inputs using a Grade Calculator\n\n\n\n\n\n\n\n3.A\n\n\n5.B\n\n\nC3.0\n\n\nC3.1\n\n\nC4.1\n\n\n\n\nA discussion on user inputs using Javascript. The grade calculator takes multiple values and does a calculation on them. User input can be useful for other projects, such as being used as a query.\n\n\n\n\n\n\nOct 24, 2022\n\n\n\n\n\n\n  \n\n\n\n\nProject Week 2\n\n\n\n\n\n\n\n\n\n\nLast check in before final project is due\n\n\n\n\n\n\nOct 24, 2022\n\n\n\n\n\n\n  \n\n\n\n\nComputer System and Networks\n\n\n\n\n\n\n\n5.A\n\n\nC7.1\n\n\nC9.3\n\n\n\n\nDiscussion of system and networks\n\n\n\n\n\n\nOct 17, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCTE\n\n\n\n\n\n\n\n\n\n\nAPCSP is a CTE class. What does that mean? How does this class benefit you in the future?\n\n\n\n\n\n\nOct 17, 2022\n\n\n\n\n\n\n  \n\n\n\n\nProject Week 1\n\n\n\n\n\n\n\nC1.1\n\n\n\n\nScrum Board, Issues, Tangibles\n\n\n\n\n\n\nOct 17, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJavascript Web Page using an API\n\n\n\n\n\n\n\n3.B\n\n\n5.A\n\n\n5.B\n\n\nC5.0\n\n\nC7.0\n\n\nC7.6\n\n\n\n\nA discussion on the frontend usage of an API. This is about creating a page that is well organized and updates based on the backend code created for the api.\n\n\n\n\n\n\nOct 17, 2022\n\n\n\n\n\n\n  \n\n\n\n\nPython Web API Endpoints using Jokes\n\n\n\n\n\n\n\n3.B\n\n\n5.A\n\n\n5.B\n\n\nC5.0\n\n\nC7.0\n\n\nC7.6\n\n\n\n\nA discussion on Web APIs. This is about creating a Web API (Jokes), and creating API that retains data as long as the Web Server is running. This is done using List and Dictionaries as the backend. Ultimately, this example could be extended by adding a database to the backend. However, for now, we are focussing on interaction of Frontend to Backend, this is called an Endpoint.\n\n\n\n\n\n\nOct 17, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeployment Files\n\n\n\n\n\n\n\n\n\n\nShared machine will require some standards\n\n\n\n\n\n\nOct 10, 2022\n\n\n\n\n\n\n  \n\n\n\n\nInternet Connections\n\n\n\n\n\n\n\ntri1\n\n\n\n\nweek 8 plans\n\n\n\n\n\n\nOct 10, 2022\n\n\n\n\n\n\n  \n\n\n\n\nSystem to System APIs\n\n\n\n\n\n\n\n5.A\n\n\nC4.2\n\n\nC7.2\n\n\n\n\napi system to system\n\n\n\n\n\n\nOct 10, 2022\n\n\n\n\n\n\n  \n\n\n\n\nBig Idea 4 ‘The Internet’\n\n\n\n\n\n\n\nC7.2\n\n\n\n\nReviewing the internet and protocols\n\n\n\n\n\n\nOct 10, 2022\n\n\n\n\n\n\n  \n\n\n\n\nPython RapidAPI\n\n\n\n\n\n\n\n1.A\n\n\n5.B\n\n\n5.D\n\n\nC4.1\n\n\nC7.0\n\n\n\n\nAPIs can be found all over the internet. A great consolidator of many APIs is RapidAPI. In this blog we will use a site to consolidates API stats. Learning a few lines of code and you can start extracting lots of data from the internet via APIs.\n\n\n\n\n\n\nOct 3, 2022\n\n\n\n\n\n\n  \n\n\n\n\nAPI\n\n\n\n\n\n\n\ntri1\n\n\n\n\nweek 7 plans\n\n\n\n\n\n\nOct 3, 2022\n\n\n\n\n\n\n  \n\n\n\n\nBig Idea 1 ‘Identifying and Correcting Errors’\n\n\n\n\n\n\n\n1.B\n\n\n4.C\n\n\nC3.0\n\n\nC5.0\n\n\nC5.1\n\n\nC5.2\n\n\nC5.3\n\n\nC5.4\n\n\nC5.5\n\n\nC5.6\n\n\n\n\nPractice with identifying and correcting code blocks\n\n\n\n\n\n\nOct 3, 2022\n\n\n\n\n\n\n  \n\n\n\n\nVirtual Private Networks\n\n\n\n\n\n\n\nC4.3\n\n\n\n\nVPN\n\n\n\n\n\n\nSep 27, 2022\n\n\nYash Shah\n\n\n\n\n\n\n  \n\n\n\n\nBig Idea 1 ‘Program Design’\n\n\n\n\n\n\n\n1.B\n\n\n5.C\n\n\n6.A\n\n\n6.C\n\n\nC2.0\n\n\nC2.1\n\n\nC2.2\n\n\nC2.3\n\n\nC2.4\n\n\nC2.5\n\n\n\n\nLook for a real need. Program Design, ideation, and eventual development work a lot better if you have a real need or an idea of purpose.\n\n\n\n\n\n\nSep 26, 2022\n\n\n\n\n\n\n  \n\n\n\n\nGitHub and Git Sociology\n\n\n\n\n\n\n\n1.C\n\n\n6.A\n\n\nC1.2\n\n\n\n\nGitHub and Git are a social computing tools. GitHub is a cloud-based Git repository hosting service. Git is underneath GitHub and it does the Job of managing files and versions in a series of snapshots. Git helps developer work together, by sharing Code. Additionally, GitHub has many tools that help in the sociology of managing software (ie Issues, Pull Requests, Project Boards, GitHub Pages, etc).\n\n\n\n\n\n\nSep 26, 2022\n\n\n\n\n\n\n  \n\n\n\n\nDeployment\n\n\n\n\n\n\n\nC7.6\n\n\n\n\nweek 6 plans\n\n\n\n\n\n\nSep 26, 2022\n\n\n\n\n\n\n  \n\n\n\n\nFlask/Python Deployment Guide\n\n\n\n\n\n\n\n6.B\n\n\nC7.0\n\n\nC7.1\n\n\nC7.2\n\n\n\n\nDescription of key methods process used to deploy a Flask/Python website; AWS EC2, Docker, docker-compose, and Nginx\n\n\n\n\n\n\nSep 26, 2022\n\n\n\n\n\n\n  \n\n\n\n\nBig Idea 1 ‘Program Purpose’\n\n\n\n\n\n\n\n1.A\n\n\n3.A\n\n\n4.A\n\n\nC2.4\n\n\n\n\nMany have said… The best way to learn how to code is to start a project. Additionally, make sure that project has ‘purpose’ and is in your interests.\n\n\n\n\n\n\nSep 19, 2022\n\n\n\n\n\n\n  \n\n\n\n\nUI Starters\n\n\n\n\n\n\n\nC1.6\n\n\n\n\nstarters for front end\n\n\n\n\n\n\nSep 19, 2022\n\n\n\n\n\n\n  \n\n\n\n\nJavaScript Tutorial\n\n\n\n\n\n\n\n1.A\n\n\n3.B\n\n\nC4.0\n\n\n\n\nQuick launch into Variables, Functions, Arrays, IJavaScript HTML, using Jupyter Notebooks\n\n\n\n\n\n\nSep 19, 2022\n\n\n\n\n\n\n  \n\n\n\n\nAgile Methodology\n\n\n\n\n\n\n\n6.A\n\n\nC1.0\n\n\nC1.1\n\n\nC1.2\n\n\nC1.3\n\n\nC1.4\n\n\nC1.5\n\n\nC1.6\n\n\n\n\nThe Agile methodology help bring out all the good characteristics in group development. The sociology of how an individual and group of individuals work in a Scrum Team using Agile methodology is a key development skill. Often interview questions focus on the process of how you work on code.\n\n\n\n\n\n\nSep 19, 2022\n\n\n\n\n\n\n  \n\n\n\n\nPython Web Server Project\n\n\n\n\n\n\n\nC7.1\n\n\n\n\nThis week introduces a Python Web server project.\n\n\n\n\n\n\nSep 12, 2022\n\n\n\n\n\n\n  \n\n\n\n\nFastpages local server\n\n\n\n\n\n\n\nC7.1\n\n\n\n\nServing Fastpages locally using Docker. This allows local machine testing of each change of code without the delay of GitHub Actions.\n\n\n\n\n\n\nSep 12, 2022\n\n\nEllen Xu\n\n\n\n\n\n\n  \n\n\n\n\nBig Idea 1 ‘Collaboration’\n\n\n\n\n\n\n\n1.C\n\n\n6.A\n\n\nC1.4\n\n\n\n\nCollaboration is the 1st topic in the AP Classroom materials. Additionally, pair programming partners is the 1st thing we setup in the Classroom. It is not because it is easy, it is probably the hardest and most important thing to learn in all STEM careers.\n\n\n\n\n\n\nSep 12, 2022\n\n\n\n\n\n\n  \n\n\n\n\nFocus and Habits\n\n\n\n\n\n\n\n1.C\n\n\n\n\nA Yale Professor on Successful People. The psychology of the individual is often considered the key to success. This is about analyzing those who are successful and applying those traits to ourself.\n\n\n\n\n\n\nSep 12, 2022\n\n\n\n\n\n\n  \n\n\n\n\nFlask/Python Web Application\n\n\n\n\n\n\n\n5.A\n\n\nC7.1\n\n\n\n\nSetting up a Flask/Python project. Flask is a Web Application framework written in Python.\n\n\n\n\n\n\nSep 12, 2022\n\n\n\n\n\n\n  \n\n\n\n\nCollege Board Create Performance Task\n\n\n\n\n\n\n\n1.B\n\n\n3.C\n\n\nC1.3\n\n\n\n\n30% of the student AP Test and a big portion of achievement in class is in building your own application. Start thinking about this now!\n\n\n\n\n\n\nSep 5, 2022\n\n\n\n\n\n\n  \n\n\n\n\nCreative Development Sprint\n\n\n\n\n\n\n\nC1.5\n\n\n\n\nCreative development is a key skill that Teachers will be looking at through the year. The development process requires inspiration, research, and go both inside and outside the box. At these early stages of development it is about pair programming, collaborating with each other and teacher, and responding to change.\n\n\n\n\n\n\nSep 5, 2022\n\n\n\n\n\n\n  \n\n\n\n\nHow I got a 5!\n\n\n\n\n\n\n\nC1.3\n\n\n\n\nBria provides her path to success on the AP Exam and Create Task project\n\n\n\n\n\n\nSep 5, 2022\n\n\n\n\n\n\n  \n\n\n\n\nProgram Design with App Lab by Code.org\n\n\n\n\n\n\n\n1.B\n\n\n2.B\n\n\n3.A\n\n\n4.C\n\n\nC4.0\n\n\nC4.5\n\n\n\n\nThis Tech Talk focuses on Program Design and enables the student to build a prototype UI through block or script coding using the AppLab tool by Code.org.\n\n\n\n\n\n\nSep 5, 2022\n\n\n\n\n\n\n  \n\n\n\n\nCreative Development Points\n\n\n\n\n\n\n\nC1.5\n\n\n\n\nDon’t do it alone. 4 person grading.\n\n\n\n\n\n\nSep 5, 2022\n\n\n\n\n\n\n  \n\n\n\n\nData Abstraction Points\n\n\n\n\n\n\n\nC4.4\n\n\n\n\nDon’t do it alone. 4 person grading.\n\n\n\n\n\n\nAug 29, 2022\n\n\n\n\n\n\n  \n\n\n\n\nLists, Dictionaries, Iteration\n\n\n\n\n\n\n\n1.A\n\n\n2.B\n\n\n3.C\n\n\n4.A\n\n\nC3.1\n\n\nC4.0\n\n\nC4.1\n\n\nC4.3\n\n\nC4.4\n\n\nC4.6\n\n\nC4.7\n\n\nC4.9\n\n\n\n\nAn introduction to Data Abstraction using Python Lists [] and Python Dictionaries {}.\n\n\n\n\n\n\nAug 29, 2022\n\n\n\n\n\n\n  \n\n\n\n\nData Abstraction in Python\n\n\n\n\n\n\n\nC4.4\n\n\n\n\nA computer application without data is typically simple and not very useful. Think of all the fields in Computer Science that are related to data. This week, using Pair Programming, students will get familiar with storing data in Python.\n\n\n\n\n\n\nAug 29, 2022\n\n\n\n\n\n\n  \n\n\n\n\nHTML Fragments\n\n\n\n\n\n\n\n1.B\n\n\nC7.0\n\n\n\n\nHTML fragments are portions of code used in a greater coding system that enable functionality specific to the current page. Fragments in HTML are a way to abstract complexity. The greater coding system we use is GitHub Pages which uses Jekyll and Liquid to build and programmatically construct fragments into the larger web site.\n\n\n\n\n\n\nAug 29, 2022\n\n\n\n\n\n\n  \n\n\n\n\nInstallation Checks\n\n\n\n\n\n\n\nC5.0\n\n\nC5.4\n\n\n\n\nStarters for Bash installation\n\n\n\n\n\n\nAug 25, 2022\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction to Python\n\n\n\n\n\n\n\nC5.0\n\n\n\n\nPython is a key language in the class and will be used to build the backend of our Web Applications throughout the year.\n\n\n\n\n\n\nAug 22, 2022\n\n\n\n\n\n\n  \n\n\n\n\nHello to Python\n\n\n\n\n\n\n\n1.A\n\n\n3.A\n\n\n4.B\n\n\nC4.0\n\n\n\n\nHello, World\n\n\n\n\n\n\nAug 22, 2022\n\n\n\n\n\n\n  \n\n\n\n\nBash Tutorial\n\n\n\n\n\n\n\n5.A\n\n\nC4.1\n\n\n\n\nterminal\n\n\n\n\n\n\nAug 22, 2022\n\n\n\n\n\n\n  \n\n\n\n\nFastpages Frontend Development - Tour of GitHub Pages\n\n\n\n\n\n\n\n6.B\n\n\nC7.0\n\n\nC7.5\n\n\n\n\nGitHub Pages and Fastpages can change the way you think about information management. Jupyter notebooks is changing the way people analyze data. GH pages publishes and deploys a web site for free. Fastpages provides amazing indexing and tagging capabilities. Tech transforms the way people think, why would you want to use paper?\n\n\n\n\n\n\nAug 22, 2022\n\n\n\n\n\n\n  \n\n\n\n\nAnthony and Sahil’s Reflections\n\n\n\n\n\nAn article detailing our motivations and accomplishments in computer science. More focused on stories and learning processes than Bria’s tips\n\n\n\n\n\n\nAug 22, 2022\n\n\n\n\n\n\n  \n\n\n\n\nStudent Scoring on AP Exam\n\n\n\n\n\n\n\n\n\n\nHistory of student scores on exam using results from 2022 and 2021. Teacher provides insight and history on successes and failures.\n\n\n\n\n\n\nAug 15, 2022\n\n\n\n\n\n\n  \n\n\n\n\nVSCode Download with WSL\n\n\n\n\n\n\n\nC4.3\n\n\nC5.0\n\n\n\n\nInstructions for Windows users on how to use VSCode with WSL in order to add a Linux-based development.\n\n\n\n\n\n\nAug 15, 2022\n\n\n\n\n\n\n  \n\n\n\n\nTools and Equipment\n\n\n\n\n\n\n\nC4.3\n\n\nC5.0\n\n\n\n\nTools and equipment have changed lives, look at the mobile phone. Tools, equipment, with the addition of coding can make you immensely more successful in any field.\n\n\n\n\n\n\nAug 15, 2022\n\n\n\n\n\n\n  \n\n\n\n\nTool Setup Sprint and Pair Programming\n\n\n\n\n\n\n\nC1.4\n\n\n\n\nDon’t do it alone. Pair Programming allows you to have secondary thinking as you work, not just a reflection after you are done, but real time.\n\n\n\n\n\n\nAug 15, 2022\n\n\n\n\n\n\n  \n\n\n\n\nCollege Board Pseudo Code\n\n\n\n\n\n\n\n2.A\n\n\nC4.0\n\n\nC4.6\n\n\n\n\nThe College Board testing language is Pseudo Code. Pseudo mean kind-of, or in this case College Board uses a kind-of programming language in its Multiple Choice exam.\n\n\n\n\n\n\nAug 15, 2022\n\n\n\n\n\n\n  \n\n\n\n\nUSC Code.org Workshop Notes\n\n\n\n\n\n\n\ncsp\n\n\n\n\nPrimary focus of workshop is to provide a Curriculum Guide and overview of Code.org materials. Code.org is a concept first and soft launch into coding. My approach is pretty much the opposite, jump into deep-end with life supports.\n\n\n\n\n\n\nJul 25, 2022\n\n\n\n\n\n\n  \n\n\n\n\nNeo4J Graph Database Introduction\n\n\n\n\n\n\n\n\n\n\nA description of the data, and then how to connect and query the database.\n\n\n\n\n\n\nJul 21, 2022\n\n\n\n\n\n\n  \n\n\n\n\nCalculator Starters\n\n\n\n\n\n\n\n2.C\n\n\nC7.0\n\n\n\n\nA common way to become familiar with a language is to build a calculator. This calculator shows off button with actions.\n\n\n\n\n\n\nJul 19, 2022\n\n\n\n\n\n\n  \n\n\n\n\nFetch of Python data using RapidAPI\n\n\n\n\n\n\n\nC7.0\n\n\n\n\nAn introductory example of talking to Backend Python application serving 3rd Party API. Fetching data and formatting results is a way to visuals information, in this case Covid19 statistics across the Globe.\n\n\n\n\n\n\nJul 10, 2022\n\n\n\n\n\n\n  \n\n\n\n\nFetch of Backend Jokes\n\n\n\n\n\n\n\nC4.7\n\n\n\n\nAn example of Frontend talking to Backend Python application serving jokes. This example provides the ability to react to the Joke (haha or boohoo).\n\n\n\n\n\n\nJul 10, 2022\n\n\n\n\n\n\n  \n\n\n\n\nDatabase CRUD Operations\n\n\n\n\n\n\n\nC4.7\n\n\nC7.0\n\n\nC8.1\n\n\nC8.6\n\n\n\n\nAn advanced example of do database operation asynchronously between JavaScript and Backend Database.\n\n\n\n\n\n\nJul 10, 2022\n\n\n\n\n\n\n  \n\n\n\n\nGrade Calculator\n\n\n\n\n\n\n\n2.C\n\n\n\n\nSupports grade inputs and calculates average.\n\n\n\n\n\n\nJul 8, 2022\n\n\n\n\n\n\n  \n\n\n\n\nGraphing App\n\n\n\n\n\n\n\nC8.8\n\n\n\n\nThe concept behind making a graphing application using JavaScript canvas.\n\n\n\n\n\n\nJul 8, 2022\n\n\n\n\n\n\n  \n\n\n\n\nGame of Life\n\n\n\n\n\n\n\njavascript\n\n\nsetInterval\n\n\nonclick\n\n\n\n\nA remix of Conway’s game of life using timer, onclick and algorithms.\n\n\n\n\n\n\nJul 8, 2022\n\n\n\n\n\n\n  \n\n\n\n\nClassic Snake Game\n\n\n\n\n\n\n\nC4.9\n\n\n\n\nA pretty advanced use of JavaScript building classic snake game using menu controls, key events, snake simulation and timers.\n\n\n\n\n\n\nJul 8, 2022\n\n\n\n\n\n\n  \n\n\n\n\nBinary Math\n\n\n\n\n\n\n\n3.B\n\n\n3.C\n\n\nC4.4\n\n\n\n\nA Binary Math illustrative application using HTML, Liquid, and JavaScript.\n\n\n\n\n\n\nJul 7, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntro to Computer Science Ideas\n\n\n\n\n\nPreliminary ideas for a intro course for computer science\n\n\n\n\n\n\nJun 1, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnused\n\n\n\n\n\n\n\nC3.2\n\n\nC3.3\n\n\nC4.8\n\n\nC4.10\n\n\nC4.11\n\n\nC6.0\n\n\nC6.1\n\n\nC6.2\n\n\nC6.3\n\n\nC6.4\n\n\nC6.5\n\n\nC6.6\n\n\nC6.7\n\n\nC7.3\n\n\nC7.4\n\n\nC8.0\n\n\nC8.2\n\n\nC8.3\n\n\nC8.4\n\n\nC8.5\n\n\nC8.7\n\n\nC9.0\n\n\nC9.1\n\n\nC9.2\n\n\nC9.4\n\n\nC9.5\n\n\nC10.0\n\n\nC10.1\n\n\nC10.2\n\n\nC10.3\n\n\nC10.4\n\n\n\n\nStandards with no related posts\n\n\n\n\n\n\nJun 1, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNBDEV/Quarto Installation Guide\n\n\n\n\n\nThis will be a step by step guide for setting up a NBDEV Blog using Quarto\n\n\n\n\n\n\nJun 1, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLegal and Ethical Concerns\n\n\n\n\n\n\n\n5.E\n\n\n6.C\n\n\n\n\nFree Software Licensing is the primary topic of this section.\n\n\n\n\n\n\nJun 1, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/posts/2022-07-10-PBL-rapidapi.html",
    "href": "blog/posts/2022-07-10-PBL-rapidapi.html",
    "title": "Fetch of Python data using RapidAPI",
    "section": "",
    "text": "{% include nav_data.html %}\nReview Frontend Code, Review Backend Code\n\n\n\n\n\n\nTime\n\n\nAll-time Cases\n\n\nRecorded Deaths\n\n\nActive Cases\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCountry\n\n\nAll-time Cases\n\n\nRecorded Deaths\n\n\nActive Cases"
  },
  {
    "objectID": "blog/posts/2022-08-29-PT120-data_abstract.html",
    "href": "blog/posts/2022-08-29-PT120-data_abstract.html",
    "title": "Data Abstraction Points",
    "section": "",
    "text": "It is important that you create your own InfoDb.  This must be a data capture of your own interest.  The Jupyter page should include.  There must be a pair element in the programming. - Cell focused on InfoDb database definition.   - Function(s) that focus on printing your InfoDb according to your data abstraction and data definition requirements - Independent cells that show your data work with For loop, For loop with index, While Loop, and Recursion - The page needs Markdown and Code cells. Markdown sections should describe objective and purpose at the beginning, as well as describe each of the Code cells.  Additionally, each Python cell should contain comments. - Add a little flair for that extra appeal. An idea, is to add Input to adding records to InfoDb (combining learnings from last lesson). Don’t show up with a straight copy, this will not be meeting expectations.\n\n\n\n\n\nAs we are learning Lists, this week I believe it is very important for each student to build a Table.  This can be done in markdown or html.   This should have individual look, collaboration is OK, but you must have a distinct table. - This to be something “Productive”. - This requires you to use {{ }} liquid syntax somewhere in the table.  Please make sure you comment source of this key/value.\n\n\n\n\n\nEach individual needs to perform their own work and updates.  However, I would like you to work with the same InfoDB as your pair.   In presentation, consider the following… - Each individual contains two looping algorithms in their own repository.  All four are covered between pair. - Be sure to discuss your HTML/Markdown table and any additional flair - Every time requirements - Create Comment in Blog.  Crossover grades, Crossover Comments, and Blog(s) used during week. - Be prepared to go fast, but show everything we should be under 5 minutes.  1 minute per person. - Jupyter Notebooks contain comments and Markdown cells - Output of Jupyter code is required"
  },
  {
    "objectID": "blog/posts/2022-06-01-cs_intro_class.html",
    "href": "blog/posts/2022-06-01-cs_intro_class.html",
    "title": "Intro to Computer Science Ideas",
    "section": "",
    "text": "Idea is to have a course to focusses on freshman/sophomore classes. The purpose at Del Norte, is to add to the beginning of the pathway that feeds into AP Computer Science Principles (CSP). - 1 trimester course of App Design or Game Design - 2 trimester course of App Design and Game Design"
  },
  {
    "objectID": "blog/posts/2022-06-01-cs_intro_class.html#pathway",
    "href": "blog/posts/2022-06-01-cs_intro_class.html#pathway",
    "title": "Intro to Computer Science Ideas",
    "section": "Pathway",
    "text": "Pathway\n\nThe Pathway modifications at Del Norte High School with Intro course. 1. 24 Weeks. Intro to Computer Science, no experience 2. 36 Weeks (contract required). AP CSP, Data Structures 1 is targeting 10th-11th, prerequisite is Intro to Computer Science, waiver of Intro requires experience in Technologies taught in Del Norte program. 3. 36 Weeks (contract required). AP CSA, Data Structures 2 is targeting 11th-12th, prerequisite CSP and DS1, no waiver, minimum starting point is CSP\n\n\nStart with:\n\nScratch Introduction\nCourse Plans\n\nIntroduction to tools (e.g. IDE and Github)\nFundamentals in Programming in selected language (C# or Scratch)\nAgile Development Fundamentals, Pair Programming,\n\n\n\n\nMove on to main focus:\n\nCreate an Apple App using Xcode and Swift AND/OR\nUnity Game Development Curriculum"
  },
  {
    "objectID": "blog/posts/2022-06-01-cs_intro_class.html#certificate-programs",
    "href": "blog/posts/2022-06-01-cs_intro_class.html#certificate-programs",
    "title": "Intro to Computer Science Ideas",
    "section": "Certificate Programs",
    "text": "Certificate Programs\n\nCertificates are available online and at many avenues (Udemy, LinkedIN, Apple, etc). Teachers could/should learn and then perhaps teach courses that are aligned to certificates by an organization like LinkedIn. This would enable Teachers and District to confidently state that their Teachers are current to CTE advisors. ### LinkedIn Certification Programs for Development Engineering Methodology Skills to assist in teaching Project Based Learning.\n\n\nGithub Issues\nAgile Development\nDevops Engineer\n\n\nLinkedIn Certificates for Programming\n\nCertificates to assist in teaching Intro to Programming, Computers Science Principles, Computer Science “A” development.\n\n\nIntro Scratch\nIntro C# Developer\nIntro Swift Developer\nCSP Python Developer\nCSP - JavaScript Developer\nCSA - Java Developer"
  },
  {
    "objectID": "blog/posts/2022-06-01-cs_intro_class.html#accreditation-articulation-and-beyond",
    "href": "blog/posts/2022-06-01-cs_intro_class.html#accreditation-articulation-and-beyond",
    "title": "Intro to Computer Science Ideas",
    "section": "Accreditation, Articulation and Beyond",
    "text": "Accreditation, Articulation and Beyond\n\nIn discussion on titles, it seems vital to a High School Pathway that it leads beyond. A key contributor to increasing Del Norte student participation in Computer Science, ~100 tto ~240, is the introduction of Computer Science Principles. - Computer Science Principles has AP testing and UC accreditation as a 3rd Science, not just elective. - Computer Science “A” has AP testing and UC accreditation as a 4th Math, not just elective. - Data Structure 1&2 with B or above graded will articulate to CS113 Data Structures. There has been movement by Emily Stephenson, Del Norte and Mira Costa College regarding articulation. This begins with students taking CSP/DS1 in Fall of 2022, it completes with students finishing CSA/DSP2 in Summer of 2024, receiving credit for CS113 – Data Structures. - Beyond College, it seems the other “Big Thing” that High School Computer Science can do is to prepare students for internships and jobs. Del Norte has been placing people regularly at Northrop Grumman (2 per year), UCSD Supercomputer (2 per year), Code Ninjas (2 per year). Additionally, I have 2 reports of students Teaching in CompSci Labs on campus (Harvard and Mira Costa College). Lastly, I have heard of a Purdue freshmen that is currently getting a Government clearance for internship in Summer 2023. An absolute key is having projects published on GitHub! The Purdue freshmen said the internship interviewer said “they reviewed projects on GitHub and new that he could code”. These opportunities seem to come because of Agile Methodology, Scrum, Python/Flask, Java/Spring, AWS, SQL, Linux, Anaconda, Docker, Nginx, GitHub.\n\nCS 113: Basic Data Structures and Algorithms\n\nUnits: 3\nPrerequisites: CS 112.\nAcceptable for Credit: CSU, UC\nLecture 2 hours, laboratory 3 hours.\nCourse Typically Offered: Fall, Spring, and Summer\n\nThe course uses topics of personal and social relevance to investigate the impact of computing through efficient algorithms and properly designed data structures. Students explore the software development process by developing effective solutions using industry-standard tools. Topics include searching, sorting, hashing, algorithm analysis, object-oriented design, collections, lists, stacks, queues, trees, sets, dictionaries, and graphs. C-ID COMP-132."
  },
  {
    "objectID": "blog/posts/2022-06-01-cs_intro_class.html#del-norte-2022-2023-course-outlines-and-student-projects",
    "href": "blog/posts/2022-06-01-cs_intro_class.html#del-norte-2022-2023-course-outlines-and-student-projects",
    "title": "Intro to Computer Science Ideas",
    "section": "Del Norte 2022-2023 Course Outlines and Student Projects",
    "text": "Del Norte 2022-2023 Course Outlines and Student Projects\n\nDel Norte Materials are all online and maintained in GitHub. Content produced is automatically deployed to a public Website. - Computer Science “A” - Trimester 1 CSA Student Projects/Review Tickets - AT BOTTOM OF LINK - Computer Science Principles - Trimester 1 CSP Student Projects/Review Tickets - AT BOTTOM OF LINK"
  },
  {
    "objectID": "blog/posts/2022-06-01-cs_intro_class.html#please-comment-requires-github-sign-in",
    "href": "blog/posts/2022-06-01-cs_intro_class.html#please-comment-requires-github-sign-in",
    "title": "Intro to Computer Science Ideas",
    "section": "Please comment, requires GitHub sign-in",
    "text": "Please comment, requires GitHub sign-in"
  },
  {
    "objectID": "blog/posts/2022-07-10-PBL-jokes.html",
    "href": "blog/posts/2022-07-10-PBL-jokes.html",
    "title": "Fetch of Backend Jokes",
    "section": "",
    "text": "{% include nav_data.html %}\n\n\n\n\n\n\nJoke\n\n\nHaHa\n\n\nBoohoo"
  },
  {
    "objectID": "blog/posts/2022-09-26-AP-program_design.html",
    "href": "blog/posts/2022-09-26-AP-program_design.html",
    "title": "Big Idea 1 ‘Program Design’",
    "section": "",
    "text": "College Board Big Idea 1"
  },
  {
    "objectID": "blog/posts/2022-09-26-AP-program_design.html#program-design-and-development-unit-1.3",
    "href": "blog/posts/2022-09-26-AP-program_design.html#program-design-and-development-unit-1.3",
    "title": "Big Idea 1 ‘Program Design’",
    "section": "Program Design and Development (Unit 1.3)",
    "text": "Program Design and Development (Unit 1.3)\n\nLightly Review Videos and take notes on topics with Blog\nEstablish specific purpose of your program, brain storm and brain write ideas. Everything should be blogged.\nDetermine requirements (what you are going to do) and constraints (what you are not going to do), consider time and requirement to share project at the beginning of November\nDescribe the impact of your project. Think about the positive and potentially negative aspects of the project.\nUse Agile Development process to manage the programming process (plan and make steps), use Issues and Kanban/SCRUM Board\nBe sure to figure out some preliminary roles in team for design, development, deployment and test within your team, make sure roles are highlighted in your Issues and SCRUM Board\nBe sure to acknowledge sources and inspiration used in establishing and creating your project\n\n\n\n\numl\n\n\n\nProject Planning\n\nTeacher/Student need, Educational Study or Simulation, Campus Club, Campus Interest, Business Interest, Charitable Organization, etc. Of course, the greatest interest is Student Interest. The project will not work if only one student is interested. - Program Purpose and Function. Think about inputs, outputs, UI, and data that will be in the program. - Be sure to pick something that you don’t burn out on after a couple of weeks. If you are a couple days into something and it is not working it is best to change. - IMO, it is much more interesting to work on something that has 3rd party interest or that you design something with intention to acquire a 3rd party interest. Working on something to acquire accolades is a big motivator. - Begin a GitHub code base with Team. Some of ideation may come in playing with code. This could also be done in Jupyter Notebooks. - Data Abstraction. UML is pictured in article. Think about how data will be formed and managed. - Managing Complexity. Think about frontend and backend portions of the system. - Procedural Abstraction. Design some of the key objects of the system. Think about the key elements of User Design. This should help you divide work amongst team. Effectually, you will be creating the sub systems of the system in this design effort. - Algorithm Implementation. The key aspects of your project and its algorithms must be considered, prototyped early. This will help you understand capabilities of team and some of the longer/research required activities. - Testing. Be sure that you are performing iteration and testing as you go. Do not stack things up or integrate infrequently. Develop, Integrate, Test weekly!!! Also, think about the things that needs to be tested. Think about how to put data into the system auto magically to ensure quality is produced and everything is easily validated.\n\n\n\nTeacher Needs\n\nPBL. Concept/Idea in CSP Education. This could be achieved using Blogging and Jupyter. Some have said, it is possible to pass the AP exam in 1 month of study. This would be 30 lessons / 1 hour lessons; of course there are likely limits on time in producing content. - Highlight all Big Ideas from CB. - Remake CB site to be Student Friendly, More Code, and less Video. - The Web Site covers key topics from CB, also includes Mini-labs, and thus should be interactive. The code and visuals should teach more than the words. - FRQs could be challenges or hack-a-thon activities that could enhance a Test Prep sessions.\n\n\nPBL. Concept/Idea around Classroom Management. Build data for a series of classroom needs. This could be CompSci, but these requirements are for me. - A system were students can do administration.\n- Users and Passwords. A single source for all projects to minimize duplication of data across periods and transitions during year. Graduation year would be a big key, to active or alumni. - Access through accounts RESTful API - User Setting and Attributes for students to be self updated - Attributes - Name, Grad year, and some other basics (birth day without year) - Password integration with Email - GitHUB ID, Slack ID - Track student history - Track All GitHub projects for the user through Year (Tri 1,2,3) - Track all Period through year - Roles of Development for User through Year - Scrum Teams and other students worked with - Pull sources like GitHub commits - Runtime project that are alive - Integration with GithUb pages, ability to Comment on assignments - Backup of Data to JSON - Restore Data from JSON"
  },
  {
    "objectID": "blog/posts/2022-09-26-AP-program_design.html#hacks",
    "href": "blog/posts/2022-09-26-AP-program_design.html#hacks",
    "title": "Big Idea 1 ‘Program Design’",
    "section": "Hacks",
    "text": "Hacks\n\nNow is time to transition to Design and Development. Designs are required and must meet Teacher Approval. If you get negative feedback act quickly. Designs should be put together around a Blog. - Brain Write. The process of just elaborating on ideas and sharing them with your team. - Wire Frame, Concept. Before coding start to outline what the project will look like. - Modeling or UML. Before coding what data will you need. Think about data behavior, data interaction, or data description. Modeling and UML help with visualization.\n\n\nAdditionally, some development of Concepts can/should occur. This should be focused on frontend or backend concepts. - Frontend. Wire Frame development is better than coding, at early stages. But if you have clear idea and can articulate it in HTML, CSS, and/or JavaScript. - Backend. Jupyter notebooks is a great way to thing about data and outputs. Often a console program can help you imagine data as well as interaction."
  },
  {
    "objectID": "blog/posts/2022-09-12-PT-python_server.html",
    "href": "blog/posts/2022-09-12-PT-python_server.html",
    "title": "Python Web Server Project",
    "section": "",
    "text": "Focus on running Python and Fastpages local Web Servers. Additionally, students will start process of making videos to show work. - Monday: Live Review - Tuesday: Test Prep - Collaboration - Wednesday: Tech Talk - Python and Fastpages local servers - Thursday: Human Day - Focus and Habits - Friday: Code, Code, Code"
  },
  {
    "objectID": "blog/posts/2022-09-12-PT-python_server.html#points-will-be-awarded-on-these-elements",
    "href": "blog/posts/2022-09-12-PT-python_server.html#points-will-be-awarded-on-these-elements",
    "title": "Python Web Server Project",
    "section": "Points will be awarded on these elements",
    "text": "Points will be awarded on these elements\n\nRunning a Python Web server locally\n\nFollow Tech Talk and setup your own Python GitHub repository. - Clone GitHub repository and prepare VSCode for editing and running project.\n- Show your Python project running locally. - Discuss local IP address and Port used to run server locally. - Show process of local edit, save, and refresh of impacted page on Web Server.\n\n\n\nRunning Fastpages Web server locally\n\nFollow Tech Talk and setup your Fastpages to run locally.\n- Ensure proper usage of .gitignore file of ipynb and docx files - Show your Fastpages project running locally. - Discuss local IP address and Port used to run server locally. - Show process of local edit, save, and refresh of impacted page on Web Server.\n\n\n\nLive Grading Presentation. \n\nOn Live grading day you will show a 1 minute video that shares how you can run, edit, change Python and Fastpages Web servers. - Show both servers running on your machine simultaneously. - Make an edit on each server in VSCode and show reflected change using Browser. - Show making a permanent change (Commit, Sync) on VSCode. - Show GitHub change list and show delta of change on GitHub Web Page - On Fastpages show initiated Action from change - On Fastpages show GitHub pages reflected change using Browser\n\n\nLive Review. Review ticket and playing a Video. 3 Teams/Tables will observe all other members. Approx. 12 - 1 minute videos. - Videos should incorporate something you took away for Focus and Habits in the Review Ticket, Video, or personal Blog. Perhaps something that shows Collaboration could get you and team toward 3 points. - It is suggested that you Create a YouTube channel, if you don’t have one. Videos should be placed in YouTube or Google Drive. NOT in GitHub, NOT in Slack. - Make sure you have a Team review ticket with all Video links. The twelve people watching should have a place to comment on each individual. - Be prepared to present fast, be quick, we think you should show everything in under 5 minutes for a Team of 4."
  },
  {
    "objectID": "blog/posts/2022-10-03-pbl-python_rapidapi.html",
    "href": "blog/posts/2022-10-03-pbl-python_rapidapi.html",
    "title": "Python RapidAPI",
    "section": "",
    "text": "APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information…"
  },
  {
    "objectID": "blog/posts/2022-10-03-pbl-python_rapidapi.html#hacks",
    "href": "blog/posts/2022-10-03-pbl-python_rapidapi.html#hacks",
    "title": "Python RapidAPI",
    "section": "Hacks",
    "text": "Hacks\n\nFind and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way.\n- RapidAPI - GitHub Project - No Key APIs Article - Twitter Developer - Google Developer - Reddit Developer\n\n\nShow API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk."
  },
  {
    "objectID": "blog/posts/2022-09-12-PBL-fastpages-docker.html",
    "href": "blog/posts/2022-09-12-PBL-fastpages-docker.html",
    "title": "Fastpages local server",
    "section": "",
    "text": "It’s often useful to test pages locally before deploying, as it can save time and be helpful for testing quick changes/debugging. In this blog we’ll learn how to deploy fastpages locally using Docker."
  },
  {
    "objectID": "blog/posts/2022-09-12-PBL-fastpages-docker.html#overview-of-steps",
    "href": "blog/posts/2022-09-12-PBL-fastpages-docker.html#overview-of-steps",
    "title": "Fastpages local server",
    "section": "Overview of steps",
    "text": "Overview of steps\n\nDownload Docker desktop\n(For Windows) Set up Docker with WSL\nRun make server in repo directory\nClick in terminal or type localhost link show (ex. http://127.0.0.1:4000/{repo name}) to view your Fastpages Blog site.\n\n\n1. Installation\nDocker is a lightweight method to build, deploy, run, update and manage containers. Download Docker desktop from following links:\nWindows: https://docs.docker.com/desktop/install/windows-install/ Mac: https://docs.docker.com/desktop/install/mac-install/.\nNow, each time you want to make server, you need to start Docker desktop or make sure it running. Make sure you do this before building locally!\n\n\n2. (For Windows) Set up Docker with WSL\nFor Windows, to set up Docker with WSL use https://docs.docker.com/desktop/windows/wsl/.\n\n\n(Optional) Download Docker extension in VSCode\nVSCode has an extension too make it easier to manage docker containers and images directly in your IDE. To download, go to the Extensions tab of VSCode (left bar, or Ctrl+Shift+X), search “Docker” and download the extension from Microsoft. You should now see a docker icon on the left bar, which you can click on to see your Docker connections.\n\n\n3. Using VSCode Terminal, run: make server\nIn the local repository, make sure you are cd’ed to the base/root directory (i.e. where the Makefile is). For Ellen that was the ap-csa-fastpages directory as pictured. For Mr M, cd ~/vscode/APCSA sets him in his APCSA repository, here the make server command will work if Docker is running.\n\n\n\nimage\n\n\nThe Makefile contains common aliased commands for building and serving your fastpages locally. If you look inside the file or run make in terminal, you can see what docker commands it can run.\n\n\n\nimage\n\n\nSpecifically, we are interested in the make server command, which will build the container the first time and start the Jekyll server. If you remember from APCSP, Jekyll is what powers Github pages behind the scenes. You can build your GitHub Pages site locally using Jekyll to preview and test changes to your site.\n\nSpecial steps for Windows\nThe first time, you might get this issue:\n\n\n\nimage\n\n\nIf that’s the case, make sure this setting is toggled on in Docker desktop settings:\n\n\n\nimage\n\n\nIt should ask you to reload and if you run the command again it should work now.\n\n\n\n4. View blog\nAfter running, look for link to run Server. For me, this was http://127.0.0.1:4000/{repo name}: > Server address: http://127.0.0.1:4000/\n\nServer running… press ctrl-c to stop.\n\nShift-click server address to launch in Browser.\nLeave the server running!!!\nMake edits in VSCode and save the file. On each save, watch terminal in VSCode to see updates and regeneration of WebSite.\nRefresh or click to Web page of change and you will see updates almost instantly. Refer to VSCode terminal to see any error encountered when running your server. As indicated ctrl-c will stop the server, however, I have left it running for hours of edits, testing, and commits to GitHub.\nAlert, when you are satisfied with local changes… you must ✔️Commit and Sync to GitHub. The local server is used to preview and test change prior to Sync. Only after Sync, will others be able to see your changes.\n\n\n\nimage\n\n\n\nAdd to .gitignore\nA side effect of building locally is that it converts all the .ipynb and .docx files to .md. This means that some files will have duplicates after building – one in .ipynb or .docx, another in .md form.\nTo avoid duplicates masters when pushing to github, add the md generated files from to the .gitignore. This can be done by right clicking md file when preparing commits. Below is a sample .gitignore. The 1st three lines should be universal to all fastpages projects, the other files are specific to your project.\n# Ignore from local build\nsettings.ini\nGemfile.lock\nimages/copied_from_nb/\n_posts/2022-08-15-AP-anatomy.md\n_posts/2022-08-22-HM-anthony_and_sahil.md\n_posts/2022-08-22-TT-darkmode.md\n_posts/2022-08-22-AP-primitives.md\n_posts/2022-08-22-TT-bash_tutorial.md\n_posts/2022-08-29-AP-using_java_objects.md\n_posts/2022-09-05-AP-boolean_ifs.md\n_posts/2022-09-19-TT-js_tutorial.md\n_posts/2022-09-26-TT-rapidapi.md\n\n\n\nResources\nhttps://github.com/fastai/fastpages/blob/master/_fastpages_docs/DEVELOPMENT.md"
  },
  {
    "objectID": "blog/posts/2022-07-08-PBL-grade_calc.html",
    "href": "blog/posts/2022-07-08-PBL-grade_calc.html",
    "title": "Grade Calculator",
    "section": "",
    "text": "{% include nav_frontend.html %}\n\n<header class=\"pb-3 mb-4 border-bottom border-primary text-dark\">\n    <span class=\"fs-4\">Grade Calculator</span>\n</header>\n<form>\n    <!-- Totals -->\n    <div class=\"form-group row\">\n        Total : <span id=\"total\" class=\"label label-primary\">0.0</span>\n        Count : <span id=\"count\" class=\"label label-primary\">0.0</span>\n        Average : <span id=\"average\" class=\"label label-primary\">0.0</span>\n    </div>\n    <!-- Rows -->\n    <div class=\"form-group row\">\n        Input scores, press tab to add new number:\n        <div id=\"scores\">\n            <input onblur=\"calculator()\" type=\"text\" name=\"score\" id=\"score0\"/><br>\n            <!-- javascript generated inputs -->\n        </div>\n    </div>\n</form>"
  },
  {
    "objectID": "blog/posts/2022-10-10-PBL-deployment_files.html",
    "href": "blog/posts/2022-10-10-PBL-deployment_files.html",
    "title": "Deployment Files",
    "section": "",
    "text": "It would be nice if there were some standards published. Here are some ideas. It takes about 15 minutes to plan or many hours to fix."
  },
  {
    "objectID": "blog/posts/2022-10-10-PBL-deployment_files.html#p3-mort-httpnighthawkcodescrums.gq",
    "href": "blog/posts/2022-10-10-PBL-deployment_files.html#p3-mort-httpnighthawkcodescrums.gq",
    "title": "Deployment Files",
    "section": "P3 MORT: http://nighthawkcodescrums.gq/",
    "text": "P3 MORT: http://nighthawkcodescrums.gq/\n|Period|Table|Port|Project|image_nm|nginx|subdomain| |3|1|8031|T31_||| |3|2|8032|T32_||| |3|3|8033|T33_||| |3|4|8034|T34_||| |3|5|8035|T35_||| |3|6|8036|T36_||| |3|7|8037|T37_|_v1|"
  },
  {
    "objectID": "blog/posts/2022-10-10-PBL-deployment_files.html#p4-mort-httpnighthawkcodescrums.gq",
    "href": "blog/posts/2022-10-10-PBL-deployment_files.html#p4-mort-httpnighthawkcodescrums.gq",
    "title": "Deployment Files",
    "section": "P4 MORT: http://nighthawkcodescrums.gq/",
    "text": "P4 MORT: http://nighthawkcodescrums.gq/\n|Period|Table|Port|Project|image_nm|nginx|subdomain| |4|1|8041|t41_||| |4|2|8042|T42_||| |4|3|8043|T43_||| |4|4|8044|t44_||| |4|5|8045|T45_||| |4|6|8046|T46-|||"
  },
  {
    "objectID": "blog/posts/2022-10-10-PBL-deployment_files.html#p4-yeung-httpnighthawkcodingteams.cf",
    "href": "blog/posts/2022-10-10-PBL-deployment_files.html#p4-yeung-httpnighthawkcodingteams.cf",
    "title": "Deployment Files",
    "section": "P4 YEUNG: http://nighthawkcodingteams.cf/",
    "text": "P4 YEUNG: http://nighthawkcodingteams.cf/\n|Period|Table|Port|Project|image_nm|nginx|subdomain| |4|1|8041|T8041_sane||| |4|2|8042|T8042_||| |4|3|8043|T8043_||| |4|4|8044|T8044_||| |4|5|8045|T8045_||| |4|6|8046|T8046-|||"
  },
  {
    "objectID": "blog/posts/2022-10-10-PBL-deployment_files.html#p5-yeung-httpnighthawkcodingteams.cf",
    "href": "blog/posts/2022-10-10-PBL-deployment_files.html#p5-yeung-httpnighthawkcodingteams.cf",
    "title": "Deployment Files",
    "section": "P5 YEUNG: http://nighthawkcodingteams.cf/",
    "text": "P5 YEUNG: http://nighthawkcodingteams.cf/\n|Period|Table|Port|Project|image_nm|nginx|subdomain| |5|1|8051|T8051_ZestyYeung || |5|2|8052|T8052_udderly_delectable||"
  },
  {
    "objectID": "blog/posts/2022-10-10-PBL-deployment_files.html#notes-from-csa",
    "href": "blog/posts/2022-10-10-PBL-deployment_files.html#notes-from-csa",
    "title": "Deployment Files",
    "section": "Notes from CSA",
    "text": "Notes from CSA\n\nPlease replace “web” in docker-compose with “web_t#” to ensure each container has a unique name & replace “*_v1” w/ “*_t#_v1” in docker-compose.yml"
  },
  {
    "objectID": "blog/posts/2022-10-10-PBL-deployment_files.html#example-github-project-clones-from-mr-yeungs-p4-and-p5",
    "href": "blog/posts/2022-10-10-PBL-deployment_files.html#example-github-project-clones-from-mr-yeungs-p4-and-p5",
    "title": "Deployment Files",
    "section": "Example GitHub Project Clones from Mr Yeung’s P4 and P5",
    "text": "Example GitHub Project Clones from Mr Yeung’s P4 and P5\nubuntu@ncs-cf:~$ pwd /home/ubuntu ubuntu@ncs-cf:~$ ls T8041_sane T8044_MVQN T8047_lash T8051_ZestyYeung T8054_Scrum_Daddys T8057_CASA T8042_TAAL T8045_peacock T8048_united-rice-cubes T8052_udderly_delectable T8055_Sport T8058_time T8043_FriendshipTable T8046_dogs T8049_thedreamteam T8053_Flask_Swag T8056_berries T8059_lyntax"
  },
  {
    "objectID": "blog/posts/2022-08-25-tool_check.html",
    "href": "blog/posts/2022-08-25-tool_check.html",
    "title": "Installation Checks",
    "section": "",
    "text": "Python Checks\n\npython --version\npython2 --version\n\nPython 3.9.12\nbash: python2: command not found\n\n\n: 127\n\n\n\n\nConda Packages\n\nconda list\n\n# packages in environment at /Users/johnmortensen/opt/anaconda3:\n#\n# Name                    Version                   Build  Channel\n_ipyw_jlab_nb_ext_conf    0.1.0            py39hecd8cb5_1  \naiohttp                   3.8.1            py39hca72f7f_1  \naiosignal                 1.2.0              pyhd3eb1b0_0  \nalabaster                 0.7.12             pyhd3eb1b0_0  \nanaconda                  2022.05                  py39_0  \nanaconda-client           1.9.0            py39hecd8cb5_0  \nanaconda-navigator        2.2.0            py39hecd8cb5_0  \nanaconda-project          0.10.2             pyhd3eb1b0_0  \nanyio                     3.5.0            py39hecd8cb5_0  \nappdirs                   1.4.4              pyhd3eb1b0_0  \napplaunchservices         0.2.1              pyhd3eb1b0_0  \nappnope                   0.1.2           py39hecd8cb5_1001  \nappscript                 1.1.2            py39h9ed2024_0  \nargon2-cffi               21.3.0             pyhd3eb1b0_0  \nargon2-cffi-bindings      21.2.0           py39hca72f7f_0  \narrow                     1.2.2              pyhd3eb1b0_0  \nastroid                   2.6.6            py39hecd8cb5_0  \nastropy                   5.0.4            py39h67323c0_0  \nasttokens                 2.0.5              pyhd3eb1b0_0  \nasync-timeout             4.0.1              pyhd3eb1b0_0  \natomicwrites              1.4.0                      py_0  \nattrs                     21.4.0             pyhd3eb1b0_0  \nautomat                   20.2.0                     py_0  \nautopep8                  1.6.0              pyhd3eb1b0_0  \nbabel                     2.9.1              pyhd3eb1b0_0  \nbackcall                  0.2.0              pyhd3eb1b0_0  \nbackports                 1.1                pyhd3eb1b0_0  \nbackports.functools_lru_cache 1.6.4              pyhd3eb1b0_0  \nbackports.tempfile        1.0                pyhd3eb1b0_1  \nbackports.weakref         1.0.post1                  py_1  \nbash-kernel               0.7.2                    pypi_0    pypi\nbcrypt                    3.2.0            py39h9ed2024_0  \nbeautifulsoup4            4.11.1           py39hecd8cb5_0  \nbinaryornot               0.4.4              pyhd3eb1b0_1  \nbitarray                  2.4.1            py39hca72f7f_0  \nbkcharts                  0.2              py39hecd8cb5_0  \nblack                     19.10b0                    py_0  \nblas                      1.0                         mkl  \nbleach                    4.1.0              pyhd3eb1b0_0  \nblosc                     1.21.0               h2842e9f_0  \nbokeh                     2.4.2            py39hecd8cb5_0  \nboto3                     1.21.32            pyhd3eb1b0_0  \nbotocore                  1.24.32            pyhd3eb1b0_0  \nbottleneck                1.3.4            py39h67323c0_0  \nbrotli                    1.0.9                hb1e8313_2  \nbrotlipy                  0.7.0           py39h9ed2024_1003  \nbrunsli                   0.1                  h23ab428_0  \nbzip2                     1.0.8                h1de35cc_0  \nc-ares                    1.18.1               hca72f7f_0  \nca-certificates           2022.3.29            hecd8cb5_1  \ncachetools                4.2.2              pyhd3eb1b0_0  \ncertifi                   2021.10.8        py39hecd8cb5_2  \ncffi                      1.15.0           py39hc55c11b_1  \ncfitsio                   3.470                hee0f690_6  \nchardet                   4.0.0           py39hecd8cb5_1003  \ncharls                    2.2.0                h23ab428_0  \ncharset-normalizer        2.0.4              pyhd3eb1b0_0  \nclick                     8.0.4            py39hecd8cb5_0  \ncloudpickle               2.0.0              pyhd3eb1b0_0  \nclyent                    1.2.2            py39hecd8cb5_1  \ncolorama                  0.4.4              pyhd3eb1b0_0  \ncolorcet                  2.0.6              pyhd3eb1b0_0  \nconda                     4.13.0           py39hecd8cb5_0  \nconda-build               3.21.8           py39hecd8cb5_2  \nconda-content-trust       0.1.1              pyhd3eb1b0_0  \nconda-env                 2.6.0                         1  \nconda-pack                0.6.0              pyhd3eb1b0_0  \nconda-package-handling    1.8.1            py39hca72f7f_0  \nconda-repo-cli            1.0.4              pyhd3eb1b0_0  \nconda-token               0.3.0              pyhd3eb1b0_0  \nconda-verify              3.4.2                      py_1  \nconstantly                15.1.0             pyh2b92418_0  \ncookiecutter              1.7.3              pyhd3eb1b0_0  \ncryptography              3.4.8            py39h2fd3fbb_0  \ncssselect                 1.1.0              pyhd3eb1b0_0  \ncurl                      7.82.0               hca72f7f_0  \ncycler                    0.11.0             pyhd3eb1b0_0  \ncython                    0.29.28          py39he9d5cce_0  \ncytoolz                   0.11.0           py39h9ed2024_0  \ndaal4py                   2021.5.0         py39h24a4e90_0  \ndal                       2021.5.0           hecd8cb5_782  \ndask                      2022.2.1           pyhd3eb1b0_0  \ndask-core                 2022.2.1           pyhd3eb1b0_0  \ndataclasses               0.8                pyh6d0b6a4_7  \ndatashader                0.13.0             pyhd3eb1b0_1  \ndatashape                 0.5.4            py39hecd8cb5_1  \ndebugpy                   1.5.1            py39he9d5cce_0  \ndecorator                 5.1.1              pyhd3eb1b0_0  \ndefusedxml                0.7.1              pyhd3eb1b0_0  \ndiff-match-patch          20200713           pyhd3eb1b0_0  \ndistributed               2022.2.1           pyhd3eb1b0_0  \ndocutils                  0.17.1           py39hecd8cb5_1  \nentrypoints               0.4              py39hecd8cb5_0  \net_xmlfile                1.1.0            py39hecd8cb5_0  \nexecuting                 0.8.3              pyhd3eb1b0_0  \nfilelock                  3.6.0              pyhd3eb1b0_0  \nflake8                    3.9.2              pyhd3eb1b0_0  \nflask                     1.1.2              pyhd3eb1b0_0  \nfonttools                 4.25.0             pyhd3eb1b0_0  \nfreetype                  2.11.0               hd8bbffd_0  \nfrozenlist                1.2.0            py39hca72f7f_0  \nfsspec                    2022.2.0           pyhd3eb1b0_0  \nfuture                    0.18.2           py39hecd8cb5_1  \ngensim                    4.1.2            py39he9d5cce_0  \ngiflib                    5.2.1                haf1e3a3_0  \nglob2                     0.7                pyhd3eb1b0_0  \ngmp                       6.2.1                h23ab428_2  \ngmpy2                     2.1.2            py39hd5de756_0  \ngoogle-api-core           1.25.1             pyhd3eb1b0_0  \ngoogle-auth               1.33.0             pyhd3eb1b0_0  \ngoogle-cloud-core         1.7.1              pyhd3eb1b0_0  \ngoogle-cloud-storage      1.31.0                     py_0  \ngoogle-crc32c             1.1.2            py39h9ed2024_0  \ngoogle-resumable-media    1.3.1              pyhd3eb1b0_1  \ngoogleapis-common-protos  1.53.0           py39hecd8cb5_0  \ngreenlet                  1.1.1            py39h23ab428_0  \ngrpcio                    1.42.0           py39ha29bfda_0  \nh5py                      3.6.0            py39h4a1dd59_0  \nhdf5                      1.10.6               hdbbcd12_0  \nheapdict                  1.0.1              pyhd3eb1b0_0  \nholoviews                 1.14.8             pyhd3eb1b0_0  \nhvplot                    0.7.3              pyhd3eb1b0_1  \nhyperlink                 21.0.0             pyhd3eb1b0_0  \nicu                       58.2                 h0a44026_3  \nidna                      3.3                pyhd3eb1b0_0  \nimagecodecs               2021.8.26        py39ha952a84_0  \nimageio                   2.9.0              pyhd3eb1b0_0  \nimagesize                 1.3.0              pyhd3eb1b0_0  \nimportlib-metadata        4.11.3           py39hecd8cb5_0  \nimportlib_metadata        4.11.3               hd3eb1b0_0  \nincremental               21.3.0             pyhd3eb1b0_0  \ninflection                0.5.1            py39hecd8cb5_0  \niniconfig                 1.1.1              pyhd3eb1b0_0  \nintake                    0.6.5              pyhd3eb1b0_0  \nintel-openmp              2021.4.0          hecd8cb5_3538  \ninterchange               2021.0.4                 pypi_0    pypi\nintervaltree              3.1.0              pyhd3eb1b0_0  \nipykernel                 6.9.1            py39hecd8cb5_0  \nipython                   8.2.0            py39hecd8cb5_0  \nipython-cypher            0.2.6                    pypi_0    pypi\nipython_genutils          0.2.0              pyhd3eb1b0_1  \nipywidgets                7.6.5              pyhd3eb1b0_1  \nisort                     5.9.3              pyhd3eb1b0_0  \nitemadapter               0.3.0              pyhd3eb1b0_0  \nitemloaders               1.0.4              pyhd3eb1b0_1  \nitsdangerous              2.0.1              pyhd3eb1b0_0  \njdcal                     1.4.1              pyhd3eb1b0_0  \njedi                      0.18.1           py39hecd8cb5_1  \njinja2                    2.11.3             pyhd3eb1b0_0  \njinja2-time               0.2.0              pyhd3eb1b0_3  \njmespath                  0.10.0             pyhd3eb1b0_0  \njoblib                    1.1.0              pyhd3eb1b0_0  \njpeg                      9e                   hca72f7f_0  \njq                        1.6               h9ed2024_1000  \njson5                     0.9.6              pyhd3eb1b0_0  \njsonschema                4.4.0            py39hecd8cb5_0  \njupyter                   1.0.0            py39hecd8cb5_7  \njupyter_client            6.1.12             pyhd3eb1b0_0  \njupyter_console           6.4.0              pyhd3eb1b0_0  \njupyter_core              4.9.2            py39hecd8cb5_0  \njupyter_server            1.13.5             pyhd3eb1b0_0  \njupyterlab                3.3.2              pyhd3eb1b0_0  \njupyterlab_pygments       0.1.2                      py_0  \njupyterlab_server         2.10.3             pyhd3eb1b0_1  \njupyterlab_widgets        1.0.0              pyhd3eb1b0_1  \njxrlib                    1.1                  haf1e3a3_2  \nkeyring                   23.4.0           py39hecd8cb5_0  \nkiwisolver                1.3.2            py39he9d5cce_0  \nkrb5                      1.19.2               hcd88c3b_0  \nlazy-object-proxy         1.6.0            py39h9ed2024_0  \nlcms2                     2.12                 hf1fd2bf_0  \nlerc                      3.0                  he9d5cce_0  \nlibaec                    1.0.4                hb1e8313_1  \nlibarchive                3.4.2                haa3ed63_0  \nlibcrc32c                 1.1.1                hb1e8313_2  \nlibcurl                   7.82.0               h6dfd666_0  \nlibcxx                    12.0.0               h2f01273_0  \nlibdeflate                1.8                  h9ed2024_5  \nlibedit                   3.1.20210910         hca72f7f_0  \nlibev                     4.33                 h9ed2024_1  \nlibffi                    3.3                  hb1e8313_2  \nlibgfortran               3.0.1                h93005f0_2  \nlibiconv                  1.16                 hca72f7f_2  \nlibidn2                   2.3.2                h9ed2024_0  \nliblief                   0.11.5               he9d5cce_1  \nlibllvm11                 11.1.0               h46f1229_1  \nlibnghttp2                1.46.0               ha29bfda_0  \nlibpng                    1.6.37               ha441bb4_0  \nlibprotobuf               3.19.1               h8346a28_0  \nlibsodium                 1.0.18               h1de35cc_0  \nlibspatialindex           1.9.3                h23ab428_0  \nlibssh2                   1.10.0               h0a4fc7d_0  \nlibtiff                   4.2.0                h87d7836_0  \nlibunistring              0.9.10               h9ed2024_0  \nlibwebp                   1.2.2                h56c3ce4_0  \nlibwebp-base              1.2.2                hca72f7f_0  \nlibxml2                   2.9.12               hcdb78fc_0  \nlibxslt                   1.1.34               h83b36ba_0  \nlibzopfli                 1.0.3                hb1e8313_0  \nllvm-openmp               12.0.0               h0dcd299_1  \nllvmlite                  0.38.0           py39h8346a28_0  \nlocket                    0.2.1            py39hecd8cb5_2  \nlxml                      4.8.0            py39h65b224f_0  \nlz4-c                     1.9.3                h23ab428_1  \nlzo                       2.10                 haf1e3a3_2  \nmarkdown                  3.3.4            py39hecd8cb5_0  \nmarkupsafe                2.0.1            py39h9ed2024_0  \nmatplotlib                3.5.1            py39hecd8cb5_1  \nmatplotlib-base           3.5.1            py39hfb0c5b7_1  \nmatplotlib-inline         0.1.2              pyhd3eb1b0_2  \nmccabe                    0.6.1            py39hecd8cb5_1  \nmistune                   0.8.4           py39h9ed2024_1000  \nmkl                       2021.4.0           hecd8cb5_637  \nmkl-service               2.4.0            py39h9ed2024_0  \nmkl_fft                   1.3.1            py39h4ab4a9b_0  \nmkl_random                1.2.2            py39hb2f4e1b_0  \nmock                      4.0.3              pyhd3eb1b0_0  \nmonotonic                 1.6                      pypi_0    pypi\nmpc                       1.1.0                h6ef4df4_1  \nmpfr                      4.0.2                h9066e36_1  \nmpi                       1.0                       mpich  \nmpich                     3.3.2                hc856adb_0  \nmpmath                    1.2.1            py39hecd8cb5_0  \nmsgpack-python            1.0.2            py39hf7b0b51_1  \nmultidict                 5.2.0            py39hca72f7f_2  \nmultipledispatch          0.6.0            py39hecd8cb5_0  \nmunkres                   1.1.4                      py_0  \nmypy_extensions           0.4.3            py39hecd8cb5_1  \nnavigator-updater         0.2.1                    py39_1  \nnbclassic                 0.3.5              pyhd3eb1b0_0  \nnbclient                  0.5.13           py39hecd8cb5_0  \nnbconvert                 6.4.4            py39hecd8cb5_0  \nnbformat                  5.3.0            py39hecd8cb5_0  \nncurses                   6.3                  hca72f7f_2  \nneo4jrestclient           2.1.1                    pypi_0    pypi\nneo4jupyter               0.2.0                    pypi_0    pypi\nnest-asyncio              1.5.5            py39hecd8cb5_0  \nnetworkx                  2.7.1              pyhd3eb1b0_0  \nnltk                      3.7                pyhd3eb1b0_0  \nnodejs                    10.13.0              h0a44026_0  \nnose                      1.3.7           pyhd3eb1b0_1008  \nnotebook                  6.4.8            py39hecd8cb5_0  \nnumba                     0.55.1           py39hae1ba45_0  \nnumexpr                   2.8.1            py39h2e5f0a9_0  \nnumpy                     1.21.5           py39h2e5f0a9_1  \nnumpy-base                1.21.5           py39h3b1a694_1  \nnumpydoc                  1.2                pyhd3eb1b0_0  \nolefile                   0.46               pyhd3eb1b0_0  \noniguruma                 6.9.7.1              h9ed2024_0  \nopenjpeg                  2.4.0                h66ea3da_0  \nopenpyxl                  3.0.9              pyhd3eb1b0_0  \nopenssl                   1.1.1n               hca72f7f_0  \npackaging                 21.3               pyhd3eb1b0_0  \npandas                    1.4.2            py39he9d5cce_0  \npandocfilters             1.5.0              pyhd3eb1b0_0  \npanel                     0.13.0           py39hecd8cb5_0  \npansi                     2020.7.3                 pypi_0    pypi\nparam                     1.12.0             pyhd3eb1b0_0  \nparsel                    1.6.0            py39hecd8cb5_0  \nparso                     0.8.3              pyhd3eb1b0_0  \npartd                     1.2.0              pyhd3eb1b0_1  \npathspec                  0.7.0                      py_0  \npatsy                     0.5.2            py39hecd8cb5_1  \npep8                      1.7.1            py39hecd8cb5_0  \npexpect                   4.8.0              pyhd3eb1b0_3  \npickleshare               0.7.5           pyhd3eb1b0_1003  \npillow                    9.0.1            py39hde71d04_0  \npip                       21.2.4           py39hecd8cb5_0  \npkginfo                   1.8.2              pyhd3eb1b0_0  \nplotly                    5.6.0              pyhd3eb1b0_0  \npluggy                    1.0.0            py39hecd8cb5_1  \npoyo                      0.5.0              pyhd3eb1b0_0  \nprettytable               3.3.0                    pypi_0    pypi\nprometheus_client         0.13.1             pyhd3eb1b0_0  \nprompt-toolkit            3.0.20             pyhd3eb1b0_0  \nprompt_toolkit            3.0.20               hd3eb1b0_0  \nprotego                   0.1.16                     py_0  \nprotobuf                  3.19.1           py39he9d5cce_0  \npsutil                    5.8.0            py39h9ed2024_1  \nptyprocess                0.7.0              pyhd3eb1b0_2  \npure_eval                 0.2.2              pyhd3eb1b0_0  \npy                        1.11.0             pyhd3eb1b0_0  \npy-lief                   0.11.5           py39he9d5cce_1  \npy2neo                    2021.2.3                 pypi_0    pypi\npyasn1                    0.4.8              pyhd3eb1b0_0  \npyasn1-modules            0.2.8                      py_0  \npycodestyle               2.7.0              pyhd3eb1b0_0  \npycosat                   0.6.3            py39h9ed2024_0  \npycparser                 2.21               pyhd3eb1b0_0  \npyct                      0.4.6            py39hecd8cb5_0  \npycurl                    7.44.1           py39hbcfaee0_1  \npydispatcher              2.0.5            py39hecd8cb5_2  \npydocstyle                6.1.1              pyhd3eb1b0_0  \npyerfa                    2.0.0            py39h9ed2024_0  \npyflakes                  2.3.1              pyhd3eb1b0_0  \npygments                  2.11.2             pyhd3eb1b0_0  \npyhamcrest                2.0.2              pyhd3eb1b0_2  \npyjwt                     2.1.0            py39hecd8cb5_0  \npylint                    2.9.6            py39hecd8cb5_1  \npyls-spyder               0.4.0              pyhd3eb1b0_0  \npyodbc                    4.0.32           py39he9d5cce_1  \npyopenssl                 21.0.0             pyhd3eb1b0_1  \npyparsing                 3.0.4              pyhd3eb1b0_0  \npyqt                      5.9.2            py39h23ab428_6  \npyrsistent                0.18.0           py39hca72f7f_0  \npysocks                   1.7.1            py39hecd8cb5_0  \npytables                  3.6.1            py39h648f197_1  \npytest                    7.1.1            py39hecd8cb5_0  \npython                    3.9.12               hdfd78df_0  \npython-dateutil           2.8.2              pyhd3eb1b0_0  \npython-fastjsonschema     2.15.1             pyhd3eb1b0_0  \npython-libarchive-c       2.9                pyhd3eb1b0_1  \npython-lsp-black          1.0.0              pyhd3eb1b0_0  \npython-lsp-jsonrpc        1.0.0              pyhd3eb1b0_0  \npython-lsp-server         1.2.4              pyhd3eb1b0_0  \npython-slugify            5.0.2              pyhd3eb1b0_0  \npython-snappy             0.6.0            py39h23ab428_3  \npython.app                3                py39hca72f7f_0  \npytz                      2021.3             pyhd3eb1b0_0  \npyviz_comms               2.0.2              pyhd3eb1b0_0  \npywavelets                1.3.0            py39hca72f7f_0  \npyyaml                    6.0              py39hca72f7f_1  \npyzmq                     22.3.0           py39he9d5cce_2  \nqdarkstyle                3.0.2              pyhd3eb1b0_0  \nqstylizer                 0.1.10             pyhd3eb1b0_0  \nqt                        5.9.7                h468cd18_1  \nqtawesome                 1.0.3              pyhd3eb1b0_0  \nqtconsole                 5.3.0              pyhd3eb1b0_0  \nqtpy                      2.0.1              pyhd3eb1b0_0  \nqueuelib                  1.5.0            py39hecd8cb5_0  \nreadline                  8.1.2                hca72f7f_1  \nregex                     2022.3.15        py39hca72f7f_0  \nrequests                  2.27.1             pyhd3eb1b0_0  \nrequests-file             1.5.1              pyhd3eb1b0_0  \nripgrep                   12.1.1                        0  \nrope                      0.22.0             pyhd3eb1b0_0  \nrsa                       4.7.2              pyhd3eb1b0_1  \nrtree                     0.9.7            py39hecd8cb5_1  \nruamel_yaml               0.15.100         py39h9ed2024_0  \ns3transfer                0.5.0              pyhd3eb1b0_0  \nscikit-image              0.19.2           py39hae1ba45_0  \nscikit-learn              1.0.2            py39hae1ba45_1  \nscikit-learn-intelex      2021.5.0         py39hecd8cb5_0  \nscipy                     1.7.3            py39h8c7af03_0  \nscrapy                    2.6.1            py39hecd8cb5_0  \nseaborn                   0.11.2             pyhd3eb1b0_0  \nsend2trash                1.8.0              pyhd3eb1b0_1  \nservice_identity          18.1.0             pyhd3eb1b0_1  \nsetuptools                61.2.0           py39hecd8cb5_0  \nsip                       4.19.13          py39h23ab428_0  \nsix                       1.16.0             pyhd3eb1b0_1  \nsmart_open                5.1.0              pyhd3eb1b0_0  \nsnappy                    1.1.9                he9d5cce_0  \nsniffio                   1.2.0            py39hecd8cb5_1  \nsnowballstemmer           2.2.0              pyhd3eb1b0_0  \nsortedcollections         2.1.0              pyhd3eb1b0_0  \nsortedcontainers          2.4.0              pyhd3eb1b0_0  \nsoupsieve                 2.3.1              pyhd3eb1b0_0  \nsphinx                    4.4.0              pyhd3eb1b0_0  \nsphinxcontrib-applehelp   1.0.2              pyhd3eb1b0_0  \nsphinxcontrib-devhelp     1.0.2              pyhd3eb1b0_0  \nsphinxcontrib-htmlhelp    2.0.0              pyhd3eb1b0_0  \nsphinxcontrib-jsmath      1.0.1              pyhd3eb1b0_0  \nsphinxcontrib-qthelp      1.0.3              pyhd3eb1b0_0  \nsphinxcontrib-serializinghtml 1.1.5              pyhd3eb1b0_0  \nspyder                    5.1.5            py39hecd8cb5_1  \nspyder-kernels            2.1.3            py39hecd8cb5_0  \nsqlalchemy                1.4.32           py39hca72f7f_0  \nsqlite                    3.38.2               h707629a_0  \nstack_data                0.2.0              pyhd3eb1b0_0  \nstatsmodels               0.13.2           py39hca72f7f_0  \nsympy                     1.10.1           py39hecd8cb5_0  \ntabulate                  0.8.9            py39hecd8cb5_0  \ntbb                       2021.5.0             haf03e11_0  \ntbb4py                    2021.5.0         py39haf03e11_0  \ntblib                     1.7.0              pyhd3eb1b0_0  \ntenacity                  8.0.1            py39hecd8cb5_0  \nterminado                 0.13.1           py39hecd8cb5_0  \ntestpath                  0.5.0              pyhd3eb1b0_0  \ntext-unidecode            1.3                pyhd3eb1b0_0  \ntextdistance              4.2.1              pyhd3eb1b0_0  \nthreadpoolctl             2.2.0              pyh0d69192_0  \nthree-merge               0.1.1              pyhd3eb1b0_0  \ntifffile                  2021.7.2           pyhd3eb1b0_2  \ntinycss                   0.4             pyhd3eb1b0_1002  \ntk                        8.6.11               h7bc2e8c_0  \ntldextract                3.2.0              pyhd3eb1b0_0  \ntoml                      0.10.2             pyhd3eb1b0_0  \ntomli                     1.2.2              pyhd3eb1b0_0  \ntoolz                     0.11.2             pyhd3eb1b0_0  \ntornado                   6.1              py39h9ed2024_0  \ntqdm                      4.64.0           py39hecd8cb5_0  \ntraitlets                 5.1.1              pyhd3eb1b0_0  \ntwisted                   22.2.0           py39hca72f7f_0  \ntyped-ast                 1.4.3            py39h9ed2024_1  \ntyping-extensions         4.1.1                hd3eb1b0_0  \ntyping_extensions         4.1.1              pyh06a4308_0  \ntzdata                    2022a                hda174b7_0  \nujson                     5.1.0            py39he9d5cce_0  \nunidecode                 1.2.0              pyhd3eb1b0_0  \nunixodbc                  2.3.9                haf1e3a3_0  \nurllib3                   1.26.9           py39hecd8cb5_0  \nw3lib                     1.21.0             pyhd3eb1b0_0  \nwatchdog                  2.1.6            py39h999c104_0  \nwcwidth                   0.2.5              pyhd3eb1b0_0  \nwebencodings              0.5.1            py39hecd8cb5_1  \nwebsocket-client          0.58.0           py39hecd8cb5_4  \nwerkzeug                  2.0.3              pyhd3eb1b0_0  \nwget                      1.21.3               h6dfd666_0  \nwheel                     0.37.1             pyhd3eb1b0_0  \nwidgetsnbextension        3.5.2            py39hecd8cb5_0  \nwrapt                     1.12.1           py39h9ed2024_1  \nwurlitzer                 3.0.2            py39hecd8cb5_0  \nxarray                    0.20.1             pyhd3eb1b0_1  \nxlrd                      2.0.1              pyhd3eb1b0_0  \nxlsxwriter                3.0.3              pyhd3eb1b0_0  \nxlwings                   0.24.9           py39hecd8cb5_0  \nxz                        5.2.5                h1de35cc_0  \nyaml                      0.2.5                haf1e3a3_0  \nyapf                      0.31.0             pyhd3eb1b0_0  \nyarl                      1.6.3            py39h9ed2024_0  \nzeromq                    4.3.4                h23ab428_0  \nzfp                       0.5.5                he9d5cce_6  \nzict                      2.0.0              pyhd3eb1b0_0  \nzipp                      3.7.0              pyhd3eb1b0_0  \nzlib                      1.2.12               h4dc903c_2  \nzope                      1.0              py39hecd8cb5_1  \nzope.interface            5.4.0            py39h9ed2024_0  \nzstd                      1.4.9                h322a384_0  \n\n\n\necho Conda Check\n# test for a kernel installation\ntest=\"jupyter\" # keyword\ncheck=`conda list | grep $test` # run command\nn=${#check} # determine length\n\nif [[ ${n} > 0 ]];  # testt length\nthen # greater than zero\n    echo \"$check\"\nelse # less than zero\n    echo \"$test not found\"\nfi\n\nConda Check\njupyter                   1.0.0            py39hecd8cb5_7  \njupyter_client            6.1.12             pyhd3eb1b0_0  \njupyter_console           6.4.0              pyhd3eb1b0_0  \njupyter_core              4.9.2            py39hecd8cb5_0  \njupyter_server            1.13.5             pyhd3eb1b0_0  \njupyterlab                3.3.2              pyhd3eb1b0_0  \njupyterlab_pygments       0.1.2                      py_0  \njupyterlab_server         2.10.3             pyhd3eb1b0_1  \njupyterlab_widgets        1.0.0              pyhd3eb1b0_1  \nneo4jupyter               0.2.0                    pypi_0    pypi\n\n\n\nJupyter Checks\n\njupyter --version\njupyter kernelspec list\n\nSelected Jupyter core packages...\nIPython          : 8.2.0\nipykernel        : 6.9.1\nipywidgets       : 7.6.5\njupyter_client   : 6.1.12\njupyter_core     : 4.9.2\njupyter_server   : 1.13.5\njupyterlab       : 3.3.2\nnbclient         : 0.5.13\nnbconvert        : 6.4.4\nnbformat         : 5.3.0\nnotebook         : 6.4.8\nqtconsole        : 5.3.0\ntraitlets        : 5.1.1\nAvailable kernels:\n  java          /Users/johnmortensen/Library/Jupyter/kernels/java\n  javascript    /Users/johnmortensen/Library/Jupyter/kernels/javascript\n  python3       /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3\n  bash          /usr/local/share/jupyter/kernels/bash\n\n\n\n# test for a kernel installation\ntest=\"python3\" # keyword\ncheck=`jupyter kernelspec list | grep $test` # run command\nn=${#check} # determine length\n\nif [[ ${n} > 0 ]];  # testt length\nthen # greater than zero\n    echo \"$check\"\nelse # less than zero\n    echo \"$test not found\"\nfi\n\n  python3       /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3"
  },
  {
    "objectID": "blog/posts/2022-08-15-HM-student_score_history.html",
    "href": "blog/posts/2022-08-15-HM-student_score_history.html",
    "title": "Student Scoring on AP Exam",
    "section": "",
    "text": "Paper exam in Gym, MCQs - Energy in classroom was much improved over prior year. Ms Naidu and Mr Mortensen often had positive work sessions at the end of the day and we were always complementary to students effort. - Test Prep Tuesday was polarized between participating and not participating. Student Led sessions needed improve, perhaps more training by Teachers. In 2023 testing year, the plan is to lead Test Prep sessions at start of the year and look for students to provide valued participation in second half of Trimester 1. Extra Credit will likely be awarded for quality student led preparations during the year. - Students did very well on practice exams and on corrections of errors. Majority of class was in dark green after 2nd practice test. - Some students were trying to do minimum on College Board Create Performance Task (CPT). The people that received “4’s and 5’s” seem to have an extra mindset on CPT. It is my opinion that many scores dropped out of “5” range as a result of the CPT. But, this can’t be confirmed, but theory is based on high MCQ scores in practice sessions.\n\n\n\n\n\nPandemic and online exam in lock down browser, MCQs - Scrum Teams were standardized at 4 to 5 people, based on CSA experience. Connections in Scrum Teams were inconsistent throughout the year, a lot of black screens. - A few students took on Student Led Test Prep Tuesday and produced prepared lessons. - A few students seem to do most of the work in Scrum Teams. There were many mentions of this in teams that were more open to their internal problems. - Based off of inconsistent participation, scores did not surprise the Teacher. - Stats show there is no left in this graph, very successful class."
  },
  {
    "objectID": "blog/posts/2022-12-05-PT-student_session2.html",
    "href": "blog/posts/2022-12-05-PT-student_session2.html",
    "title": "Week of 12-05, Student Teaching Week 2, Pop Live Reviews",
    "section": "",
    "text": "Weeks Plans - Monday: 3.8 and 3.10 Boolean Iteration and Lists - Tuesday: 3.9 and 3.11 Developing Algorithms and Binary Search - Wednesday: work day, pop live reviews - Thursday: 3.12 and 3.13 Calling and Developing Procedures - Friday: work day, pop live reviews"
  },
  {
    "objectID": "blog/posts/2022-08-15-TT101-vscode-wsl.html",
    "href": "blog/posts/2022-08-15-TT101-vscode-wsl.html",
    "title": "VSCode Download with WSL",
    "section": "",
    "text": "Windows is the number one desktop operating system. However, Linux is a preferred standard for many developers. Using WSL you can develop in a Linux-based environment, use Linux-specific tool chains and utilities, and run and debug your Linux-based applications all from the comfort of Windows. This gives the developer on Windows the best of both worlds.\n\n\n\n\nThis section of the document is intended to get the WSL distribution of Ubuntu installed on you Windows PC.\n\n\nOpen a PowerShell. Enter WSL installation command at Prompt:\n\nwsl --install\n\nIf you receive error the required operation requires elevation You will need to perform wsl install command again, but 1st elevate permissions using command: start-process PowerShell -verb runas\nAs it states in output in shell, you will need to reboot your computer. My suggestion is to select Restart or if available Update and Restart.\nAfter booting up there are several things that could occur\n\n\nA Command or PowerShell prompt could automatically pop up prompting you for a username. Choose a username and password to create an account.\nSome other event may occur. Make sure you establish password when requested. Verifying or take action in Command or Powershell, try these as C:\\Users\\<username>…\n\nType wsl --list, you should see Ubuntu\nIf no Ubuntu, Type wsl --list --online, then use wsl --install -d Ubuntu\nAfter success\n\n\n\nAfter WSL install, verify the following before you continue:\n\n\nOpen Command or Powershell, Run as your own user account.\n\nType wsl, this should put you in a different looking prompt. From C:\\Users\\<username> to <username>@MSI:\nIf you ever need to elevate permission for installation sudo wsl, followed by your computer password.\n\nObserve that drive changes from C:\\ to /mnt/c when you change prompt from native Windows to WSL.\n\n\n\n\n\nInstalling Visual Studio Code (VSCode) with the Remote extension lets you use the WSL as your full-time development environment right from VS Code 1. Install VSCode, Download VSCode Windows Version 2. When prompted to Select Additional Tasks during installation, be sure to check the Add to PATH option so you can easily open a folder in WSL using the VSCode code command. 3. Install the Remote Development extension pack\n\n\n\n\n\nOpen a WSL terminal window (using the start menu item or by typing wsl from a command prompt / PowerShell)\nNavigate to a folder you’d like to open in VS Code Here are some useful commands for our work\n\ncd ~     # takes you to your personal directory on Windows\nmkdir vscode   # creates a folder to clone your repositories\nls     # views the content of the directory you are currently on\ncd ~/vscode  # changes the directory to path for vscode files\ngit clone https://github.com/nighthawkcoders/APCSP.git # clone repo\ncd APCSP  # changes the directory to path for APCSP repos assets\ncode .  # opens APCSP in VSCode\ncd ..    # changes the directory to the previous/parent directory\ngit config --global user.email mygmail@gmail.com  # tell git your email\ngit config --global user.name mygithub   # tell git your github id\n\nType code . in the terminal. When doing this for the first time, you should see VS Code fetching components needed to run in WSL. This should only take a short while, and is only needed once.\n\n\n\n\nHere is sample of steps with WSL  equal to shay These steps will need to be adapted to your environment.\n\n\nThese two commands help git to understand your identity\n\nshay@MSI:/mnt/c/Users/ShayM$ git config --global user.email shay@gmail.com\nshay@MSI:/mnt/c/Users/ShayM$ git config --global user.name shay\n\nThese commands clone a repository and load VSCode for work\n\nshay@MSI:/mnt/c/Users/ShayM$ mkdir vscode\nshay@MSI:/mnt/c/Users/ShayM$ cd vscode\nshay@MSI:/mnt/c/Users/ShayM/vscode$ git clone https://github.com/nighthawkcoders/APCSP.git\nCloning into 'APCSP'...\nremote: Enumerating objects: 8306, done.\nremote: Counting objects: 100% (2360/2360), done.\nremote: Compressing objects: 100% (723/723), done.\nremote: Total 8306 (delta 1312), reused 2305 (delta 1262), pack-reused 5946\nReceiving objects: 100% (8306/8306), 16.27 MiB | 1.11 MiB/s, done.\nResolving deltas: 100% (4360/4360), done.\nshay@MSI:/mnt/c/Users/ShayM/vscode$ cd APCSP\nshay@MSI:/mnt/c/Users/ShayM/vscode/APCSP$ code .\nInstalling VS Code Server for x64 (6d9b74a70ca9c7733b29f0456fd8195364076dda)\nDownloading: 100%\nUnpacking: 100%\nUnpacked 2416 files and folders to /home/shay/.vscode-server/bin/6d9b74a70ca9c7733b29f0456fd8195364076dda.\nshay@MSI:/mnt/c/Users/ShayM/vscode$\n\n\n\n\nVSCode with WSL shows a WSL indicator in the bottom left corner of Window. \n\n\n\n\n\nRead more on WSL and VSCode VSCode doc"
  },
  {
    "objectID": "blog/posts/welcome/index.html",
    "href": "blog/posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "blog/posts/2022-10-17-AP-computer_systems_networks.html",
    "href": "blog/posts/2022-10-17-AP-computer_systems_networks.html",
    "title": "Computer System and Networks",
    "section": "",
    "text": "Internet, Word Wide Web, Local Area Network, HTTP, DNS, TCP, UDP, IP. Discussion focuses on Letters and Jig Saw puzzles as analogy for Source, Destination, and Packets.\n\n\n\n\nHTTP - Hyper Text Transfer Protocol, HTTPS - Secure HTTP\n\nHTTP takes care of the communication between a web server and the clients web browser. HTTP is used for sending requests from a web client to receive a response from the server. Response could be HTML or JSON.\nHTTPS takes care of secure communication between a web server and a web browser. In our deployment process we used certbot to make HTTP communication secure all the time.\n\nTCP/IP - Transmission Control Protocol, Internet Protocol\n\nTPC/IP messages are broken up into small independent “packets” and sent between computers via the Internet.\nIP is responsible for “routing” each packet to the correct destination. When an IP packet is sent from a computer, it arrives at an IP router. The IP router is responsible for “routing” the packet to the correct destination, directly or via another router.\n\nNetwork Layer - The wireless and physical layers that move bits and bytes “11010001” across the internet.\n\n\n\n\nhttp"
  },
  {
    "objectID": "blog/posts/2022-10-17-AP-computer_systems_networks.html#fault-tolerence",
    "href": "blog/posts/2022-10-17-AP-computer_systems_networks.html#fault-tolerence",
    "title": "Computer System and Networks",
    "section": "Fault Tolerence",
    "text": "Fault Tolerence\n\nCollege Board\nKnow how to determine if vertex of graph has more than one connection. Multiple connections, in reference to a computing device, could be considered “Fault Tolerant”. Building “Fault Tolerant” systems makes the network or internet stronger.\n\nUnderstanding Computer, Routers, Systems, and Purpose are a pre-requisite to understanding Fault Tolerance systems. Regarding College Board videos, for clarification, a Router is typically used to connect computers. Here is an illustration that is very similar to the key components we have used in this class and should be familiar to those who have done deployment.\n\n\nAs we are at school, using an HTTP client we request a page via LAN or Campus Network. This Network has a router and an ISP router that directs us to the public internet.\nDNS is used to translate https://nighthawkcodingsociety.com to an IP address, see What’s My DNS\nThis targets the Web Server, the request is directed through a router to the Server running Nginx, which intern directs request to Gunicorn application hosting the Flask Website.\n\n\n\n\nwebserver\n\n\n\nFault tolerant “routing” and “systems” on the internet is achieved by having redundancy in routing paths and computer functions. Networks and Systems become stronger because of many routes and redundancy of function. This AWS picture shows load balancing, multiple zones, redundant equipment, standby and fail over equipment and paths. This is much more than just having multiple connections, there is A LOT of planning in making fault tolerance. This is why there is such a rise in companies like AWS, Azure, Google Cloud, etc.\n\n\n\n\naws\n\n\n\nThe path the TCP/IP packet will follow might be different from other packets, for instance from the same HTTP communication. The routers in the network are responsible for the right addressing, depending on traffic volume, errors in the network, etc. Since the Internet is Fault Tolerant, there are many paths to a destination, similar to Google Maps providing alternate paths when we travel. Time can be seen with Ping. Routes and time can be see with TraceRoute command…\n\nMacBook-Pro-3:~ johnmortensen$ traceroute yahoo.com\ntraceroute: Warning: yahoo.com has multiple addresses; using 74.6.231.20\ntraceroute to yahoo.com (74.6.231.20), 64 hops max, 52 byte packets\n 1  osync (192.168.1.1)  3.698 ms  2.227 ms  1.533 ms\n 2  142-254-184-101.inf.spectrum.com (142.254.184.101)  21.250 ms  16.529 ms  11.286 ms\n 3  76.167.26.181 (76.167.26.181)  35.013 ms  32.531 ms  45.001 ms\n 4  agg22.sndhcaax02r.socal.rr.com (72.129.1.142)  19.709 ms  26.443 ms  24.083 ms\n 5  agg22.tustcaft01r.socal.rr.com (72.129.1.2)  25.561 ms  22.516 ms  31.393 ms\n 6  bu-ether26.tustca4200w-bcr00.tbone.rr.com (66.109.3.232)  36.292 ms\n    209-18-43-72.dfw10.tbone.rr.com (209.18.43.72)  29.504 ms  37.647 ms\n 7  0.ae3.pr1.lax10.tbone.rr.com (107.14.19.56)  29.244 ms  22.536 ms\n    0.ae2.pr1.lax10.tbone.rr.com (107.14.19.54)  29.889 ms\n 8  xe-0-0-33-1.par2.lax.yahoo.com (216.115.96.14)  28.815 ms  21.496 ms  25.669 ms\n 9  unknown.yahoo.com (216.115.102.186)  20.551 ms  23.971 ms  35.320 ms\n10  ae-9.pat2.pao.yahoo.com (209.191.64.246)  27.373 ms  27.639 ms  29.064 ms\n11  ae-7.pat2.dnx.yahoo.com (209.191.65.9)  59.405 ms  67.980 ms  58.710 ms\n12  ae-6.pat1.nez.yahoo.com (209.191.64.226)  74.793 ms\n    ae-5.pat2.nez.yahoo.com (209.191.64.224)  81.188 ms  77.055 ms\n13  et-1-0-0.msr2.ne1.yahoo.com (216.115.105.183)  87.602 ms\n    et-1-0-0.msr1.ne1.yahoo.com (216.115.105.29)  78.726 ms\n    et-19-1-0.msr1.ne1.yahoo.com (216.115.105.27)  78.340 ms\n14  unknown.yahoo.com (98.138.97.37)  75.661 ms  76.450 ms\n    et-19-1-0.clr1-a-gdc.ne1.yahoo.com (98.138.97.71)  81.867 ms\n15  lo0.fab4-2-gdc.ne1.yahoo.com (98.138.51.3)  93.363 ms\n    lo0.fab3-2-gdc.ne1.yahoo.com (98.138.51.2)  96.854 ms\n    lo0.fab4-2-gdc.ne1.yahoo.com (98.138.51.3)  76.542 ms\n16  usw2-1-lbd.ne1.yahoo.com (98.138.97.157)  78.076 ms  78.943 ms  75.405 ms\n17  media-router-fp73.prod.media.vip.ne1.yahoo.com (74.6.231.20)  81.217 ms  77.895 ms  84.628 ms"
  },
  {
    "objectID": "blog/posts/2022-10-17-AP-computer_systems_networks.html#parallel-and-distributed-computing",
    "href": "blog/posts/2022-10-17-AP-computer_systems_networks.html#parallel-and-distributed-computing",
    "title": "Computer System and Networks",
    "section": "Parallel and Distributed Computing",
    "text": "Parallel and Distributed Computing\n\nCollege Board\nSingle Core versus Multiple Cores allows allows parallel computing. Using multiple Cores allows a sequential job to be split up with minimum time being the length of longest job(s). What is best time for 30 seconds, 50 seconds, 40 seconds jobs on a two core computer?\n\nDistributed Computing - Bitcoin mining is an example of distributed computing. A tough digital computing puzzle illustrates need for CPU/GPU power. A distributed ledger amongst multiple miners is verified to avoid fraud. The result of this distributed computing network is a new financial economy.\n\n\n\n\nbitcoin\n\n\n\nParallel Computing - Chrome, the browser most of us use to run our Web Application is a great example of a multi process architecture. There are two primary types of processes in Chrome : the browser process and the render process.\n\nBrowser process interacts with information from internet. This has multiple functions: Web contents represents a tab within the browser. Render View manages all IPC (Inter Process Communication), for instance the HTTP actions.\nRender process is responsible for constructing a web page. Webkit is the engine and contains WebCore which constructs DOM (layout) and the JavaScript interpreter.\n\n\n\n\n\nchrome"
  },
  {
    "objectID": "blog/posts/2022-09-05-AP-create_performance_task.html",
    "href": "blog/posts/2022-09-05-AP-create_performance_task.html",
    "title": "College Board Create Performance Task",
    "section": "",
    "text": "Each time we engage in Code/Code/Coding it is an opportunity to think of the possibility of fulfilling the Create Performance Task requirement. But, this is a student project and responsibility is on you. To be thinking and preparing is a mindset, one that Del Norte CompSci Teachers advise as we proceed through topics. Thus, we are getting and early start by using this Pair Share project as an iteration through the entire process, as that is the foundational principle behind PBL.\nTeacher will help as directed by College Board…\n\nProvide instruction, practice, and feedback related to content and skills that will help students succeed on the performance task. This can include, but needs not be limited to, the iterative development process, strategies for collaboration, the development of both data and procedural abstractions, and describing an algorithm’s purpose and explaining how it functions.\nBrainstorm problems that programming can address or brainstorm special interests that students want to incorporate when developing a program.\nAssist students in defining their focus and choice of topics without making selections for them (e.g., by asking questions).\nReview the performance task directions and provide multiple opportunities to practice and discuss the entire performance task and individual prompts of the task.\nExplain the role the teacher can and cannot play in providing students with assistance during the actual performance task; teachers should encourage students to take advantage of the opportunity to get assistance and feedback from teachers and peers during practice.\nReview the scoring guidelines with students to help them understand how their work will be assessed. Teachers should remind students that the scoring guidelines align to the prompts in the performance task, so they must respond to all the prompts in their attempt to obtain the highest score possible.\n\nDisclaimer. Del Norte Computer Science Teachers are not experts in College Board scoring guidelines. It is best to look for examples of performance task submissions at high, medium, and low levels on College Board Web Site. Any grades you receive on any project in class may differ from scoring of the performance task by College Board.\n\n\nPrior to the official administration of the Create performance task, students need practice implementing programs that first include sequencing, then incorporate selection and iteration, and finally use procedures and lists. While collaboration on ideation and program design and development during the Create performance task is not required, it is encouraged.\nYou will be provided with a minimum of 12 hours of class time to complete and submit the following:\n\nFinal program code (created independently or collaboratively)\nA video that displays the running of your program and demonstrates functionality you developed (created independently)\nWritten responses to all the prompts in the performance task (created independently)\n\nDel Norte Computer Science Principles Teachers are requiring students to do collaborative ideation, program design, prototyping and pair programming on these early activities that we grade in class.\n\n\n\nNote: There is no partial credit (0 or 1 point for each section). AP Computer Science Principles Exam is a through-course performance task that assesses Computational Thinking Practices 1, 2, 3, and 4 across six rubric rows.\n\n\n\nAssesses students’ ability to explain how a code segment or program functions. (Skill: Code Analysis) \nFor 3a, make sure to differentiate between program purpose and function\n\nThey are defined in the scoring guidelines\n\n\n\n\n\n\nAssesses students’ ability to use abstraction to manage complexity in a program. (Skill Abstraction in Program Development - data) \n\n\n\n\n\nAssesses students’ ability to explain how abstraction manages complexity. (Skill Abstraction in Program Development explain complexity) \nBe specific about how the program manages complexity in the context of your own program\n\n\n\n\n\nAssesses students’ ability to use abstraction to manage complexity in a program. (Skill Abstraction in Program Development - procedures/functions) \nMust be a student-developed procedure\n\n\n\n\n\nAssesses students’ ability to implement and apply an algorithm. (Skill Algorithms and Program Development) \n\n\n\n\n\nAssesses students’ ability to investigate the situation, context,or task. (Skill Computational Solution Design - testing) \n\n\n\n\n\nCollaboration happens when two or more students are actively engaged in the development of a program. Some examples of acceptable ways to collaborate are as follows.\n\n2 students who are writing the entire program together, perhaps using pair programming.\n2 or more students who have divided a larger, more complex program into different separate parts, each writing their own part and then assembling the pieces into the finished program.\nStudent(s) giving feedback on an independently or collaboratively written program.\nStudent(s) providing debugging assistance to another student or collaborative group of students.\n\nDel Norte Computer Science Principles Teachers want to see all of these prescribe methods of collaboration utilized.\n\n\n\nIf students are combining independently written program code with another student, they should cite that the program code is written by a collaborative peer. To protect the anonymity of the collaborative peer, students simply state that the portion of program code was written by their collaborative peer, rather than putting the names of themselves or their collaborative peer in the program code.\nWhen completing the Create performance task, students will need to add substantial revisions and additional functionality when starting with preexisting program code. Simply changing an image in a game or the names of variables is insufficient.\nDel Norte Computer Science Principles Teachers have zero tolerance for plagiarism. Misrepresenting your own work and not attending class (without makeup) are the only ways to get less than 70% in the class. Plagiarism is 0%, being in class is 50%, any individual effort with attendance gets 70%. The biggest jeopardy to getting a bad grade in the class is getting a 0%, the only possibility of such is plagiarism or missing class without makeup."
  },
  {
    "objectID": "blog/posts/2022-09-05-AP-create_performance_task.html#additional-resources",
    "href": "blog/posts/2022-09-05-AP-create_performance_task.html#additional-resources",
    "title": "College Board Create Performance Task",
    "section": "Additional Resources",
    "text": "Additional Resources\n\n2021 Scoring Guidelines and Scored Create Task Examples\n\nPlease note, these scoring guidelines were for 2021. Please check the CollegeBoard website in case there is an updated version.\n\nAP Computer Science Principles Course and Exam Description\n\nCreate Performance Task Verbs Explanation (pg 175 of Course/Exam Description)\n\nThe CollegeBoard AP Computer Science Principles Course includes videos scoring Create Task Examples\n\nScoring examples\n\nCollegeBoard’s Tips on the Create Task\n\nInformation on written responses starts here"
  },
  {
    "objectID": "blog/posts/2022-09-05-AP-create_performance_task.html#hacks",
    "href": "blog/posts/2022-09-05-AP-create_performance_task.html#hacks",
    "title": "College Board Create Performance Task",
    "section": "Hacks",
    "text": "Hacks\n\nStart an outline on how you will prepare for the Create Performance Task project. - Review How I got a 5, by Bria - Establish a personal or pair Scrum Board with active and future Issues - Start a design that _post that can be reviewed to see if it meets the basicCreate Performance Task requirements. Be sure to pick something that you don’t burn out on or is not overly common."
  },
  {
    "objectID": "blog/posts/2022-10-10-PT-internet_connection.html",
    "href": "blog/posts/2022-10-10-PT-internet_connection.html",
    "title": "Internet Connections",
    "section": "",
    "text": "Cancelled"
  },
  {
    "objectID": "blog/posts/2022-10-10-PT-internet_connection.html#plans-week-8",
    "href": "blog/posts/2022-10-10-PT-internet_connection.html#plans-week-8",
    "title": "Internet Connections",
    "section": "Plans Week 8",
    "text": "Plans Week 8\n\nDiscussing the internet, connection using API, and work on final project - Monday: Live Review, Test Prep - Tuesday: Live Review, Career Tech - Wednesday: Code, Code, Code - Thursday: Code, Code, Code - Friday: Code, Code, Code\n\n\nAP Prep\n\nBig Idea 4.1 - Blog about the videos and questions on this section in AP Collegeboard - Create a diagram to show computer system and networks\n\n\n\nAPI Frontend to Backend Overview\n\nUsing API on multiple systems - Complete debugging of python flask - Create a html table in your fastpages using an API - Discuss plans to incorporate the given code into your group project\n\n\n\nFinal Project Progress\n\nCheck in on final project - Present completed elements, issues, and next steps of your project"
  },
  {
    "objectID": "blog/posts/2022-10-10-PT-internet_connection.html#live-grading-presentation.",
    "href": "blog/posts/2022-10-10-PT-internet_connection.html#live-grading-presentation.",
    "title": "Internet Connections",
    "section": "Live Grading Presentation. ",
    "text": "Live Grading Presentation. \n\nWe will follow 3 to 4 team review format.\n- Observers will grade up to .9/1 X 3 on each of the elements mentioned above (2 individual and 1 team). Be sure to total up to 2.7/3 - Observers will note anything that was completed that is not mentioned in the outline. This needs to be tangible!!! If student met 2.7 standard, then extra items can make score 2.7+."
  },
  {
    "objectID": "blog/posts/2022-11-14-PT-tri2_tools_cb.html",
    "href": "blog/posts/2022-11-14-PT-tri2_tools_cb.html",
    "title": "Week of 11-14, Tri 2 Into, Tools and Issues",
    "section": "",
    "text": "Weeks Plans - Monday: Check #announcements daily, Form Teams, Pick Teaching Topic, GDP, Setup Team, Carry over or establish new Projects and Team repositories, Establish scrum board . Teachers will have very little tolerance for tools that are not working!!! Verify Tools, Fastpages Kernels, WSL, and Anaconda as applicable (Due Friday). - Tuesday: Binary Logic and Abstractions review, Harvard CS50 minute 0 to minute 50 to provide background on binary, complete all 50 minutes recommended - Wednesday: Substitute, Work Day - Thursday: Lesson Points, Lesson Homework, Tour/highlights of Binary Code 10 minutes, Work Day - Friday: *Tools and Lesson Plan/Issues Verification Due"
  },
  {
    "objectID": "blog/posts/2022-11-14-PT-tri2_tools_cb.html#trimester-2-pre-holiday-objectives",
    "href": "blog/posts/2022-11-14-PT-tri2_tools_cb.html#trimester-2-pre-holiday-objectives",
    "title": "Week of 11-14, Tri 2 Into, Tools and Issues",
    "section": "Trimester 2 Pre-Holiday Objectives",
    "text": "Trimester 2 Pre-Holiday Objectives\n\nUnit 2 and Unit 3 mastery. - Students needs to master Big Idea 3 Algorithms and Programming from College Board online curriculum prior to winter break. - Students should master Unit 2, topics 2.1, 2.3, and 2.4 before winter break. - Teams will share a lesson. - Every team must present and be clearly involved in preparation. Review tickets are required for each student with links to tangibles. - In lesson preparation and teaching students should try to use Binary as data in lessons. All algorithms need data and there are many applications of Binary that can support the Algorithms from College Board Unit 3 - Exceptions can be made to Binary. But, this must be discussed with Teacher in advance. - Students will be working with Fastpages, Jupyter Notebooks: Python, JavaScript kernels. Additionally, students will work in Frontend JavaScript code in Fastpages Markdown files (see Frontend Examples. - Through the Trimester students will be expected to *present Fastpages/Blog with Homework assignments and one-to-many Frontend JavaScrip web applications."
  },
  {
    "objectID": "blog/posts/2022-11-14-PT-tri2_tools_cb.html#trimester-2-post-holiday-objectives",
    "href": "blog/posts/2022-11-14-PT-tri2_tools_cb.html#trimester-2-post-holiday-objectives",
    "title": "Week of 11-14, Tri 2 Into, Tools and Issues",
    "section": "Trimester 2 Post-Holiday Objectives",
    "text": "Trimester 2 Post-Holiday Objectives\n\nCreate Performance Task completed. - After additional Data and Algorithm mastery in initial 5 weeks of trimester… students and teams will transition to “Create Performance Task” projects. 12 hours of class time will be allocated to this task over the final 7 weeks. Additionally, you will use this project in Trimester 2 N@tM presentations.\n- Be sure to have an interactive portion to this project, this is key to College Board Video and N@tM presentations. - During the 7 weeks we will be learning more about APIs, creating Frontend forms, storing forms in Databases, posting comments, uploading (images) and continuing with likes. As we transition to Trimester 3 we will creating user login and site security. - Plan your Create Performance Task with these features in mind. FYI, 1-4 people can work on a project, but everyone must have there own feature that represents all the College Board requirements. - We will have Tech Talks in Career Tech, AP Test and Human Development during the last 7 weeks."
  },
  {
    "objectID": "blog/posts/2022-11-14-PT-tri2_tools_cb.html#tools-and-issue-verification-3-points",
    "href": "blog/posts/2022-11-14-PT-tri2_tools_cb.html#tools-and-issue-verification-3-points",
    "title": "Week of 11-14, Tri 2 Into, Tools and Issues",
    "section": "Tools and Issue Verification (3 points)",
    "text": "Tools and Issue Verification (3 points)\n\nSummary of Points. - Individual Tools Verification, VSCode, JavaScript and Python Kernels working on Laptop/Desktop. “Python Jupyter Notebook” and “Javascript Fastpages Markdown files will be key technical platforms. If you have problems currently, go back and re-install tools from 1st trimester guide. Be sure VS Code is running out of Anaconda environment. Perform make server to pretest prior to commits. Show running code in Fastpages for Binary Markdown and FastPage Python. - Each member of team pick a different hack or pair program 2 hacks. Create Individual Issue with checkboxes. This should be planned in Individual FastPages. However, you should plan a hack that is beneficial to topic that you will be Teaching. Consider this individual research."
  },
  {
    "objectID": "blog/posts/2022-11-14-PT-tri2_tools_cb.html#lesson-plans-and-presentation-7-points-.-recording-will-be-in-parts",
    "href": "blog/posts/2022-11-14-PT-tri2_tools_cb.html#lesson-plans-and-presentation-7-points-.-recording-will-be-in-parts",
    "title": "Week of 11-14, Tri 2 Into, Tools and Issues",
    "section": "Lesson Plans and Presentation, (7 points) . – recording will be in parts",
    "text": "Lesson Plans and Presentation, (7 points) . – recording will be in parts\n\nPlan Individual Binary Logic and Abstraction Hacks. Each member of team pick a different hack or pair program 2 hacks. Create Individual Issue with checkboxes. Topics for Hacks are in Binary Logic and Algorithms Blog. Build all hacks that you interpret as valuable/required for your lesson plan!!! Consider redesign of screen or if you will build many different Markdown files for each hack. Plan to leave challenge when providing lesson.\nPlan Team Lesson and Issue(s), requires checkboxes!!!\n\nPlanning and Presenting Lesson 4 points\n\nPlanning. Issues used in preparation and tangibles completed in individual portions of work.\nTopic, presentation quality and expertise. Make sure you watch College Board videos on material, become expert on ideas. Perform other research. Quality of reflecting material is key to points. Communicate to student key ideas and learnings needed.\nTechnicals and Data used. You must consider using Binary project or hacks to supplement teaching/learning of lesson material. Consider Career Tech blogs on Schedule as supplemental Topics/Hacks to the initial Binary Tech Talk. Coordinate with other Teams for the same week. Coordinate on Homework to make sure it is about 1.5 hours total, not on same hack. Be sure to emphasize Topics and Ideas with Technicals.\nAlgorithm and homework assignment. Objective in each lesson is to teach Algorithm and key Data topics at the same time. Make sure Frontend code is created from homework. Homework should be limited to 30 minutes a lesson, including activities or games. Remainder of class should be to start homework. Publish materials and receive homework on Comment page of blog where you signed up for lesson.\n\nGrading: 2 points. Plan to receive and grade homework. Set due date and be sure to grade within 2 to 3 days after Teaching.\n\nGrading participation. Each person will be grading ~10 homeworks.\n\nCompleteness and quality. Homework grading and presenting summary and scores to each student is key part to a lessons. Grade each student on 3 criteria, it will be worth 1 point total. Set expectations at 90% if the attempt/meet criteria. Plus or minus on adding or missing criteria. Any submit is about 80%, any participation is about 70%.\n\n\nGrading Summary: 1 point. Submit a summary of all grades and reflection to Teacher. Make it easy for Teacher to record and know work was complete."
  },
  {
    "objectID": "blog/posts/2022-10-03-PT-api.html",
    "href": "blog/posts/2022-10-03-PT-api.html",
    "title": "API",
    "section": "",
    "text": "Fixing errors and introduction to APIs - Monday: Live Review, Test Prep - Tuesday: Live Review, Career Tech - Wednesday: Career Tech - Thursday: Human Prep - Friday: Code, Code, Code\n\n\n\n\nCode Corrections - Make changes to the Error Testing code to get the expected outcomes - Continue to add AP exam pratice problems into your blog\n\n\n\n\n\nImplementing API - Add an example of API to your submenu\n\n\n\n\n\nBuild a plan for your final project - Key objective is to show Program Design - Create an outline for the design of your project, do not forget the 6 college board criteria"
  },
  {
    "objectID": "blog/posts/2022-10-03-PT-api.html#live-grading-presentation.",
    "href": "blog/posts/2022-10-03-PT-api.html#live-grading-presentation.",
    "title": "API",
    "section": "Live Grading Presentation. ",
    "text": "Live Grading Presentation. \n\nWe will follow 3 to 4 team review format.\n- Observers will grade up to .9/1 X 3 on each of the elements mentioned above (2 individual and 1 team). Be sure to total up to 2.7/3 - Observers will note anything that was completed that is not mentioned in the outline. This needs to be tangible!!! If student met 2.7 standard, then extra items can make score 2.7+."
  },
  {
    "objectID": "blog/posts/2022-08-22-PT-intro_python.html",
    "href": "blog/posts/2022-08-22-PT-intro_python.html",
    "title": "Introduction to Python",
    "section": "",
    "text": "Points Link"
  },
  {
    "objectID": "blog/posts/2022-08-22-PT-intro_python.html#daily-plans-week-1",
    "href": "blog/posts/2022-08-22-PT-intro_python.html#daily-plans-week-1",
    "title": "Introduction to Python",
    "section": "Daily Plans Week 1",
    "text": "Daily Plans Week 1\nDiscuss some concepts in Big Idea 3 Algorithms and Programming. Always Code/Code/Code in classroom when schedule allows! Practice Pair Programming Habit of 30 minutes/30 minutes/1 commit each and start of “Personal Computer Plan”. Here is a resource that can help you do a Python Overview, though use Jupyter Notebook and VSCode instead of the suggested IDLE. If you use this resource, try to create something that looks similar to their website; this will teach you how to design based off of what you see. - Monday: “Live Review” with pairs: show personal progress in setting up tools with Teacher. Doing checks with Bash Jupyter notebook. - Tuesday: Test Prep - Discuss Anatomy of Python.\n- Wednesday: Tech Talk - Fastpages, Jupyter Notebooks, Markdown : Tour of working on _posts and _notebooks. - Thursday: Tech Talk - Focus and Habits, video frm Yale. - Friday: Code/Code/Code - Pair Programming in Jupyter Notebook."
  },
  {
    "objectID": "blog/posts/2022-12-12-AP-unit3_14_to_15.html",
    "href": "blog/posts/2022-12-12-AP-unit3_14_to_15.html",
    "title": "Unit 3 Sections 14-15",
    "section": "",
    "text": "Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better"
  },
  {
    "objectID": "blog/posts/2022-12-12-AP-unit3_14_to_15.html#process-for-presenters",
    "href": "blog/posts/2022-12-12-AP-unit3_14_to_15.html#process-for-presenters",
    "title": "Unit 3 Sections 14-15",
    "section": "Process for Presenters",
    "text": "Process for Presenters\n\nUse “Comments” on this blog page to post materials for lesson\nBe sure to include “Period and Teacher” in instructions\nBe sure homework assignment, hacks and points/rubric are clearly described"
  },
  {
    "objectID": "blog/posts/2022-12-12-AP-unit3_14_to_15.html#process-for-individuals",
    "href": "blog/posts/2022-12-12-AP-unit3_14_to_15.html#process-for-individuals",
    "title": "Unit 3 Sections 14-15",
    "section": "Process for Individuals",
    "text": "Process for Individuals\n\nEach participating Team will post a shared review ticket with individual work clearly listed\nBe sure to include “Period, Teacher and Table” in review ticket\nCollaboration is encouraged but individual and unique work is required"
  },
  {
    "objectID": "blog/posts/2022-09-12-AP-colaboration.html",
    "href": "blog/posts/2022-09-12-AP-colaboration.html",
    "title": "Big Idea 1 ‘Collaboration’",
    "section": "",
    "text": "College Board Big Idea 1"
  },
  {
    "objectID": "blog/posts/2022-09-12-AP-colaboration.html#collaboration-unit-1.1",
    "href": "blog/posts/2022-09-12-AP-colaboration.html#collaboration-unit-1.1",
    "title": "Big Idea 1 ‘Collaboration’",
    "section": "Collaboration (Unit 1.1)",
    "text": "Collaboration (Unit 1.1)\n\nMake sure you can log in and have access to College Board materials. - Typically, I would say lightly review Videos. This topic is by Jason Han which is one of the CB Teacher I resonate with best. There is about 11 minutes of video and you need to understand Collaboration better. - Take notes on topics within your Blog. Highlight anything that sounds familiar. - Complete the assigned MCQ questions."
  },
  {
    "objectID": "blog/posts/2022-09-12-AP-colaboration.html#hacks",
    "href": "blog/posts/2022-09-12-AP-colaboration.html#hacks",
    "title": "Big Idea 1 ‘Collaboration’",
    "section": "Hacks",
    "text": "Hacks\n\nThis week is a good time to form the official Scrum Teams for the end of the Trimester project. This will be our last opportunity for adjustment. At this time, it is probably best to consider the questions or underlying thoughts alluded to in the MCQ… - Is my group setup strictly on the basis of current friends and common interests? - Is my group setup with diversity in backgrounds, gender, and perspectives? - Is my group best equipped for the skill sets needed for success in classroom?\n\nAny changes that are agreed upon by the tables and retain balance of numbers will likely be accepted."
  },
  {
    "objectID": "blog/posts/2022-07-08-PBL-graph.html",
    "href": "blog/posts/2022-07-08-PBL-graph.html",
    "title": "Graphing App",
    "section": "",
    "text": "{% include nav_frontend.html %}\n\n<header class=\"pb-3 mb-4 border-bottom border-primary text-dark\">\n    <span class=\"fs-4\">Graphing grid</span>\n</header>\n<div style=\"text-align:center;\">\n    <canvas id=\"canvas\" width=\"512\" height=\"384\" ></canvas>\n</div>"
  },
  {
    "objectID": "blog/posts/2022-09-05-PT-creative_development.html",
    "href": "blog/posts/2022-09-05-PT-creative_development.html",
    "title": "Creative Development Sprint",
    "section": "",
    "text": "Points Link"
  },
  {
    "objectID": "blog/posts/2022-09-05-PT-creative_development.html#hacks---live-grade-before-monday-am.",
    "href": "blog/posts/2022-09-05-PT-creative_development.html#hacks---live-grade-before-monday-am.",
    "title": "Creative Development Sprint",
    "section": "Hacks - Live Grade before Monday AM.",
    "text": "Hacks - Live Grade before Monday AM.\n\nThis is a big planning and prototype week, Build all things into Scrum Board. Individuals demonstrate progress on assigned Issue(s) and then complete Issue(s)with tangibles.\n- DO NOT show up to a review without a Issue(s), mostly referred to as a Review Ticket with links to Tangibles. - NEVER state that you don’t have an Issue or Commit because you were helping someone else. This statement will get you a 70% grade at best. - Provide Crossover and Self grade at the top of the Review Ticket. Anyone who rates their work above 90% must have something completed outside of the requirements. - GitHub Page and Jupyter notebooks makes it easy to have a link to your own tangible(s) in a working document. - A high quality Issue will reflect Ideation, Prototyping, Code. It is very easy to take 5 minutes a day to update your Issue before embarking into work. This is called Daily Planning. In fact, Daily Planning will help with your classroom focus  - A good way to progress above 90% is to show how you are becoming a Development Engineer.\n- Each Pair performs Review each week with crossover Pair, use review to see if Issue is complete - Crossover must make comments and grade within their comment, if individual has not done a crossover grade with comments they will receive 10% reduction on their score. - Individual grade and Crossover grade at top of Review Ticket is required. Make sure you do math on any rubrics provided, grade yourself on everything in the Canvas assignment, it does not matter what the vocabulary is around points and ownership. - If you score yourself higher than the grade you received from Crossover, show how you made adjustment/corrections. - Individual will need to discuss grading and reflection/learnings from crossover grading during their presentation. - Each Pair programming partnership should be prepared to complete their review with Teacher in about 2 minutes. Focus is on Creative Development. - Be prepared to talk and accept feedback. - Focus on Review Ticket, Demo, Issues(s) completed, Failures, and New Issues Created - Optimize time for where you are the same. - Individuals should each speak to their own differences - Think about your vocabulary!!! For instance, when you say development… know how it is different than coding."
  },
  {
    "objectID": "blog/posts/2022-12-12-PT-student_session3.html",
    "href": "blog/posts/2022-12-12-PT-student_session3.html",
    "title": "Week of 12-12, Student Teaching Week 3, Pop Live Reviews",
    "section": "",
    "text": "Weeks Plans - Monday: 3.14 and 3.15 Libraries and Random Values - Tuesday: 3.16 Simulations - Wednesday: work day, pop live reviews - Thursday: 3.17 and 3.18 Algorithm Efficiency and Undecidable Problems - Friday: Kick Ball, Pot Luck Picnic"
  },
  {
    "objectID": "blog/posts/2022-11-28-PT-student_session1.html",
    "href": "blog/posts/2022-11-28-PT-student_session1.html",
    "title": "Week of 11-28, Student Teaching Week 1",
    "section": "",
    "text": "Weeks Plans - Monday: 3.1 and 3.2 Variables, Assignments, and Data Abstractions - Tuesday: 3.3 and 3.4 Mathematical Expressions and Strings - Wednesday: work day - Thursday: 3.5-3.7 Boolean Expression, Conditionals, Nested Conditionals - Friday: work day"
  },
  {
    "objectID": "blog/posts/2022-12-13-AP-unit3_16.html",
    "href": "blog/posts/2022-12-13-AP-unit3_16.html",
    "title": "Unit 3 Sections 16",
    "section": "",
    "text": "Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better"
  },
  {
    "objectID": "blog/posts/2022-12-13-AP-unit3_16.html#process-for-presenters",
    "href": "blog/posts/2022-12-13-AP-unit3_16.html#process-for-presenters",
    "title": "Unit 3 Sections 16",
    "section": "Process for Presenters",
    "text": "Process for Presenters\n\nUse “Comments” on this blog page to post materials for lesson\nBe sure to include “Period and Teacher” in instructions\nBe sure homework assignment, hacks and points/rubric are clearly described"
  },
  {
    "objectID": "blog/posts/2022-12-13-AP-unit3_16.html#process-for-individuals",
    "href": "blog/posts/2022-12-13-AP-unit3_16.html#process-for-individuals",
    "title": "Unit 3 Sections 16",
    "section": "Process for Individuals",
    "text": "Process for Individuals\n\nEach participating Team will post a shared review ticket with individual work clearly listed\nBe sure to include “Period, Teacher and Table” in review ticket\nCollaboration is encouraged but individual and unique work is required"
  },
  {
    "objectID": "blog/posts/2022-10-17-HM-cte.html",
    "href": "blog/posts/2022-10-17-HM-cte.html",
    "title": "CTE",
    "section": "",
    "text": "Students in the Software and Systems Development pathway prepare for careers related to computer science that involve the design, development, implementation, maintenance, and management of systems that rely on software programs to satisfy the operational needs of modern business organizations. Persons with expertise in systems development and programming are critical to support operations like electronic commerce, medical records management, retail sales and inventory management, digital entertainment, and use of energy.\n\n\n\nComputer Programmer\nSoftware Developer/Applications\nInformation Security Analyst\nWeb Developer\nE-Business/E-Commerce Specialist\n\n\n\n\n\nIdentify and apply the systems development process.\nDefine and analyze systems and software requirements.\nCreate effective interfaces between humans and technology.\nDevelop software using programming languages.\nTest, debug, and improve software development work.\nIntegrate a variety of media into development projects.\nDevelop Web and online projects.\nDevelop databases.\nDevelop software for a variety of devices, including robotics.\nDevelop intelligent computing."
  },
  {
    "objectID": "blog/posts/2022-07-10-PBL-database.html",
    "href": "blog/posts/2022-07-10-PBL-database.html",
    "title": "Database CRUD Operations",
    "section": "",
    "text": "{% include nav_data.html %}\n\nDatabase API\n\n\n\n\n\n\nName\n\n\nID"
  },
  {
    "objectID": "blog/posts/2022-08-22-ap-python_hello.html",
    "href": "blog/posts/2022-08-22-ap-python_hello.html",
    "title": "Hello to Python",
    "section": "",
    "text": "These examples show the basic language structures and constructs of Python using print and input commands (aka anatomy).\n\n\nThe classic introduction to a programming language is to output a “Hello, World!” message. In Python, this is a print statement.\n- The command or function is print() - “Hello, World” is a String literal. This is the referred to as Static text, as it does not change. - “Hello, World” is a parameter to the print command. - The print command outputs the parameter to the terminal, as you see it in this Jupyter document - Output in Jupyter Notebook is below the code cell. Output will vary depending on tools and development intentions. Python print typically outputs to a terminal, we will see that when students start using Visual Studio Code.\n\nprint(\"Hello World!\")\n\n\n\n\nThis second example is a sequence of code, two or more lines forms a sequence. This example takes input from the user and stores the input into a variable called msg (short for message), then outputs the msg to terminal. - This example is Dynamic as the input and output can change each time the code is run. - A variable “msg” is part of both statement - The variable “msg” is used to capture the input command - The variable “msg” is then used as a parameter to print command, causing input to be output to terminal, or in Jupyter Notebook below the code cell. - The “input” command activates the jupyter notebook input box, which obtains input from the user (try it!) - the “msg” variable is the dynamic result of the input command - The print command outputs the “msg” variable captured in the input statement - note, msg is a parameter to the print function\n- Input and Output in Jupyter Notebook Input is NOT in line with Output, this is a little annoyance and requires familiarity. Input and Output will vary depending on tools and development intentions. Python print typically obtains input and outputs to a terminal, students will see that when they run Python programs using Visual Studio Code.\n\n#msg = input(\"Enter a greeting: \")\n#print(msg)\n\nhello\n\n\n\n\n\nThis example adds to the basics of the Python anatomy, a function. Input, output, and grouping commands in functions is the key to most programming languages. This example simulates a free response answer to a question.\n- The “def question_and_answer(prompt)” now contains multiple indented commands, the commands print and input were learned previously. - Grouping a sequence of commands, often used repeatedly, is called procedural abstraction. - Procedure, Function, def are all synonyms in the Python language. - The “def” is a key word in Python that defines a function. Using this keyword defines a group of commands, but does not run them initially. - The name of the function in this example is “question_and_answer”. In essence, we are defining our own command within the Python language. - The three “question_and_answer” commands that follow the function and indented commands allow this function to be run. - This code of the function is then run multiple times, each command line providing a unique “prompt” as a result of the literal parameter passed to the function. - The function takes a parameter called “prompt”, which is a message output to the user to describe the input requested.\n- String concatenation “+” prefixes the prompt with the literal message “Question:”. - The “msg” variable is captured as a result of the jupyter notebook input supplied by the user - The input “msg” is output back to the user with “Answer:” concatenated to the front.\n\n# def question_and_answer(prompt):\n#     print(\"Question: \" + prompt)\n#     msg = input()\n#     print(\"Answer: \" + msg)\n\n# question_and_answer(\"Name the Python output command mentioned in this lesson?\")\n# question_and_answer(\"If you see many lines of code in order, what would College Board call it?\")\n# question_and_answer(\"Describe a keyword used in Python to define a function?\")\n\n\n\n\nIn Python anatomy of you will be importing libraries and functions. This is code that is developed by others. In this example we are importing from a library called “os”, this library extracts properties from the operating system of your existing system. Additionally, this example uses the custom function defined earlier in the Jupyter document. Python and Jupyter docs requires you to reference imports and definitions above the referencing line of code. - import os, sys obtain functions and variables from running environment - print(‘Hello,’ + getpass.getuser() + ” running ” + sys.executable + ” on ” + sys.platform + “!”), is a concatenated statement that outputs properties from the import\nNext, this example defines a new function “question_with_response”, this function returns a value input by the user. This allows programmer to evaluate the response. The purpose of obtaining the return value is to evaluate if correct response was given to the question. - response from “question_with_response” is captured in a variable called “rsp” - return command in function returns msg input by user - assignment to “rsp” is allowed a function is returning a value, names do not need to match (but could) - if command is next command in sequence after “rsp” assignment - this command contains an expression, rsp == “import” which compare what is typed to the string literal answer - an if expression is evaluated for true or false - true takes branch of code directly under if - false takes branch of code directly under else command\nThe grand finally of this example is calculating the right/total. - question = 3 is defined as number of questions - correct = 0 is defined as running score - correct += 1 is the way to add one to the score, this code is placed in sequence under correct expression evaluation - since question and correct are numbers, versus strings, to place them in concatenation in print statements you must inclose them in Python function str() which turns number into string. - final print statement is concatenated and formatted to give user and right over wrong\n\n# import getpass, sys\n\n# def question_with_response(prompt):\n#     print(\"Question: \" + prompt)\n#     msg = input()\n#     return msg\n\n# questions = 3\n# correct = 0\n\n# print('Hello, ' + getpass.getuser() + \" running \" + sys.executable)\n# print(\"You will be asked \" + str(questions) + \" questions.\")\n# question_and_answer(\"Are you ready to take a test?\")\n\n# rsp = question_with_response(\"What command is used to include other functions that were previously developed?\")\n# if rsp == \"import\":\n#     print(rsp + \" is correct!\")\n#     correct += 1\n# else:\n#     print(rsp + \" is incorrect!\")\n\n# rsp = question_with_response(\"What command is used to evaluate correct or incorrect response in this example?\")\n# if rsp == \"if\":\n#     print(rsp + \" is correct!\")\n#     correct += 1\n# else:\n#     print(rsp + \" is incorrect!\")\n\n# rsp = question_with_response(\"Each 'if' command contains an '_________' to determine a true or false condition?\")\n# if rsp == \"expression\":\n#     print(rsp + \" is correct!\")\n#     correct += 1\n# else:\n#     print(rsp + \" is incorrect!\")\n\n# print(getpass.getuser() + \" you scored \" + str(correct) +\"/\" + str(questions))"
  },
  {
    "objectID": "blog/posts/2022-08-22-ap-python_hello.html#hacks",
    "href": "blog/posts/2022-08-22-ap-python_hello.html#hacks",
    "title": "Hello to Python",
    "section": "Hacks",
    "text": "Hacks\nTest running a Python file directly - From python directory run quiz.py in VS Code, this will show workflow of Input and Output in terminal\nBuild your own Jupyter Notebook meeting these College Board and CTE competencies - Build your own quiz, including my questions and show outputs - Create both Markdown for description and Code for execution - Structure your Python code with comments “#” to complement Markdown descriptions\nAdditional requirements - Build your quiz so that it captures the key Vocabulary from this Jupyter document - Calculate the percentage of your quiz - Review College Board Big Idea outline, see if you can reference locations in Markdown that support vocabulary\nExtra credit, Advanced - Do you see repeating pattern of code? Try to implement solution to avoid the repeating pattern (hint: list and iteration)"
  },
  {
    "objectID": "blog/posts/2022-12-06-AP-unit3_9_and_11.html",
    "href": "blog/posts/2022-12-06-AP-unit3_9_and_11.html",
    "title": "Unit 3 Sections 9 and 11",
    "section": "",
    "text": "Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better"
  },
  {
    "objectID": "blog/posts/2022-12-06-AP-unit3_9_and_11.html#process-for-presenters",
    "href": "blog/posts/2022-12-06-AP-unit3_9_and_11.html#process-for-presenters",
    "title": "Unit 3 Sections 9 and 11",
    "section": "Process for Presenters",
    "text": "Process for Presenters\n\nUse “Comments” on this blog page to post materials for lesson\nBe sure to include “Period and Teacher” in instructions\nBe sure homework assignment, hacks and points/rubric are clearly described"
  },
  {
    "objectID": "blog/posts/2022-12-06-AP-unit3_9_and_11.html#process-for-individuals",
    "href": "blog/posts/2022-12-06-AP-unit3_9_and_11.html#process-for-individuals",
    "title": "Unit 3 Sections 9 and 11",
    "section": "Process for Individuals",
    "text": "Process for Individuals\n\nEach participating Team will post a shared review ticket with individual work clearly listed\nBe sure to include “Period, Teacher and Table” in review ticket\nCollaboration is encouraged but individual and unique work is required"
  },
  {
    "objectID": "blog/posts/2022-11-07-ap-logic-and-algos.html",
    "href": "blog/posts/2022-11-07-ap-logic-and-algos.html",
    "title": "Algorithms and Logic",
    "section": "",
    "text": "An algorithm typically means ‘code’ that solves a problem. Designing an algorithm often requires you to learn the Tech first and then consider how you design your code and algorithms. Code design can take many iterations."
  },
  {
    "objectID": "blog/posts/2022-11-07-ap-logic-and-algos.html#truth-tables",
    "href": "blog/posts/2022-11-07-ap-logic-and-algos.html#truth-tables",
    "title": "Algorithms and Logic",
    "section": "Truth Tables",
    "text": "Truth Tables\n\nMy topic for this blog is Truth Tables. The illustration that follows displays the results of logical operators AND, OR, XOR, NOT versus binary 1 and 0. The output produces a ‘Truth Table’.\n\n\n\nExploring Truth Tables operations\n\nExploration of this topic requires searching the language for logical operators, then figuring out how to display condition and test result. - Bitwise operations for Truth Tables typically represent 1 - True and 0 - False. - Logical expression in iteration and selection statements result in True or False\n\n\nMy objective is Truth Tables. But in my exploration I did both Truth Table and Expression syntax\n\n\n# Bitwise Tests\nprint(\"OR\")\nprint( \"1 | 0 = \", 1 | 0)\nprint( \"~(1 | 0) = \", ~(1 | 0) % 2)  # 1 is an integer, not a bit so remainder (modulo) does trick\nprint(\"AND\")\nprint( \"1 & 0 = \", 1 & 0)\nprint( \"~(1 & 0) = \", ~(1 & 0) % 2)  # modulo again\nprint(\"XOR\")\nprint( \"1 ^ 1 = \", 1 ^ 1)\nprint()\n\n# Boolean Tests\nprint(\"Boolean OR\")\nprint( \"True or False = \", True or False)\nprint(\"Boolean AND\")\nprint( \"True and False = \", True and False)\nprint(\"Boolean XOR\")\nprint( \"True != True = \", True != True)\n\nOR\n1 | 0 =  1\n~(1 | 0) =  0\nAND\n1 & 0 =  0\n~(1 & 0) =  1\nXOR\n1 ^ 1 =  0\nBoolean OR\nTrue or False =  True\nBoolean AND\nTrue and False =  False\nBoolean XOR\nTrue != True =  True\n\n\n\n\nAlgorithm 1\n\nThis algorithm focuses on small reusable procedures/functions (def) for bitwise tests. From the exploratory experience above it seems like a lot of typing would be necessary to represent possibilities.\n\n\nimport operator  # functions for all comparisons, logical operations, mathematical operations and sequence operations\n\n# builds truth table\ndef truth_options():\n    a_opts = [1, 0]\n    b_opts = [1, 0]\n    return [(a, b) for a in a_opts for b in b_opts]  # double for permutes options\n\n# provides equivalent function lookup for bitwise using operator functions\ndef bitwise_options(op):\n    ops = {'&': operator.and_,\n           '|': operator.or_,\n           '^': operator.xor}\n    return ops[op]\n\n# control/eval for bitwise operators, selection is based on number of operators\ndef bitwise_eval(op, op2=\"\"):\n    if op2 == \"\":\n        op_func = bitwise_options(op)\n        print(f\"Bitwise {op}\")\n        for a, b in truth_options():\n            print(f\"{a} {op} {b} is {op_func(a, b)}\")\n    else:\n        op2_func = bitwise_options(op2)\n        print(f\"Bitwise {op}\")\n        for a, b in truth_options():\n            print(f\"{op}({a} {op2} {b}) is {(1, 0)[op2_func(a, b)]}\")  # opposite: index 0 returns 1, index 1 return 0\n\ndef method1():\n    bitwise_eval(\"&\")\n    bitwise_eval(\"NAND\", \"&\")\n    bitwise_eval(\"|\")\n    bitwise_eval(\"NOR\", \"|\")\n    bitwise_eval(\"^\")\n\n# call bitwise evaluation of truth table\nif __name__ == \"__main__\":\n    print(\"***** Method 1 *****\")\n    method1()\n\n***** Method 1 *****\nBitwise &\n1 & 1 is 1\n1 & 0 is 0\n0 & 1 is 0\n0 & 0 is 0\nBitwise NAND\nNAND(1 & 1) is 0\nNAND(1 & 0) is 1\nNAND(0 & 1) is 1\nNAND(0 & 0) is 1\nBitwise |\n1 | 1 is 1\n1 | 0 is 1\n0 | 1 is 1\n0 | 0 is 0\nBitwise NOR\nNOR(1 | 1) is 0\nNOR(1 | 0) is 0\nNOR(0 | 1) is 0\nNOR(0 | 0) is 1\nBitwise ^\n1 ^ 1 is 0\n1 ^ 0 is 1\n0 ^ 1 is 1\n0 ^ 0 is 0\n\n\n\n\nTruth Table - Algorithm 2\n\nThis algorithm above seemed to me to lose clarity with all the functions. The second attempt focuses on truth tables as a linear sequence, with loops for required repetitions. This seemed more understandable to me than my 1st attempt.\n\n\n# each bitwise operator is iterated through truth table \ndef method2():\n    truth_table = [[1,1], [1,0], [0,1], [0,0]]\n    for a, b in truth_table:\n        print(f\"and {a} & {b}: {a & b}\")\n    for a, b in truth_table:\n        print(f\"nand ~({a} & {b}): {((a & b) + 1) % 2}\") # warning: ~ negates entire integer without modulo\n    for a, b in truth_table:\n        print(f\"or {a} | {b}: {a | b}\")\n    for a, b in truth_table:\n        print(f\"nor ~({a} | {b}): {((a | b) + 1) % 2}\")  # warning: see above\n    for a, b in truth_table:\n        print(f\"xor {a} ^ {b}: {a ^ b}\")\n\n\n# call bitwise evaluation of truth table\nif __name__ == \"__main__\":\n    print(\"***** Method 2 *****\")\n    method2()\n\n***** Method 2 *****\nand 1 & 1: 1\nand 1 & 0: 0\nand 0 & 1: 0\nand 0 & 0: 0\nnand ~(1 & 1): 0\nnand ~(1 & 0): 1\nnand ~(0 & 1): 1\nnand ~(0 & 0): 1\nor 1 | 1: 1\nor 1 | 0: 1\nor 0 | 1: 1\nor 0 | 0: 0\nnor ~(1 | 1): 0\nnor ~(1 | 0): 0\nnor ~(0 | 1): 0\nnor ~(0 | 0): 1\nxor 1 ^ 1: 0\nxor 1 ^ 0: 1\nxor 0 ^ 1: 1\nxor 0 ^ 0: 0\n\n\n\n\nLinear Sequence of code\n\nThe order of executions is strictly from top to bottom. This is good for learning, but is typically a poor method for an Algorithm! This was my 1st exploration above.\n\n\n\nProcedure (Function)\n\nA Procedure is a set of code instructions that has been abstracted into logical parts. Each code abstraction is called “Procedural Abstraction”.\n- In Python, using procedures (def) means you are starting to write “good” code vs “bad” code, mostly in terms of reusability of logic. - A procedure needs to be activated or called, this is performed in the main selections above.\n\n\n\nHacks\n\nAs we explore the algorithm Unit students will be designing lessons and homework. Each lesson will have Hacks. Here are some hacks that could go with the lesson above. The three weeks after Thanksgiving will be focused on this activity and build personal portfolio.\n\n\nTry to build a Truth Table as shown above in Python, but switch to JavaScript… - Begin by showing understanding of problem using console.log, this problem can be done in Jupyter Notebook - Build a Truth Table in JavaScript showing output in HTML, this problem is best in FastPages\n\n\nPick your Algorithmic hack, build in Python and JavaScript. Here are some ideas.. - Binary to Hexadecimal to Decimal conversions - Fibonacci - Palindrome - Other\n\n\nCome up with a Procedure/Function that show…\n- Data Abstraction - Procedural Abstraction - Algorithm using iteration and selection - Frontend / Backend, using an API and persistent storage"
  },
  {
    "objectID": "blog/posts/2022-11-07-PT-finals.html",
    "href": "blog/posts/2022-11-07-PT-finals.html",
    "title": "Finals Week",
    "section": "",
    "text": "Finals Week Close the book on AP Study - Monday: Work Day - Tuesday, Wednesday, Thursday: MCQ Test and blog - Friday: No School"
  },
  {
    "objectID": "blog/posts/2022-11-07-PT-finals.html#final-exam-3-points",
    "href": "blog/posts/2022-11-07-PT-finals.html#final-exam-3-points",
    "title": "Finals Week",
    "section": "Final Exam (3 points)",
    "text": "Final Exam (3 points)\n\nSummary of Points - 1.8 of 2 points for scoring above 50% - 1 point on blog"
  },
  {
    "objectID": "blog/posts/2022-11-07-PT-finals.html#extra-credit-review-and-makeups-must-be-complete-before-eod-thu",
    "href": "blog/posts/2022-11-07-PT-finals.html#extra-credit-review-and-makeups-must-be-complete-before-eod-thu",
    "title": "Finals Week",
    "section": "Extra Credit Review and Makeups must be complete before EOD Thu",
    "text": "Extra Credit Review and Makeups must be complete before EOD Thu\n\nPosters is an example"
  },
  {
    "objectID": "blog/posts/2022-11-07-PT-finals.html#coding-for-extra-credit",
    "href": "blog/posts/2022-11-07-PT-finals.html#coding-for-extra-credit",
    "title": "Finals Week",
    "section": "Coding for Extra Credit",
    "text": "Coding for Extra Credit\n\nThere are always opportunities to show understanding of coding. This weekend I was observing World-O-Meter. How would you do this with our group projects.\n\n\nStep 1 - JavaScript document element updates\nBelow is a code segment that updates a clock on a page every second, adaptation would be to update data from API fetch on an interval, then updating all document elements after fetch.\n// Clock Control\n// clockElement global element set for convenience\nlet clockElement = document.getElementById('clock')\n// Execute clock function on load\nclock();\n// Clock update executes on each interval set by timer\nfunction clock() {\n    let date = new Date();\n    clockElement.textContent = date.toLocaleString();\n}\n// Clock refresh timer, a reoccurring event\nsetInterval(clock, 1000);\n\n\nStep 2 - JavaScript update backend content\nTo make the updates document elements meaningful you would need to have an interval to update the Haha or Boohoo content. This could be done in same or different JavaScript timer. This would be calling appropriate fetch in add to the counters. Together, these would give the same effect as the World-O-Meter.\n\n\nStep 2 (Python Option) - update backend content\n\nInstead of having frontend update counter, you could have backend update the counter. The below could be adapted to purpose.\n\nimport threading  # import threading\n\ndef keepUpdating(): # build a function to run over and over\n# global variable setup\nglobal run  \ntry: run\nexcept: run = 0\n\nprint(\"Seconds:\", run)  # replace this line with updates to data\nrun += 3  # this is update to global variable\nthreading.Timer(3.0, keepUpdating).start()\n\nkeepUpdating()  # you need to call this function at application startup\n\n\nStep 2 (Bash Option) - do updates on server\n\nUpdate content using curl and scheduling on the system. To make a PUT request with Curl, you need to use the -X PUT command-line option.\n\n$ curl -X PUT localhost:8080/api/like/1\n\nThis command would need to be added to crontab or a bash script and crontab to run repeatedly.\n\n$ crontab -l\n# Edit this file to introduce tasks to be run by cron.\n# \n# Each task to run has to be defined through a single line\n# indicating with different fields when the task will be run\n# and what command to run for the task\n\n\nAutomatic Deployment for Extra Credit\n\nChange AWS Spring Deployment to be automatic Student Reference GitHub Actions"
  },
  {
    "objectID": "blog/posts/2022-12-01-AP-unit3_5_to_7.html",
    "href": "blog/posts/2022-12-01-AP-unit3_5_to_7.html",
    "title": "Unit 3 Sections 5-7",
    "section": "",
    "text": "Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better"
  },
  {
    "objectID": "blog/posts/2022-12-01-AP-unit3_5_to_7.html#process-for-presenters",
    "href": "blog/posts/2022-12-01-AP-unit3_5_to_7.html#process-for-presenters",
    "title": "Unit 3 Sections 5-7",
    "section": "Process for Presenters",
    "text": "Process for Presenters\n\nUse “Comments” on this blog page to post materials for lesson\nBe sure to include “Period and Teacher” in instructions\nBe sure homework assignment, hacks and points/rubric are clearly described"
  },
  {
    "objectID": "blog/posts/2022-12-01-AP-unit3_5_to_7.html#process-for-individuals",
    "href": "blog/posts/2022-12-01-AP-unit3_5_to_7.html#process-for-individuals",
    "title": "Unit 3 Sections 5-7",
    "section": "Process for Individuals",
    "text": "Process for Individuals\n\nEach participating Team will post a shared review ticket with individual work clearly listed\nBe sure to include “Period, Teacher and Table” in review ticket\nCollaboration is encouraged but individual and unique work is required"
  },
  {
    "objectID": "blog/posts/2022-10-17-PT-project_week_1.html",
    "href": "blog/posts/2022-10-17-PT-project_week_1.html",
    "title": "Project Week 1",
    "section": "",
    "text": "Focus on PBL - Commitment to your Agile Development process and tangibles. - Monday: Review CB 4.1 and Blog - Tuesday: Code, Code, Code, Live Review - Wednesday: Career Tech, Live Review - Thursday: Show FE to BE working, Script for Video - Friday: Code, Code, Code"
  },
  {
    "objectID": "blog/posts/2022-10-17-PT-project_week_1.html#team",
    "href": "blog/posts/2022-10-17-PT-project_week_1.html#team",
    "title": "Project Week 1",
    "section": "Team",
    "text": "Team\n\nPrepare for Teacher project audit. Also, analysis of the following will speed Scrum Team plan, work, improve quality, and make a better N@tM final.\n\n\nAPI Frontend to Backend Overview\n\nShow demo of work in progress.\n- Must Using API across multiple systems - Create a HTML Frontend table or view fetching from Backend using an Flask API - Show Flask API using RapidAPI - Impressive/Extra show Debugging in video\n\n\n\nScrum Master\n\nDescribe Program Purpose and Function. Also, highlight key system used to track, collaborate and review software. - Identify and Apply a Software Development process.\n- Describe your Software Development Life Cycle - Describe how you plan, track sprints, track features, track milestones, and assign versions. - Highlight Agile process: research, design, coding, testing, review, repeat. - Define and analyze systems and software requirements. - Define Computer Systems you have or will develop. - Indicate Tools or Automation you will use improve tracking requirements (ie Project/Scrum Board). - Define strategies that enable Team to target the specific needs of the customer (ie Product Owner). Describe meetings, demos, and how you collect feedback.\n- Test and Demo Software during each Sprint - Consider using GitHub Issues to support this process. - Develop and describe expectations of each feature. - Use feature, expected outcome, and the minimal amount of code each feature. - Document accomplishment with tangible evidence. - Have feature reviews, demos, and obtain feedback (team and/or customer) - Update and derive new features and tasks for next step in Software Development Life Cycle - My suggestion is this person helps with Frontend development\n\n\n\nFrontend Developer\n\nDescribe Frontend designs and coding techniques.\n- Create and implement an effective frontend between humans and technology - Show frontend design artifacts (wire frames) - Describe any consideration you have made for customer requirements. - Indicate accommodations you have made for English Language Learners or those with Disabilities - Show any screens that are currently developed. - Describe Code and Styles Frontend development - HTML, Markdown, JavaScript - Cards, Tables, Blogging - Comments. Be sure to illustrate developers comments in code and how this will facilitate current and future understanding of the key portions of system.\n\n\n\nDevOps Engineer\n\nDescribe the technical systems and processes used to ensure the ability to do continuous updates and integration of software. - Describe software and programming tools - Identify authoring tools (IDE’s, Docker, GitHub) used - Describe and/or show visuals of interactions and integration of programming languages, protocols, and data within project. For instance, deployed systems of Docker Images, Nginx, DNS hosting the application. - Describe and/or illustrate key Web Applications, APIs, and dependency systems that will be required to complete this system (Diagram). - Describe GitHub branch management and sociology used to ensure ability to perform continuous builds and integrations. - GitHub projects - Branching Strategies - Deployment processes and automation - Describe how to validate and test the complete system - My suggestion is this person helps with Backend development\n\n\n\nBackend Developer\n\nDescribe backend coding and requirements. - Develop data, data types, databases, and APIs. - Identify authoring tools (IDE’s, Postman) used. - Describe and/or illustrate key data types, data structures (Lists, Dictionaries), objects, files, or databases that will be used (Flow Chart/UML). - Describe use of Lists or Dictionaries, database, tables, attributes, records, and systems of access (JSON, Lists, Dictionaries). - Comments. Be sure developers use comments in code to facilitate current and future understanding of the key portions of system.\n\n\n\nHacks (Video 2). Recommend… Minimize talking, minimize mouse movements, and share Tangibles.\n\nMake a less than 4 minute video. Each individual should talk in video, code, and make their part of the video. Consider crossing over to other tables and share methods and methodologies of those working on similar roles. - Scrum Master should make sure all things come together.\n- DevOps should ensure there is a working project to Demo at all times. - Everyone should complete their part(s). - Everyone should help other Team Members when struggling."
  },
  {
    "objectID": "blog/posts/2022-10-24-javascript-input-tutorial.html",
    "href": "blog/posts/2022-10-24-javascript-input-tutorial.html",
    "title": "Javascript Inputs using a Grade Calculator",
    "section": "",
    "text": "The code segment below builds the container for the output and input for the grade calculator.\nRead more here\n\n    <!-- <div class=\"form-group row\">\n        Total : <span id=\"total\" class=\"label label-primary\">0.0</span>\n        Count : <span id=\"count\" class=\"label label-primary\">0.0</span>\n        Average : <span id=\"average\" class=\"label label-primary\">0.0</span>\n    </div>\n    <!-- Rows -->\n    <div class=\"form-group row\">\n        Input scores, press tab to add new number:\n        <div id=\"scores\">\n            <input onblur=\"calculator()\" type=\"text\" name=\"score\" id=\"score0\"/><br>\n            <!-- javascript generated inputs -->\n        </div>\n    </div>\n</form>"
  },
  {
    "objectID": "blog/posts/2022-09-19-AP-program_purpose.html",
    "href": "blog/posts/2022-09-19-AP-program_purpose.html",
    "title": "Big Idea 1 ‘Program Purpose’",
    "section": "",
    "text": "College Board Big Idea 1"
  },
  {
    "objectID": "blog/posts/2022-09-19-AP-program_purpose.html#program-function-and-purpose-unit-1.2",
    "href": "blog/posts/2022-09-19-AP-program_purpose.html#program-function-and-purpose-unit-1.2",
    "title": "Big Idea 1 ‘Program Purpose’",
    "section": "Program Function and Purpose (Unit 1.2)",
    "text": "Program Function and Purpose (Unit 1.2)\n\nBecome familiar with Pseudo Code and style of questions. - Lightly Review Videos and take notes on topics with Blog - Complete assigned MCQ questions"
  },
  {
    "objectID": "blog/posts/2022-09-19-AP-program_purpose.html#hacks",
    "href": "blog/posts/2022-09-19-AP-program_purpose.html#hacks",
    "title": "Big Idea 1 ‘Program Purpose’",
    "section": "Hacks",
    "text": "Hacks\n\nNow is a good time to think about Program Function and Purpose of your teams final project… - Do we have final project ideas for a PBL Web Project? - Are we considering a project that is best for our educational purpose? - Is the project going to hold team members interest for 8 weeks? - Does the project have potential for someone to use it beyond the 8 weeks? ie Customer or Sponsor needed? - Does the project have potential to be used for Create Performance Task submission?"
  },
  {
    "objectID": "blog/posts/2022-11-14-AP-binary_logic.html",
    "href": "blog/posts/2022-11-14-AP-binary_logic.html",
    "title": "Binary Logic and Abstraction",
    "section": "",
    "text": "Algorithms, Data and Data Structures go together. It is required to have a data topic as you venture into Algorithms and Lessons. This blog is a collection of binary, data and data structures that should be your data topic!!! Use a data topic as you learn algorithms and programming. - Explore that topic in Computer Science manner (research, jupyter notebooks, frontend / backend coding) - Build a lesson that is more interesting, by explaining an algorithm and logic using a data topic. - Teach with examples… Segment from CS50 and go to minute 13:15. - Tour the Code. Use Binary Frontend Code to get you started. Better clone APCSP project drag and drop _posts/2022-07-07-PBL-binary.md to your project and Debug - This Tech Talk will finish by reviewing hacks, the remainder of this blog and Binary Frontend Code is part of your research."
  },
  {
    "objectID": "blog/posts/2022-11-14-AP-binary_logic.html#math-in-binary",
    "href": "blog/posts/2022-11-14-AP-binary_logic.html#math-in-binary",
    "title": "Binary Logic and Abstraction",
    "section": "Math in Binary",
    "text": "Math in Binary\n\nLearn binary by bitwise operators and more. Shifting bits is a common computer operation and does wonderful things in math like multiply and divide. Last bit always determines odd or even. Look for shift on w3schools\n\n\nLogic of Shift\n\nExplore right and left shifts with binary numbers.\n- In an arithmetic shift, the bits that are shifted out of either end are discarded. - In a left arithmetic shift, zeros are shifted in on the right. \n\n\n\nUnderstand binary Numbers by elaboration of Shift (2^^0, 2^^1, 2^^2)\n\nHow does the Power of 2 work? What is a binary number? What is Base2, Base10, Base16. - This example uses an 8-bit register. Math can be represented in much in many more bits, 32 bits or 2 bytes is common for integer in modern computer languages. - Most Significant Bit (MSB), least (LSB) - This example shows negative and positive numbers, using technique called Twos Complement. - In the first case, the leftmost digit was shifted past the end of the register, and a new 0 was shifted into the rightmost position. Positive Multiply. - In the second case, the rightmost 1 was shifted out, and a new 1 was copied into the leftmost position, preserving the sign of the number. Negative Divide, this example obviously needs more study. \n\n\n\nUI Concept/Design\n\nConceptualize on a UI that will illustrate binary and decimal. In learning these concepts, it is best to code and example to illustrate what is happening. - n Right Shifts (divides by 2^n); n Left Shifts (multiplies by 2^n) - Add buttons for “<<” and ” >>”"
  },
  {
    "objectID": "blog/posts/2022-11-14-AP-binary_logic.html#ascii-and-unicode",
    "href": "blog/posts/2022-11-14-AP-binary_logic.html#ascii-and-unicode",
    "title": "Binary Logic and Abstraction",
    "section": "ASCII and Unicode",
    "text": "ASCII and Unicode\n\nComputers represent more than Math. Mostly everyone is familiar with the characters on a keyboard and Emojis. These are all represented in binary, the data abstraction being the characters we visualize. 😂\n\n\nCharacter Data Abstraction\n\nHow are characters stored? How many bits do they take?\n- ASCII is 8 bits, it generally represent keys on keyboard. Look up ASCII Table. - Unicode can be UTF-8, 16 or 32, each representing bits. ASCII is preserved in Unicode. - ASCII - 7 bits, extended to 8 bits with Unicode - UTF-8 - UTF-16 - UTF-32  Sample of Unicode characters.\n\n\n\nUI Concept/Design\n\nThe ASCII value in picture should be change based off of the bits in evaluation you are doing. Bits displayed, label, and evaluation would be specific to evaluation type:  Original ASCII"
  },
  {
    "objectID": "blog/posts/2022-11-14-AP-binary_logic.html#color-codes",
    "href": "blog/posts/2022-11-14-AP-binary_logic.html#color-codes",
    "title": "Binary Logic and Abstraction",
    "section": "Color Codes",
    "text": "Color Codes\n\nPixels are little dots on Monitors and TVs that make up the display. Each pixel has an Red Green and Blue value (RGB). All pictures we see or take are composed of RGB using a density measurement. These are stored and then represented by digitally or in print. - Monitors - 1280 x 1024 Super-eXtended Graphics Array (SXGA) - 1366 x 768 High Definition (HD) - 1600 x 900 High Definition Plus (HD+) - 1920 x 1080 Full High Definition (FHD) - 1920 x 1200 Wide Ultra Extended Graphics Array (WUXGA) - TVs - 4K Ultra HD: The term 4K means the screen is about 4,000 pixels wide. … - 1080p (Full HD): This resolution is 1,920 x 1,080 pixels. … - 720p (HD Ready): This is mostly found on smaller TVs, and it has a resolution of 1,280 x 720. - Camera |Sensor Resolution (megapixels)|Typical Image Resolution (pixels)| |2.16|1800 x 1200| |3.9|2272 x 1704|\n|5.0|2592 x 1944|\n|7.1|3072 x 2304|\n|8.0|3264 x 2448| |10.0|3648 x 2736|\n|12.1|4000 x 3000|\n|14.7|4416 x 3312|\n|21.0|5616 x 3744|\n\n\nA Color code is a 24 bit abstraction.\n\nThere are 8 bits for Red, 8 bits for Blue, and 8 bits for Green.\n\n|Name|Hex Code|RGB Code| |Black|#000000|rgb(0, 0, 0)| |Red|#FF0000|rgb(255, 0, 0)| |Maroon|#800000|rgb(128, 0, 0)| |Yellow|#FFFF00|rgb(255, 255, 0)|\n 255  255 * 255 combinations of R, G, B*\n\n\nUI Design\n\nHere is a sample program a student used to visualize color by turning buttons on and off.  by Anthony Vo 3 rows representing R, G, B Resulting color displayed in block"
  },
  {
    "objectID": "blog/posts/2022-11-14-AP-binary_logic.html#logic-gates",
    "href": "blog/posts/2022-11-14-AP-binary_logic.html#logic-gates",
    "title": "Binary Logic and Abstraction",
    "section": "Logic Gates",
    "text": "Logic Gates\n\nThe fundamentals of all decisions in computers is made by logic gates. These gates are visualized by permuting 1 and 0 across many different types of decisions. The result is an expression that evaluated to 1 or 0. These are called Truth Tables.\n\n\nLogic Gates can be simulated with 2 bits\nLook for bitwise operators on w3schools\n\n\nUI Concept\n\nVisual concept of logic gates - Establish check boxes for A / B on and off - Show result of Boolean Expression using Gate visual  Logic Gates\n\n\n\nUI Design\n\nLogic gate lab in JavaScript  by Kylie Scharf AB checkboxes with Submit button Table with Symbol, Description, and Result\n\n\n\nLogic of Logic Gates\n\nA logic gate can have two inputs (a,b) and by how changing these inputs it impacts the output(c). - There are four possible inputs: - 0 0 - 0 1 - 1 0 - 1 1 - Understanding the output enables us to understand a logical expressions. All outputs are routed in Logic Gates (similar to how a language is routed in Latin). - AND is true for 1 1; NAND is true opposite of AND 0 0, 0 1, 1 0 - OR is true for 1 1, 0 1, 1 0, NOR is true opposite of OR 0 0 - XOR is true for 0 1, 1 0\n\n\n\nPractical Application\n\nLogic gates are used everywhere"
  },
  {
    "objectID": "blog/posts/2022-11-14-AP-binary_logic.html#unsigned-addition",
    "href": "blog/posts/2022-11-14-AP-binary_logic.html#unsigned-addition",
    "title": "Binary Logic and Abstraction",
    "section": "Unsigned Addition",
    "text": "Unsigned Addition\nHere we are requesting 3 rows of bits to simulate Math. This could be done with 4, 8, or 16 bits.\n\nInitial UI Implementation\n Action buttons for +1 and -1 Additional actions for Turn On and Turn Off\n\n\nUnsigned Addition"
  },
  {
    "objectID": "blog/posts/2022-11-14-AP-binary_logic.html#signed-addition",
    "href": "blog/posts/2022-11-14-AP-binary_logic.html#signed-addition",
    "title": "Binary Logic and Abstraction",
    "section": "Signed Addition",
    "text": "Signed Addition\nIntegers in most languages are int8, int16, int32, or int64. They typically reserve left most bit for sign.\n\nCommon concept for Integer Math\n Positive number\n\n\nBasic concept, but not typically used\n Negative number\n\n\nInverting numbers, twos complement\n Two’s complement allows adding for signed and unsigned numbers\nBasic concept is to invert/negate bits to produce negative. This allows numbers to be added together for expected results. >> and >>> have been adapted to handle signed and zero filled shifting."
  },
  {
    "objectID": "blog/posts/2022-11-14-AP-binary_logic.html#technical-helpers",
    "href": "blog/posts/2022-11-14-AP-binary_logic.html#technical-helpers",
    "title": "Binary Logic and Abstraction",
    "section": "Technical helpers",
    "text": "Technical helpers\n\nHarvard CS50 minute 0 to minute 50 to provide background on some of the information below.\n\n\nAlgorithm in Jinja2 to limit Bits per row\n 8 images per row by Kylie Scharf Modulo 8 algorithm add\n\nfor every eight bits (code).\n\n\nResearch Helpers\nCHAPTER 8 - Binary Addition and Two’s Complement Overview find by Val Wilson"
  },
  {
    "objectID": "blog/posts/2022-11-14-AP-binary_logic.html#hacks",
    "href": "blog/posts/2022-11-14-AP-binary_logic.html#hacks",
    "title": "Binary Logic and Abstraction",
    "section": "Hacks",
    "text": "Hacks\n\nData, Data Structures, and Algorithms work together. Data helps supply an interests/topic to an algorithm. It will be expected that you have a topic as you go through various algorithms. - Use data abstraction (ie data structures) in your lesson - Make sure you teach/learn elements from this blog as you learn algorithms - Add “Science” into your process (research, jupyter notebook, and ultimately running application) - Topics used in teaching, not listed in lesson/labs/homework need to be approved by Teacher. The topics above focus on data ideas from Unit 2 of AP Classroom."
  },
  {
    "objectID": "blog/posts/2022-11-28-AP-unit3_1_to_2.html",
    "href": "blog/posts/2022-11-28-AP-unit3_1_to_2.html",
    "title": "Unit 3 Sections 1-2",
    "section": "",
    "text": "Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better"
  },
  {
    "objectID": "blog/posts/2022-11-28-AP-unit3_1_to_2.html#process-for-presenters",
    "href": "blog/posts/2022-11-28-AP-unit3_1_to_2.html#process-for-presenters",
    "title": "Unit 3 Sections 1-2",
    "section": "Process for Presenters",
    "text": "Process for Presenters\n\nUse “Comments” on this blog page to post materials for lesson\nBe sure to include “Period and Teacher” in instructions\nBe sure homework assignment, hacks and points/rubric are clearly described"
  },
  {
    "objectID": "blog/posts/2022-11-28-AP-unit3_1_to_2.html#process-for-individuals",
    "href": "blog/posts/2022-11-28-AP-unit3_1_to_2.html#process-for-individuals",
    "title": "Unit 3 Sections 1-2",
    "section": "Process for Individuals",
    "text": "Process for Individuals\n\nEach participating Team will post a shared review ticket with individual work clearly listed\nBe sure to include “Period, Teacher and Table” in review ticket\nCollaboration is encouraged but individual and unique work is required"
  },
  {
    "objectID": "blog/posts/2022-10-10-PBL-api-system-2-system.html",
    "href": "blog/posts/2022-10-10-PBL-api-system-2-system.html",
    "title": "System to System APIs",
    "section": "",
    "text": "This blog expects an understanding of RapdiAPI and using Python for request and response to obtain data. Additionally, it is shows that access to data can occur across Web Applications. Key takeaways from this blog… 1. Review API Terms 2. Flask/Python to provide API to simplify access for JavaScript Frontend developer.\n- API credentials are hidden - Cache and calling RapidAPI or other APIs less - Access Control, firewall issues in Backend 3. FastPages/JavaScript handles formatting of data. 4. Understand Fastpages server <–> Flask Server <–> RapidAPI Server \n\n\n\n\nThe Flask/Python Code has been heavily commented. Additionally, the file can be run, tested, and debugged. The lecture that goes with this will required students to step through debugging session as they review the code. - VSCode Project: flask_portfolio - Python File: api/covid.py\n\n\nThe biggest learnings in Backend, in this code, versus Jupyter Notebook… - Blueprint for covid.py, the interaction and registration with main.py - The use of updateTime(), to only call API every 24 hours - Being able to Debug main tester method, this is critical to speeding development.  - Understanding the API resources and how they are run as a service through the Web Application - Set Breakpoint in covid.py file.\n- Run Server in Debug, select to right of play button an pick Debug.  - Access API through browser, this will stop at selected breakpoint. \n\n\n\n\n\nThe JavaScript Code has been documented and featured in the Fastpages site. The lecture that goes with this blog will share how to debug the JavaScript using the Chrome Browser. - VSCode Project: APCSP - JavaScript/Markdown File: 2022-07-10-PBL-rapidapi.md\n\n\nThe biggest learning in Frontend, in this code, will be the interaction between HTML and the JavaScript. This is called the Document Object Model (DOM). - In this example. an HTML table is setup and JavaScript is used to Create and Update Element IDs in the Table. This is similar to the JavaScript table made in the Python Jupyter notebook, the big difference is the DOM syntax. - The concept of for loop is the same, though the syntax for (const row of data.countries_stat) and keywords are different.\n- Visual shows Inspect on a Chrome Browser. Load correct source, set breakpoints and reload page. Code is in center and data is on the right in illustration. This can reorient according to size of Source window."
  },
  {
    "objectID": "blog/posts/2022-10-10-PBL-api-system-2-system.html#hacks",
    "href": "blog/posts/2022-10-10-PBL-api-system-2-system.html#hacks",
    "title": "System to System APIs",
    "section": "Hacks",
    "text": "Hacks\n\nThe big focus on of this hack is for students to adapt the project(s) to something that is helpful to the Scrum Teams final project.\n- Requirements System to System. Your team project needs to have a Frontend and Backend that are distinct projects. - Distribution of Development between Frontend and Backend developers. As you divide work and systems, I would suggest Scrum Master and Devops Engineer join either Frontend or Backend. - A Teacher suggestion is to start by using these files very closely! Make very small changes while incorporating API specific to the team."
  },
  {
    "objectID": "blog/posts/2022-09-05-HM-create-task-bria.html",
    "href": "blog/posts/2022-09-05-HM-create-task-bria.html",
    "title": "How I got a 5!",
    "section": "",
    "text": "TAKE THE NOTES! I know the Collegeboard videos are not the most interesting thing and a lot of them cover topics you may already know from class, but just taking simple notes may come in handy when you need to review towards the end of the tri. Also taking notes is very helpful for remembering overall concepts which means LESS REVIEW NEEDED LATER!\nTRY ON THE QUIZZES AND PRACTICE TESTS! They are great practice, and searching up the answers is definitely not the way to go.\nQUIZ AND TEST CORRECTIONS! They are a great way from you to learn the information if you didn’t learn it from the video.\nBUT MOST HELPFUL (FOR ME)…Khan Academy Videos! I found that these videos were super helpful when I needed to review something really fast, but didn’t want to go to collegeboard. I really thought the videos/assignments on the internet were very effective for me. I think its a great resource to use just to review the topics that you are super confused or just want more clarification about.\n\nThey’re videos are super quick and straight to the point, which was good for relearning topics I already knew but needed a refresh on. For example, bits and binary was something that I couldn’t remember from the beginning of the year, and the videos helped me remember the basics.\nThey have assignments/articles for each topic that basically restate the information in the videos but more visually. The unit that covered data security and encryption is a good example of combining the videos and articles, and they definitely helped me understand public and private keys more.\nTheir practices are also pretty quick and straightforward if you are looking for extra resources other than the quizzes and practice tests. I used the practice tests about the internet because that was something I was not understanding just from Collegeboard practice."
  },
  {
    "objectID": "blog/posts/2022-09-05-HM-create-task-bria.html#the-exam",
    "href": "blog/posts/2022-09-05-HM-create-task-bria.html#the-exam",
    "title": "How I got a 5!",
    "section": "THE EXAM",
    "text": "THE EXAM\n\nPAY ATTENTION TO THE QUESTIONS ON THE PRACTICE TESTS! The questions are very similar to what is on the exam. If you know them from the practice exam then you can save up on time from checking your work after you finish.\nSTARTING TIMING YOUR PRACTICE TESTS! The ones we were given in class were 50 questions. Once you get the hang of the first couple of practice tests, start giving yourself around a hour or an hour and a half to finish all 50 questions. This is gonna help you with pacing and with working under the pressure.\nTAKE YOUR TIME! The test is 2 hours for 70 MC. You have time to double and even triple check your answers if you work at a good pace. With that being said don’t stress about not having enough time because you definitely do."
  },
  {
    "objectID": "blog/posts/2022-09-05-HM-create-task-bria.html#create-task-tips",
    "href": "blog/posts/2022-09-05-HM-create-task-bria.html#create-task-tips",
    "title": "How I got a 5!",
    "section": "CREATE TASK TIPS",
    "text": "CREATE TASK TIPS\n\nREAD OVER THE INSTRUCTIONS CAREFULLY! Make sure that you are including each specific element in your project. It might be helpful to make a checklist with everything and check each item off as you are completing it with your project. I found myself having to review the guidelines a lot because there would be little things that I was forgetting, but doing so definitely made my project stronger.\nREVIEW THE PAST EXAMPLES FROM COLLEGEBOARD! Seeing what ideas got lower scores guided me and I knew what to avoid including in my own project. Additionally, the good examples gave me some ideas of how other people included the required lists, iteration, and other items in a creative way. Though these examples might inspire you, make sure that you are coming up with your own idea and not directly copying.\n\nI looked at example A and B because those examples got all the points rewarded, so I looked at those for what to include and how much to write for my response.\nI looked specifically at examples I and H because they both lost a bunch of points, so I made sure not look at what they did wrong and fix those error in my response.\n\nCITE YOUR SOURCES! If you use code from somewhere else, dont forget to make notes throughout giving credit to the original creator. Even something as small as a loop needs to be cited if its from somewhere else. But definitely try to code everything yourself because it’s good practice and you learn a lot through actually working through the bugs in your project.\nDON’T MAKE A BASIC GAME! This one is more subjective, but a lot of people were telling me that if you make something basic/generic like hangman or tic tac toe you are not going to get a good score. I think just try to be as creative as possible and make sure that your project has a geniune purpose because that’s an important part of the create task. Also please don’t do a GPA Calculator, its so overdone :)\nREVIEW THE SCORING GUIDELINES! Don’t just assume you are meeting each requirement, check the guidelines. They let you know exactly what they are looking for, so its another great way to double check your work.\nCODE IT ALL AT ONCE THEN REVIEW EACH SECTION! This is also more subjective, but I found it super helpful to code a basic idea of what my create task would look like and all the functionality in one sitting. Then as the deadline approached, I spent a day working through each sections, adding new functionality that reflected the requirements, and refining the code I already created to be more effcient. This was more helpful for me because I had way more time to refine the code and make it way better than that initial draft.\nADD COMMENTS TO THE CODE AS YOU GO! This is something that I wish I did because I ended up forgetting until the last days before the submission. It was not fun having to organize my code and add comments to each line right before the deadline. Adding comments to each section after you write the code is definitely ideal because you can remember exactly what the purpose is.\nSPEND A DAY REARRANGING THE CODE! This was important for me because the order that my code was in only made sense to me. But obviously I’m not the one grading, so I spent time going through and arranging my code in a way that I thought would make sense to a random person going through it line by line."
  },
  {
    "objectID": "blog/posts/2022-09-05-HM-create-task-bria.html#my-create-task-process-links",
    "href": "blog/posts/2022-09-05-HM-create-task-bria.html#my-create-task-process-links",
    "title": "How I got a 5!",
    "section": "MY CREATE TASK PROCESS LINKS",
    "text": "MY CREATE TASK PROCESS LINKS\nINITIAL ROUGH DRAFT\nFINAL DRAFT\nLINK TO VIDEO RUNTIME"
  },
  {
    "objectID": "blog/posts/2022-09-05-HM-create-task-bria.html#hacks",
    "href": "blog/posts/2022-09-05-HM-create-task-bria.html#hacks",
    "title": "How I got a 5!",
    "section": "Hacks",
    "text": "Hacks\n\nStudents should create a Sprint Backlog. Here are some focus…\nEducational zone(s), how to prepare for AP Classroom (MCQ)\nInterest/Fun zone, unique idea(s) for create task\nBlogging and Review zone(s), showing what you did and how"
  },
  {
    "objectID": "blog/posts/2022-07-07-PBL-binary.html",
    "href": "blog/posts/2022-07-07-PBL-binary.html",
    "title": "Binary Math",
    "section": "",
    "text": "{% include nav_frontend.html %} {% assign BITS = 8 %}\n\n<header class=\"pb-3 mb-4 border-bottom border-primary text-dark\">\n    <span class=\"fs-4\">Binary Math with Conversions</span>\n</header>\n<div class=\"row justify-content-md-center\">\n    <div class=\"col-8\">\n        <table class=\"table\">\n        <tr id=\"table\">\n            <th>Plus</th>\n            <th>Binary</th>\n            <th>Octal</th>\n            <th>Hexadecimal</th>\n            <th>Decimal</th>\n            <th>Minus</th>\n        </tr>\n        <tr>\n            <td><button type=\"button\" id=\"add1\" onclick=\"add(1)\">+1</button></td>\n            <td id=\"binary\">00000000</td>\n            <td id=\"octal\">0</td>\n            <td id=\"hexadecimal\">0</td>\n            <td id=\"decimal\">0</td>\n            <td><button type=\"button\" id=\"sub1\" onclick=\"add(-1)\">-1</button></td>\n        </tr>\n        </table>\n    </div>\n    <div class=\"col-12\">\n        {% comment %}Liquid for loop includes last number, thus the Minus{% endcomment %}\n        {% assign bits = BITS | minus: 1 %} \n        <table class=\"table\">\n        <tr>\n            {% comment %}Build many bits{% endcomment %}\n            {% for i in (0..bits) %}\n            <td><img class=\"img-responsive py-3\" id=\"bulb{{ i }}\" src=\"{{site.baseurl}}/images/bulb_off.png\" alt=\"\" width=\"40\" height=\"Auto\">\n                <button type=\"button\" id=\"butt{{ i }}\" onclick=\"javascript:toggleBit({{ i }})\">Turn on</button>\n            </td>\n            {% endfor %}\n        </tr>\n        <tr>\n            {% comment %}Value of bit{% endcomment %}\n            {% for i in (0..bits) %}\n            <td><input type='text' id=\"digit{{ i }}\" Value=\"0\" size=\"1\" readonly></td>\n            {% endfor %}\n        </tr>\n        </table>\n    </div>\n</div>"
  },
  {
    "objectID": "blog/posts/2022-08-22-pbl-bash_tutorial.html",
    "href": "blog/posts/2022-08-22-pbl-bash_tutorial.html",
    "title": "Bash Tutorial",
    "section": "",
    "text": "Being able to find a Bash Reference. Here is a Bash Cheat Sheet\n\n\nInstall the Bash Kernel for Jupyter notebooks. Expectations are pip3 and python3 are defined within the path. The bash shell allowed construction of this tutorial.\n\n\npip install bash_kernel\npython -m bash_kernel.install\n\nSelecting a kernel in “code –project–” or “jupyter notebook –file.ipynb–” that have bash in options."
  },
  {
    "objectID": "blog/posts/2022-08-22-pbl-bash_tutorial.html#prerequisites-for-project-directory",
    "href": "blog/posts/2022-08-22-pbl-bash_tutorial.html#prerequisites-for-project-directory",
    "title": "Bash Tutorial",
    "section": "Prerequisites for Project Directory",
    "text": "Prerequisites for Project Directory\n\nPractice pulling code from git to your machine. This will create a project directory and add APCSP github project to the directory. There is conditional logic to make sure that directory and pull only happen if it does not (!) exist.\n\n\nHack: Change variables, make new directory, clone to that directory.\n\n\n# echo \"Using conditional statement to create a project directory and project\"\n\n# Variable section\n# export project_dir=$HOME/vscode  # change vscode to different name to test git clone\n# export project=$project_dir/APCSP  # change APCSP to name of project from git clone\n# export project_repo=\"https://github.com/nighthawkcoders/APCSP.git\"  # change to project of choice\n\n# cd ~    # start in home directory\n\n# # Conditional block to make a project directory\n# if [ ! -d $project_dir ]\n# then \n#     echo \"Directory $project_dir does not exists... makinng directory $project_dir\"\n#     mkdir -p $project_dir\n# fi\n# echo \"Directory $project_dir exists.\" \n\n# # Conditional block to git clone a project from project_repo\n# if [ ! -d $project ]\n# then\n#     echo \"Directory $project does not exists... cloning $project_repo\"\n#     cd $project_dir\n#     git clone $project_repo\n#     cd ~\n# fi\n# echo \"Directory $project exists.\"\n\nSyntaxError: invalid syntax (3397247307.py, line 1)\n\n\n\nLook inside Fastpages/Github page project\n\nAll computers contain files and directories. The clone brought more files from cloud to your machine. Using the bash shell you will see some commands that show and interact with files and directories.\n\n\n“ls” lists computer files in Unix and Unix-like operating systems\n“cd” offers way to navigate and change working directory\n“pwd” print working directory\n“echo” used to display line of text/string that are passed as an argument\n\n\n# You must run cells above to define variable and project\n\n# echo \"Navigate to project, then navigate to area wwhere files were cloned\"\n# cd $project\n# pwd\n\n# echo \"\"\n# echo \"list top level or root of files with project pulled from github\"\n# ls\n\n# echo \"\"\n# echo \"list again with hidden files pulled from github\"\n# ls -a   # hidden files flag, many shell commands have flags\n\n# echo \"\"\n# echo \"list all files in long format\"\n# ls -al   # all files and long listing\n\n\n# You must run cells above to define variable and project\n\n# echo \"Look for posts\"\n# export posts=$project/_posts  # _posts inside project\n# cd $posts  # this should exist per fastpages\n# pwd  # present working directory\n# ls -l  # list posts\n\n\n# You must run cells above to define variable and project\n\n# echo \"Look for notebooks\"\n# export notebooks=$project/_notebooks  # _notebooks is inside project\n# cd $notebooks   # this should exist per fastpages\n# pwd  # present working directory\n# ls -l  # list notebooks\n\n\n# You must run cells above to define notebooks location\n\n# echo \"Look for images in notebooks, print working directory, list files\"\n# cd $notebooks/images  # this should exist per fastpages\n# pwd\n# ls -l\n\n\n\nLook inside a Markdown File\n\n“cat” reads data from the file and gives its content as output\n\n\n# You must run cells above to define project\n# echo \"Navigate to project, then navigate to area wwhere files were cloned\"\n\n# cd $project\n# echo \"show the contents of README.md\"\n# echo \"\"\n\n# cat README.md  # show contents of file, in this case markdown\n# echo \"\"\n# echo \"end of README.md\"\n\n\n\nEnv, Git and GitHub\n\nEnv(ironment) is used to capture things like path to Code or Home directory. Git and GitHub is NOT Only used to exchange code between individuals, it is often used to exchange code through servers, in our case deployment for Website. All tools we use have a behind the scenes hav relationship with the system they run on (MacOS, Windows, Linus) or a relationship with servers which they are connected to (ie GitHub). There is an “env” command in bash. There are environment files and setting files (.git/config) for Git. They both use a key/value concept.\n\n\n“env” show setting for your shell\n“git clone” sets up a director of files\n“cd $project” allows user to move inside that directory of files\n“.git” is a hidden directory that is used by git to establish relationship between machine and the git server on GitHub.\n\n\n# This command has no dependencies\n\n# echo \"Show the shell environment variables, key on left of equal value on right\"\n# echo \"\"\n\n# env\n\n\n# This command has dependencies on project\n\n# cd $project\n\n# echo \"\"\n# echo \"show the secrets of .git\"\n# cd .git\n# ls -l\n\n# echo \"\"\n# echo \"look at config file\"\n# cat config\n\n\n\nStudent Request - Make a file in Bash\n\nThis example was requested by a student (Jun Lim, CSA). The request was to make jupyer file using bash, I adapted the request to markdown. This type of thought will have great extrapolation to coding and possibilities of using List, Arrays, or APIs to build user interfaces. JavaScript is a language where building HTML is very common.\n\n\nTo get more interesting output from terminal, this will require using something like mdless (https://github.com/ttscoff/mdless). This enables see markdown in rendered format. - On Desktop Install PKG from MacPorts - In Terminal on MacOS - Install ncurses - gem install mdless\n\n\nOutput of the example is much nicer in “jupyter”\n\n\n# This example has error in VSCode, it run best on Jupyter\n# cd /tmp\n\n# file=\"sample.md\"\n# if [ -f \"$file\" ]; then\n#     rm $file\n# fi\n\n# tee -a $file >/dev/null <<EOF\n# # Show Generated Markdown\n# This introductory paragraph and this line and the title above are generated using tee with the standard input (<<) redirection operator.\n# - This bulleted element is still part of the tee body.\n# EOF\n\n# echo \"- This bulleted element and lines below are generated using echo with standard output (>>) redirection operator.\" >> $file\n# echo \"- The list definition, as is, is using space to seperate lines.  Thus the use of commas and hyphens in output.\" >> $file\n# actions=(\"ls,list-directory\" \"cd,change-directory\" \"pwd,present-working-directory\" \"if-then-fi,test-condition\" \"env,bash-environment-variables\" \"cat,view-file-contents\" \"tee,write-to-output\" \"echo,display-content-of-string\" \"echo_text_>\\$file,write-content-to-file\" \"echo_text_>>\\$file,append-content-to-file\")\n# for action in ${actions[@]}; do  # for loop is very similar to other language, though [@], semi-colon, do are new\n#   action=${action//-/ }  # convert dash to space\n#   action=${action//,/: } # convert comma to colon\n#   action=${action//_text_/ \\\"sample text\\\" } # convert _text_ to sample text, note escape character \\ to avoid \"\" having meaning\n#   echo \"    - ${action//-/ }\" >> $file  # echo is redirected to file with >>\n# done\n\n# echo \"\"\n# echo \"File listing and status\"\n# ls -l $file # list file\n# wc $file   # show words\n# mdless $file  # this requires installation, but renders markown from terminal\n\n# rm $file  # clean up termporary file"
  },
  {
    "objectID": "blog/posts/2022-08-22-pbl-bash_tutorial.html#hacks",
    "href": "blog/posts/2022-08-22-pbl-bash_tutorial.html#hacks",
    "title": "Bash Tutorial",
    "section": "Hacks",
    "text": "Hacks\n\nGo back to some of the deployment procedures and think about some thing you could verify through Bash notebook.\n\n\nIs there anything we use to verify tools we install? Think about versions.\nIs there anything we could verify with Anaconda?\nHow would you update a repository?\nReally cool would be automating a procedure from installation."
  },
  {
    "objectID": "blog/posts/sample.html",
    "href": "blog/posts/sample.html",
    "title": "APCSP2",
    "section": "",
    "text": "Bash\n\nGenerate a list of bash actions in this article - ls,list-directory - cd,change-directory - pwd,present-working-directory - if-then-fi,test-condition - env-bash-environment-variables - cat,view-file-contents - tee,write-to-output - echo,display-content-of-string - echo_>,write-content-to-file - echo_>>,append-content-to-file"
  },
  {
    "objectID": "blog/posts/2022-09-19-PT-frontend_starters.html",
    "href": "blog/posts/2022-09-19-PT-frontend_starters.html",
    "title": "UI Starters",
    "section": "",
    "text": "Focus UI design - Coming up with individual / team design screens using HTML/CSS/JS fragments. - Monday: No School - Tuesday: Live Review, Test Prep - Wednesday: Live Review, Career Tech - Thursday: Human Prep - Friday: Code, Code, Code\n\n\n\n\nReview W3Schools and Bootstrap to come up with individual design elements. Use different elements in the following locations. - Change or personalize index.html page - Change or personalize stub menu and stub.html. Rename according to interests.\n\n\n\n\n\nReview W3Schools and JavaScript lesson to come up with individual design elements. - add new _pages with submenu - have a link from submenu to Jupyter Notebook that shows personal usage of Jupyter JavaScript kernel - have a link from submenu to a regular Post that uses HTML fragments and JavaScript data to build a table\n\n\n\n\n\nBuild or Draft a couple screens to introduce your final project idea. - Key objective is to show Program Purpose - One screen should be Fastpages blog either _notebook or _post highlight purpose of project and roles within the SCRUM team. - One screen should be Flask of Fastpages HTML/CSS/JS that engages observers into program purpose\n\n\n\n\n\nRefer to these resources to speed your introduction to Frontend Development - Fundamentals of HTML using W3Schools - Flask/Python Frontend uses template engine called Bootstrap - Fastpages uses theme called minima - Fastpages blog"
  },
  {
    "objectID": "blog/posts/2022-09-19-PT-frontend_starters.html#live-grading-presentation.",
    "href": "blog/posts/2022-09-19-PT-frontend_starters.html#live-grading-presentation.",
    "title": "UI Starters",
    "section": "Live Grading Presentation. ",
    "text": "Live Grading Presentation. \n\nWe will follow 3 to 4 team review format. At the review session, there will be an approval for the Trimester 1 project.\n- Observers will grade up to .9/1 X 3 on each of the elements mentioned above (2 individual and 1 team). Be sure to total up to 2.7/3 - Observers will note anything that was completed that is not mentioned in the outline (for instance a Twitter Card that works with Fastpages). This needs to be tangible!!! If student met 2.7 standard, then extra items can make score 2.7+."
  },
  {
    "objectID": "blog/posts/2022-09-27-VPNs.html",
    "href": "blog/posts/2022-09-27-VPNs.html",
    "title": "Virtual Private Networks",
    "section": "",
    "text": "Virtual Private Networks, or VPNs establish a protected network connection when using public networks. VPNs encrypt your internet traffic and disguise your online identity. This makes it more difficult for third parties to track your activities online and steal data."
  },
  {
    "objectID": "blog/posts/2022-09-27-VPNs.html#how-does-a-vpn-work",
    "href": "blog/posts/2022-09-27-VPNs.html#how-does-a-vpn-work",
    "title": "Virtual Private Networks",
    "section": "How Does A VPN Work",
    "text": "How Does A VPN Work\nA VPN hides your IP address by letting the network redirect it through a specially configured remote server run by a VPN host. This means that if you surf online with a VPN, the VPN server becomes the source of your data. This means your Internet Service Provider (ISP) and other third parties cannot see which websites you visit or what data you send and receive online, and which can only be accessed if one’s VPN gets hacked; however, that is extremely unlikely to happen because VPN’s are very securely encrypted. A VPN works like a filter that turns all your data into “gibberish”. Even if someone were to get their hands on your data, it would be useless."
  },
  {
    "objectID": "blog/posts/2022-09-27-VPNs.html#setting-up-a-vpn-macos",
    "href": "blog/posts/2022-09-27-VPNs.html#setting-up-a-vpn-macos",
    "title": "Virtual Private Networks",
    "section": "Setting Up A VPN (MacOS)",
    "text": "Setting Up A VPN (MacOS)\n\nNavigate to your browser and search for a VPN and follow the websites directions for installation\nGo to “System Preferences” and then “Network”\nClick on the plus sign in the bottom left corner and use the drop-down menu to choose your VPN\nFill in the details for your chosen VPN in the fields “VPN Type” and “Service Name”\nCreate a new VPN network and fill in your “Server Address,” “Remote ID” and “Local ID”\nEnter “Authentication Settings” and add your username and password\nClick “OK” and Connect your VPN"
  },
  {
    "objectID": "blog/posts/2022-09-27-VPNs.html#setting-up-a-vpn-windows",
    "href": "blog/posts/2022-09-27-VPNs.html#setting-up-a-vpn-windows",
    "title": "Virtual Private Networks",
    "section": "Setting Up A VPN (Windows)",
    "text": "Setting Up A VPN (Windows)\n\nNavigate to your browser and search for a VPN and follow the websites directions for installation\nMove into “Settings” and click on “Network” and then “VPN”\nClick “Add a VPN” and fill out the fields for “Server Name,” “VPN Type” and your account information, which should be shared by the VPN provider you chose\nSave your VPN\nGo back into “VPN,” click on your newly added account and press “Connect”"
  },
  {
    "objectID": "blog/posts/2022-09-27-VPNs.html#using-a-vpn",
    "href": "blog/posts/2022-09-27-VPNs.html#using-a-vpn",
    "title": "Virtual Private Networks",
    "section": "Using A VPN",
    "text": "Using A VPN\nThere are a host of different reasons to use a VPN. Below, I have listed a few reasons to sue a VPN\n\nMake public Wi-Fi more secure\nProtect your mobile devices\nHide your IP address\nData Privacy From Your Internet Service Provider\nData Privacy From the Apps and Services You Use\nAccess to Any Content in Any Place (Streaming shows that are on other countries Netflix)\nLes likely to get hacked"
  },
  {
    "objectID": "blog/posts/2022-09-27-VPNs.html#recommended-software-free",
    "href": "blog/posts/2022-09-27-VPNs.html#recommended-software-free",
    "title": "Virtual Private Networks",
    "section": "Recommended Software (Free)",
    "text": "Recommended Software (Free)\n\nProton VPN Free\nPrivado VPN\nWindscribe\nAtlas VPN\nHide.me\nBetternet (500 MB per day, as long as you don’t overuse data for one day which is extremely unlikely to happen)"
  },
  {
    "objectID": "blog/posts/2022-09-27-VPNs.html#recommended-software-paid",
    "href": "blog/posts/2022-09-27-VPNs.html#recommended-software-paid",
    "title": "Virtual Private Networks",
    "section": "Recommended Software (Paid)",
    "text": "Recommended Software (Paid)\n\nExpressVPN (~$9/month)\nSurfShark ($5/month)\nNordVPN ($3.69/month for 2 years)\nProtonVPN ($6/month)\nIPVanish ($3.33/month for the first year, then $7.5/month)"
  },
  {
    "objectID": "blog/posts/2022-08-29-ap-python_lists.html",
    "href": "blog/posts/2022-08-29-ap-python_lists.html",
    "title": "Lists, Dictionaries, Iteration",
    "section": "",
    "text": "As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation.\n\nDevelopers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection.\n\nTake a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output.\n\n\n# Sample of Python Variables\n\n# variable of type string\nprint(\"What is the variable name/key?\", \"value?\", \"type?\", \"primitive or collection, why?\")\nname = \"John Doe\"\nprint(\"name\", name, type(name))\n\nprint()\n\n\n# variable of type integer\nprint(\"What is the variable name/key?\", \"value?\", \"type?\", \"primitive or collection, why?\")\nage = 18\nprint(\"age\", age, type(age))\n\nprint()\n\n# variable of type float\nprint(\"What is the variable name/key?\", \"value?\", \"type?\", \"primitive or collection, why?\")\nscore = 90.0\nprint(\"score\", score, type(score))\n\nprint()\n\n# variable of type list (many values in one variable)\nprint(\"What is variable name/key?\", \"value?\", \"type?\", \"primitive or collection?\")\nprint(\"What is different about the list output?\")\nlangs = [\"Python\", \"JavaScript\", \"Java\"]\nprint(\"langs\", langs, type(langs), \"length\", len(langs))\nprint(\"- langs[0]\", langs[0], type(langs[0]))\n\nprint()\n\n# variable of type dictionary (a group of keys and values)\nprint(\"What is the variable name/key?\", \"value?\", \"type?\", \"primitive or collection, why?\")\nprint(\"What is different about the dictionary output?\")\nperson = {\n    \"name\": name,\n    \"age\": age,\n    \"score\": score,\n    \"langs\": langs\n}\nprint(\"person\", person, type(person), \"length\", len(person))\nprint('- person[\"name\"]', person[\"name\"], type(person[\"name\"]))"
  },
  {
    "objectID": "blog/posts/2022-08-29-ap-python_lists.html#hacks",
    "href": "blog/posts/2022-08-29-ap-python_lists.html#hacks",
    "title": "Lists, Dictionaries, Iteration",
    "section": "Hacks",
    "text": "Hacks\n\nAdd a couple of records to the InfoDb\nTry to do a for loop with an index\nPair Share code somethings creative or unique, with loops and data. Hints…\n\nWould it be possible to output data in a reverse order?\nAre there other methods that can be performed on lists?\nCould you create new or add to dictionary data set? Could you do it with input?\nMake a quiz that stores in a List of Dictionaries."
  },
  {
    "objectID": "blog/posts/2022-10-17-pbl-javascript_frontend.html",
    "href": "blog/posts/2022-10-17-pbl-javascript_frontend.html",
    "title": "Javascript Web Page using an API",
    "section": "",
    "text": "The code below holds the info that is being generated into an HTML table.\nKey things to know: - < table > creates a TABLE - < tr > creates a ROW - < th > makes the text a column HEADER - < tbody id = “results” > defines an element id, to be used within JavaScript\n\n<!-- HTML table fragment for page -->\n<table>\n  <thead>\n  <tr>\n    <th>Joke</th>\n    <th>HaHa</th>\n    <th>Boohoo</th>\n  </tr>\n  </thead>\n  <tbody id=\"result\">\n    <!-- javascript generated data -->\n  </tbody>\n</table>\n\nConstant variables are declared here with keyword const\nKey things to know: - The document object “result” represents table body in the HTML above. - If you want to access any element in an HTML page in JavaScript, you always start by accessing the document object. In this case, we are accessing “result” and defining a “resultContainer” - In the code, in following cells, document elements are created and organized for each Joke, each is added to the “resultContainer” as a row in the table body. - Accessing the api is done using the variables url and options, this is setup to fetch the Jokes from the backend\n\n// prepare HTML defined \"result\" container for new output\nconst resultContainer = document.getElementById(\"result\");\n\n// keys for joke reactions\nconst HAHA = \"haha\";\nconst BOOHOO = \"boohoo\";\n\n// prepare fetch urls\nconst url = \"https://flask.nighthawkcodingsociety.com/api/jokes\";\nconst like_url = url + \"/like/\";  // haha reaction\nconst jeer_url = url + \"/jeer/\";  // boohoo reaction\n\n// prepare fetch GET options\nconst options = {\n  method: 'GET', // *GET, POST, PUT, DELETE, etc.\n  mode: 'cors', // no-cors, *cors, same-origin\n  cache: 'default', // *default, no-cache, reload, force-cache, only-if-cached\n  credentials: 'omit', // include, *same-origin, omit\n  headers: {\n    'Content-Type': 'application/json'\n    // 'Content-Type': 'application/x-www-form-urlencoded',\n  },\n};\n\n// prepare fetch PUT options, clones with JS Spread Operator (...)\nconst put_options = {...options, method: 'PUT'}; // clones and replaces method\n\nThe below code uses a function called fetch to gather the data from the backend.\nKey things to understand: - The “url” “response” is checked in case the site is down and returns an error - On successful fetch, the code places each Joke in the HTML table body using a “for” loop and creating document elements from each “row” of the fetched “data”. - The creation of each Haha and Boohoo “onclick” “button” is also done in the same loop. - Updates to backend are setup to occur with each onclick, each click calls the “reaction” function\n\n// fetch the API\nfetch(url, options)\n  // response is a RESTful \"promise\" on any successful fetch\n  .then(response => {\n    // check for response errors\n    if (response.status !== 200) {\n        error('GET API response failure: ' + response.status);\n        return;\n    }\n    // valid response will have JSON data\n    response.json().then(data => {\n        console.log(data);\n        for (const row of data) {\n          // make \"tr element\" for each \"row of data\"\n          const tr = document.createElement(\"tr\");\n          \n          // td for joke cell\n          const joke = document.createElement(\"td\");\n            joke.innerHTML = row.id + \". \" + row.joke;  // add fetched data to innerHTML\n\n          // td for haha cell with onclick actions\n          const haha = document.createElement(\"td\");\n            const haha_but = document.createElement('button');\n            haha_but.id = HAHA+row.id   // establishes a HAHA JS id for cell\n            haha_but.innerHTML = row.haha;  // add fetched \"haha count\" to innerHTML\n            haha_but.onclick = function () {\n              // onclick function call with \"like parameters\"\n              reaction(HAHA, like_url+row.id, haha_but.id);  \n            };\n            haha.appendChild(haha_but);  // add \"haha button\" to haha cell\n\n          // td for boohoo cell with onclick actions\n          const boohoo = document.createElement(\"td\");\n            const boohoo_but = document.createElement('button');\n            boohoo_but.id = BOOHOO+row.id  // establishes a BOOHOO JS id for cell\n            boohoo_but.innerHTML = row.boohoo;  // add fetched \"boohoo count\" to innerHTML\n            boohoo_but.onclick = function () {\n              // onclick function call with \"jeer parameters\"\n              reaction(BOOHOO, jeer_url+row.id, boohoo_but.id);  \n            };\n            boohoo.appendChild(boohoo_but);  // add \"boohoo button\" to boohoo cell\n            \n          // this builds ALL td's (cells) into tr (row) element\n          tr.appendChild(joke);\n          tr.appendChild(haha);\n          tr.appendChild(boohoo);\n\n          // this adds all the tr (row) work above to the HTML \"result\" container\n          resultContainer.appendChild(tr);\n        }\n    })\n})\n\n// catch fetch errors (ie Nginx ACCESS to server blocked)\n.catch(err => {\n  error(err + \" \" + url);\n});\n\nThe below code uses fetch to update backend data using “put_options”. The purpose is to update Hahaa and Bohoo counters in backend.\nKey things to understand: - The “url” “response” is checked to verify update occurred - The element id of button clicked is updated with the data returned from the API.\n- Note, the elemID is received as parameter. This data was setup when the button was created in former cell.\n\n// Reaction function to likes or jeers user actions\nfunction reaction(type, put_url, elemID) {\n\n  // fetch the API\n  fetch(put_url, put_options)\n  // response is a RESTful \"promise\" on any successful fetch\n  .then(response => {\n    // check for response errors\n    if (response.status !== 200) {\n        error(\"PUT API response failure: \" + response.status)\n        return;  // api failure\n    }\n    // valid response will have JSON data\n    response.json().then(data => {\n        console.log(data);\n        // Likes or Jeers updated/incremented\n        if (type === HAHA) // like data element\n          document.getElementById(elemID).innerHTML = data.haha;  // fetched haha data assigned to haha Document Object Model (DOM)\n        else if (type === BOOHOO) // jeer data element\n          document.getElementById(elemID).innerHTML = data.boohoo;  // fetched boohoo data assigned to boohoo Document Object Model (DOM)\n        else\n          error(\"unknown type: \" + type);  // should never occur\n    })\n  })\n  // catch fetch errors (ie Nginx ACCESS to server blocked)\n  .catch(err => {\n    error(err + \" \" + put_url);\n  });\n  \n}\n  \n// Something went wrong with actions or responses\nfunction error(err) {\n  // log as Error in console\n  console.error(err);\n  // append error to resultContainer\n  const tr = document.createElement(\"tr\");\n  const td = document.createElement(\"td\");\n  td.innerHTML = err;\n  tr.appendChild(td);\n  resultContainer.appendChild(tr);\n}\n\n\nHacks\n\nThe code below relates to the rapidapi you worked with last week. - What are some similarities you see with the javascript for the jokes api? - In a blogpost, break up the code in cells like done above and try to describe what this code is doing.\n\n\n<!-- HTML table fragment for page -->\n<table>\n  <thead>\n  <tr>\n    <th>Time</th>\n    <th>All-time Cases</th>\n    <th>Recorded Deaths</th>\n    <th>Active Cases</th>\n  </tr>\n  </thead>\n  <tbody>\n    <td id=\"time\"></td>\n    <td id=\"total_cases\"></td>\n    <td id=\"total_deaths\"></td>\n    <td id=\"active_cases\"></td>\n  </tbody>\n</table>\n\n<table>\n  <thead>\n  <tr>\n    <th>Country</th>\n    <th>All-time Cases</th>\n    <th>Recorded Deaths</th>\n    <th>Active Cases</th>\n  </tr>\n  </thead>\n  <tbody id=\"result\">\n    <!-- generated rows -->\n  </tbody>\n</table>\n\n<!-- Script is layed out in a sequence (no function) and will execute when page is loaded -->\n<script>\n  // prepare HTML result container for new output\n  const resultContainer = document.getElementById(\"result\");\n\n  // prepare fetch options\n  const url = \"https://flask.nighthawkcodingsociety.com/api/covid/\";\n  const headers = {\n    method: 'GET', // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors', // no-cors, *cors, same-origin\n    cache: 'default', // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'omit', // include, *same-origin, omit\n    headers: {\n      'Content-Type': 'application/json'\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n  };\n\n  // fetch the API\n  fetch(url, headers)\n    // response is a RESTful \"promise\" on any successful fetch\n    .then(response => {\n      // check for response errors\n      if (response.status !== 200) {\n          const errorMsg = 'Database response error: ' + response.status;\n          console.log(errorMsg);\n          const tr = document.createElement(\"tr\");\n          const td = document.createElement(\"td\");\n          td.innerHTML = errorMsg;\n          tr.appendChild(td);\n          resultContainer.appendChild(tr);\n          return;\n      }\n      // valid response will have json data\n      response.json().then(data => {\n          console.log(data);\n          console.log(data.world_total)\n\n          // World Data\n          document.getElementById(\"time\").innerHTML = data.world_total.statistic_taken_at;\n          document.getElementById(\"total_cases\").innerHTML = data.world_total.total_cases;\n          document.getElementById(\"total_deaths\").innerHTML = data.world_total.total_deaths;\n          document.getElementById(\"active_cases\").innerHTML = data.world_total.active_cases;\n\n          // Country data\n          for (const row of data.countries_stat) {\n            console.log(row);\n\n            // tr for each row\n            const tr = document.createElement(\"tr\");\n            // td for each column\n            const name = document.createElement(\"td\");\n            const cases = document.createElement(\"td\");\n            const deaths = document.createElement(\"td\");\n            const active = document.createElement(\"td\");\n\n            // data is specific to the API\n            name.innerHTML = row.country_name;\n            cases.innerHTML = row.cases; \n            deaths.innerHTML = row.deaths; \n            active.innerHTML = row.active_cases; \n\n            // this builds td's into tr\n            tr.appendChild(name);\n            tr.appendChild(cases);\n            tr.appendChild(deaths);\n            tr.appendChild(active);\n\n            // add HTML to container\n            resultContainer.appendChild(tr);\n          }\n      })\n  })\n  // catch fetch errors (ie ACCESS to server blocked)\n  .catch(err => {\n    console.error(err);\n    const tr = document.createElement(\"tr\");\n    const td = document.createElement(\"td\");\n    td.innerHTML = err;\n    tr.appendChild(td);\n    resultContainer.appendChild(tr);\n  });\n</script>"
  },
  {
    "objectID": "blog/posts/2022-10-03-ap-error_testing.html",
    "href": "blog/posts/2022-10-03-ap-error_testing.html",
    "title": "Big Idea 1 ‘Identifying and Correcting Errors’",
    "section": "",
    "text": "College Board Big Idea 1"
  },
  {
    "objectID": "blog/posts/2022-10-03-ap-error_testing.html#identifying-and-correcting-errors-unit-1.4",
    "href": "blog/posts/2022-10-03-ap-error_testing.html#identifying-and-correcting-errors-unit-1.4",
    "title": "Big Idea 1 ‘Identifying and Correcting Errors’",
    "section": "Identifying and Correcting Errors (Unit 1.4)",
    "text": "Identifying and Correcting Errors (Unit 1.4)\n\nBecome familiar with types of errors and strategies to fixing them - Lightly Review Videos and take notes on topics with Blog - Complete assigned MCQ questions"
  },
  {
    "objectID": "blog/posts/2022-10-03-ap-error_testing.html#hacks",
    "href": "blog/posts/2022-10-03-ap-error_testing.html#hacks",
    "title": "Big Idea 1 ‘Identifying and Correcting Errors’",
    "section": "Hacks",
    "text": "Hacks\n\nNow is a good time to think about Testing of your teams final project… - What errors may arise in your project? - What are some test cases that can be used? - Make sure to document any bugs you encounter and how you solved the problem. - What are “single” tests that you will perform on your project? Or, your part of the project? * As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests."
  },
  {
    "objectID": "blog/posts/2022-07-08-PBL-life.html",
    "href": "blog/posts/2022-07-08-PBL-life.html",
    "title": "Game of Life",
    "section": "",
    "text": "{% include nav_frontend.html %}\n{% comment %} Conway’s Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life {% endcomment %}\n\n\n<header class=\"pb-3 mb-4 border-bottom border-primary text-dark\">\n    <span class=\"fs-4\">Remix of Game of Life</span>\n</header>\n<!-- Buttons that link to functions in javascript -->\n<button onclick=\"start()\" id=\"start-btn\">start</button>\n<button onclick=\"step()\">step</button>\n<!-- Container drawn by JavaScript -->\n<div id=\"container\" class=\"container py-4\">\n</div>"
  },
  {
    "objectID": "blog/posts/2022-12-05-AP-unit3_8_and_10.html",
    "href": "blog/posts/2022-12-05-AP-unit3_8_and_10.html",
    "title": "Unit 3 Sections 8 and 10",
    "section": "",
    "text": "Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better"
  },
  {
    "objectID": "blog/posts/2022-12-05-AP-unit3_8_and_10.html#process-for-presenters",
    "href": "blog/posts/2022-12-05-AP-unit3_8_and_10.html#process-for-presenters",
    "title": "Unit 3 Sections 8 and 10",
    "section": "Process for Presenters",
    "text": "Process for Presenters\n\nUse “Comments” on this blog page to post materials for lesson\nBe sure to include “Period and Teacher” in instructions\nBe sure homework assignment, hacks and points/rubric are clearly described"
  },
  {
    "objectID": "blog/posts/2022-12-05-AP-unit3_8_and_10.html#process-for-individuals",
    "href": "blog/posts/2022-12-05-AP-unit3_8_and_10.html#process-for-individuals",
    "title": "Unit 3 Sections 8 and 10",
    "section": "Process for Individuals",
    "text": "Process for Individuals\n\nEach participating Team will post a shared review ticket with individual work clearly listed\nBe sure to include “Period, Teacher and Table” in review ticket\nCollaboration is encouraged but individual and unique work is required"
  },
  {
    "objectID": "blog/posts/2022-08-15-PBL-tools.html",
    "href": "blog/posts/2022-08-15-PBL-tools.html",
    "title": "Tools and Equipment",
    "section": "",
    "text": "Learning Development tools, working with Projects, is the key to a rapid entry into Code/Code/Coding. A Computer, Git, and an Code Editor are the starting points for coding. Add Jupyter Notebooks (computational documents) and you bridge Computer with Data Science. The beauty of Jupyter is that it creates a computational narrative, a document that allows code and data with visual analysis, hypothesis, and conjecture. - Computers using either MacOS, Windows, or Linux are requirements for the course.\n- GitHub, is Git hosted in the Cloud. It is the defacto hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere in the world. Think of it as the Google Docs for Coders. - Version Control is the task of keeping a software system of many versions and configurations well organized. - Version Control History of files and changes in Version Control System (ie GitHub) is very important! Ultimately, any Coder will break things or delete things! Looking at older versions and configurations at a microscopic detail is sometimes the only way to unwind bugs. - Visual Studio Code (abbreviations VS Code, VSCode or VSC) is a powerful Code Editor. VSCode performs a lot of magic and automation behind the scenes to make your Code/Code/Coding life easier. There is a back-in-the-day story hear, but short version is VSCode qualifies, IMO, to be called and Integrated Development Environment (IDE). It allows you to Edit files, Build your Code, and Pull/Push Code from and to the GitHub. FYI, VSCode is new to APCS this year, the former IDE’s used in CompSci classes include XCode, Eclipse, and IntelliJ. - Jupyter Documents (.ipynb) is a document format for creating and sharing computational documents. These documents allow you to compute segments of Python or Java code as you are taking notes. These are new to AP CS this year, but are viewed as very powerful in gaining a quick understanding of coding concepts. Jupyter documents are often called “notebooks”.\n\n\n\nA laptop, bring a laptop to class every day with the Development Tools installed on it. Computers issued by the School, ie Chromebook, are not effective because of the restrictions placed on adding software by PUSD. If you have any problems obtaining a Computer where you can install software!, please attend Office Hours immediately\nGitHub Account, VSCode will be used to clone/push/pull changes. GitHub is where we store and share code in the cloud, think of Google Docs but for Code.\nGitHub Pages will be used to host your personal web site, notes, and experiences. Review GitHub concepts 2-min https://www.youtube.com/watch?v=phGdqJB6ep0\nJupyter Documents will be used in conjunction with GitHub Pages to build running Java Code in to your Technical Notes. Review Jupyter basics 6-min https://www.youtube.com/watch?v=3jZYC9rGrNg\nSlack Account, install App on Laptop, get used to reading announcements. Slack is a messaging tool similar to Discord, the first year we had 35,000 message in a class.\nPython is the key language you will be using in this class. Flask, Jinja2, HTML, CSS, JavaScript are the key supporting technicals you will be using to enhance your learning of coding.\nVSCode is the code editor we will be using in this class. VSCode is more than and editor, it is called and Interactive Development Environment (IDE).\nAnaconda is the environment manager. Conda is an open-source package and environment management system that runs on Windows, macOS, and Linux.\nHomebrew for MacOS installs packages (Java, Python) you need for Development that Apple did not include.\nApt for WSL Ubuntu installs the packages (Java, Python) you need for Development that Ubuntu did not include.\nAWS Account for cloud computing and deployment, account access will be provided by Teacher. AWS Cloud Computing and Electric Cloud Computing (EC2’s) will be used to Deploy and Support projects on the Internet.\n\n\n\n\n\nFollow instruction https://docs.github.com/en/get-started/signing-up-for-github/signing-up-for-a-new-github-account Use your own personal/permanent email… NOT SCHOOL!!! GitHub belong to you.\n\n\n\n\n\nPython2 install on MacOS - Install Python2\n\n\nVSCode install on MacOS.\n- Install VSCode\n\n\nAnaconda install on MacOS. - Download for MacOS: Anaconda - Run Install: Answer yes to questions\n\n\nHomebrew install on MacOS - Copy and Paste to Install from Terminal Homebrew - Copy bash ... curl ... command using copy box on website - Launch terminal from search bar - Paste bash ... curl ... command into Terminal … - Make sure command starts, this should provide feedback/output in terminal and could take a long time, like 10-min, there could be a prompt in the middle, at about 5-minutes. Follow any on screen instructions provided in terminal output to finish. - Homebrew installs a tool called “brew” which helps add and manage developer packages on MacOS.\n\n\nAt this point, the next task is to prepare for Jupyter Notebooks and Kernels. You must start a new Terminal. Now the Terminal prompt should be prefixed with (base). If not, you need to go back to Anaconda install. - Open new Terminal. If your prompt is not looking like this you need to back up.\n\n(base) iMac:~ jmort1021$\n\nKey Packages needed on MacOS - Close and Start a new terminal, run each command in Terminal\n\n$ brew list # list packages\n$ brew update # update package list\n$ brew upgrade # upgrade packages\n$ brew install git  # install latest git\n$ brew install python # install python3 for development\n$ python --version # version of python3 installed\n$ brew install java # openjdk install\n\n\n\n\nVSCode install using WSL. Windows users have option to have best of Windows and Linux while developing within VSCode. - Install VSCode using WSL. - Required review, become familiar with Windows WSL development\n\n\nAnaconda install on WSL. - Try the exact commands in WSL Command / Powershell.\n- Only if there is a wget error… To find the latest Linux-x86 distribution scroll to the bottom of this page: https://www.anaconda.com/products/distribution. Change wget and Anaconda3 command based on new link.\n\n> PS C:\\Users\\UserName> wsl  # Windows prompt to WSL command\n$ cd /tmp\n$ wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh\n$ chmod +x Anaconda3-2022.05-Linux-x86_64.sh\n# Answer yes to all the prompts\n$ ./Anaconda3-2022.05-Linux-x86_64.sh\n\nAt this point, the next task is to prepare for Packages, Jupyter Notebooks, and Kernels. You must start a new WSL Command / Powershell. Now the WSL prompt should be prefixed with (base) from Anaconda install. If not, you need to go back to Anaconda install. - Open Command / Powershell. If you are not looking like this you need to back up.\n\n> PS C:\\Users\\ShayM> wsl  # Windows prompt\n(base) shay@MSI:/mnt/c/Users/ShayM$ cd ~ # WSL prompt\n(base) shay@MSI:~$ # WSL home, best place to install files\n\nKey Packages needing update on WSL Ubuntu - In a WSL Command / Powershell install Python3\n\n$ sudo apt list # list packages\n$ sudo apt update # update package list\n$ sudo apt upgrade # upgrade packages\n$ sudo apt install python2 # install python2 for package dependencies\n$ sudo apt install python3 python3-pip # install python3 and pip3 for development\n$ python --version  # version of python3 should be shown\n$ sudo apt install default-jdk default-jre  # java install\n$ java --version  # java runtime version\n$ javac --version # java compiler version\n$ sudo apt install unzip  # unzip utility\n\n\n\n\nInstall Jupyter and check kernels\n\n(base) id:~$ conda --version \n(base) id:~$ conda install jupyter # install jupyter\n(base) id:~$ jupyter kernelspec list # list installed kernels\nAvailable kernels:\n  python3    /home/shay/.local/share/jupyter/kernels/python3\n\nInstall Bash kernel.\n\n(base) id:~$ # start in home directory\n(base) id:~$ pip install bash_kernel # download bash kernel\nCollecting bash_kernel\n  Downloading bash_kernel-0.7.2-py2.py3-none-any.whl (15 kB)\nRequirement already satisfied: pexpect>=4.0 in ./anaconda3/lib/python3.9/site-packages (from bash_kernel) (4.8.0)\nRequirement already satisfied: ptyprocess>=0.5 in ./anaconda3/lib/python3.9/site-packages (from pexpect>=4.0->bash_kernel) (0.7.0)\nInstalling collected packages: bash-kernel\nSuccessfully installed bash-kernel-0.7.2\n(base) id:~$ python -m bash_kernel.install # install kernel\nInstalling IPython kernel spec\n(base) id:~$ jupyter kernelspec list # list kernels\nAvailable kernels:\n  bash       /home/shay/.local/share/jupyter/kernels/bash\n  python3    /home/shay/.local/share/jupyter/kernels/python3\n\nInstall JavaScript kernel. Output not shown, answer y or yes to questions.\n\n(base) id:~$ conda install nodejs # node is framework for JavaScript kernel\n(base) id:~$ npm -version  # node package manager comes with nodejs\n(base) id:~$ npm install -g ijavascript  # get the kernel\n(base) id:~$ ijsinstall # install javascript kernel\n(base) id:~$ jupyter kernelspec list # list kernels\nAvailable kernels:\n  bash          /home/shay/.local/share/jupyter/kernels/bash\n  javascript    /home/shay/.local/share/jupyter/kernels/javascript\n  python3       /home/shay/.local/share/jupyter/kernels/python3\n\n\n\n\nStart Pages/Fastpages from GitHub Setup Instructions - Recommended Video - 27 minutes - Verify GitHub pages is running - Clone and Open project in VSCode\n\n(base) id:~$ mkdir -p vscode # make a vscode directory\n(base) id:~$ cd vscode # change to the directory\n(base) id:~$ git clone https://github.com/nighthawkcoders/APCSP.git # change to your repo\n(base) id:~$ code . # open VSCode projects in directory\n\nPush a minor “markdown” change and Verify on GitHub https://code.visualstudio.com/docs/editor/versioncontrol#_git-support\nVerify “markdown” change on GitHub Pages\nCreate a new Jupyter notebook and publish to _notebooks directory https://code.visualstudio.com/docs/datascience/jupyter-notebooks ### VSCode Marketplace and Extensions\n\n\n<div style=\"float: left; margin: 0px 10px 10px 0px;\">\n    <a href=\"https://marketplace.visualstudio.com/vscode\">\n        <img atl=\"Roles and Agile\" src=\"{{site.baseurl}}/images/extensions.png\" title=\"VS Code Marketplace\"\n        width=\"250\">\n    </a>\n</div>\n<div>\n    <hr>\n    <p>\n    Visual Studio Code claims to provide just the tools a developer needs for a quick code-build-debug and version control cycle.  It provides a Market Place for enhancements and more complex workflows.  <mark>Before adding extensions, clone projects</mark> and see what is requested or added.  Here are some extension that were added through that process or that I have added...\n    </p>\n    <ul>\n        <li>\n            <mark>In marketplace</mark> there are several extensions for Python, Python Intellisense, Python Extension Pack\n        </li>\n        <li>\n            <mark>Jupyter</mark>: This supports build jupyter ipynb files from within VS Code\n        </li>\n        <li>\n            <mark>Code Spell Checker</mark>: Got to have it when building documents, particularly if you spell and typo like the Teacher\n        </li>\n        <li>\n            <mark>IntelliCode</mark>: Got to have it when creating a code file, it will sense type of code by extension.  Also, it help with syntax as you are coding.\n        </li>\n    </ul>\n    <p>\n    <mark>Review Details in Marketplace for better explanation of purpose of the things explained above</mark>. There is a lot more!  As you need Git help look at things like <mark>Git History and GitLens</mark>.  Or, perhaps you enjoy Vim and want Vim emulation for editing, their is an extension for that.  Later, there may be interest in AWS Toolkit or Deploy extensions.  We will learn more about Marketplace Extensions as we do more.\n    </p>\n    <hr>\n</div>\n\n\n\n\n\nVS Code https://code.visualstudio.com/docs/languages/python\n\nInstall Python, Python Environment Manager, Python Extension Pack, Pylance\nInstall Jupyter, Jupyter Keymap\nInstall IntelliCode, IntelliCode API Usage Examples\nWindows machines install WSL Remote Development"
  },
  {
    "objectID": "blog/posts/2022-08-15-PBL-tools.html#hacks",
    "href": "blog/posts/2022-08-15-PBL-tools.html#hacks",
    "title": "Tools and Equipment",
    "section": "Hacks",
    "text": "Hacks\nStudents need to demonstrate all these tools running to Scrum Team and then the Teacher. Problems need to be worked out quickly. Before asking Teacher ask 3 other students. Do not delay in Tool Setup task, there will be no late makeup for points!!! Tool and Equipment setup is like attendance, without Tools and Equipment you are effectually absent. - Provide a comment on this page to show Tool success - Hint. Make a simple comment “Working on it”. This can be edited by clicking on Time Stamp of post; at this point you will see triple dots (…); clicking dots provides an Edit option; clicking Edit takes you to a friendly “Markdown editor”. Enjoy this editor, my suggestion is build your entire message in thi editor and/or build personal message in Fastpages / GitHub pages “_post” and share the following. - Share link to personal Fastpages / GitHub pages running on github.io. My suggestion is to change index.html to show it is really yours. - Share link to a new page (_posts) in your Fastpages project show use of Markdown and/or HTML fragments. You will need to learn special date requirements of a file as well as a little Markdown or HTML. - Share link to your 1st Jupyter notebook (_notebooks) showing usage of Python: print (“Hello”) - Capture image/screen capture of Fastpages project showing use of an Integrated Development Environment (VS Studio) - Share link showing your GitHub insights. This is your personal activity of commit history."
  },
  {
    "objectID": "blog/posts/2022-06-01-nbdev_quarto.html",
    "href": "blog/posts/2022-06-01-nbdev_quarto.html",
    "title": "NBDEV/Quarto Installation Guide",
    "section": "",
    "text": "Create new repository with nbdev\nDocumentation\nFor the most part the documentation is pretty straight forward. Here are some extra details that might be helpful: * When you initialize the repository, remember to use mkdir and do the commands in that directory. * You will be asked to generate a token for a password, you will need to make sure to give yourself repository permissions on the token otherwise the password will give you a 403 error when you run git push. More Info Here\nInstall hooks for git-friendly notebooks\nconda install -c conda-forge pre-commit\nNote: this command took me a long time.\nInstall packages:\npip install -e '.[dev]'\nThis command is similar to make server:\nnbdev_preview\nBefore commiting your changes to GitHub the developers recommend running:\nnbdev_prepare\n\n\nTransfer posts from old repository\nIn your new directory run:\n$ quarto create-project --type website:blog .\nMigrate posts and notebooks with these commands: *It is a good idea to delete all the markdown posts that were created by make server (the files you put into .gitignore)\n$ cp -r ../blog/_notebooks/* posts\n$ cp -r ../blog/_posts/* posts\nFor me the .. is home/username and blog is replaced with the directory that the repository is called.\nDo the same with images\n$ cp ../blog/images/* posts\n$ cp -r ../blog/images/copied_from_nb/* posts/\nInstall nbdev to migrate\n$ conda install -c fastai nbdev\n\n$ nbdev_migrate --path posts\nIf you didn’t delete the markdown posts I specified earlier you will run into an exception error. You will need to manually remove these files in the posts directory.\nCreating the Blog"
  },
  {
    "objectID": "blog/posts/2022-06-01-legal_ethics.html",
    "href": "blog/posts/2022-06-01-legal_ethics.html",
    "title": "Legal and Ethical Concerns",
    "section": "",
    "text": "In my most recent years in industry, there were many Lawyers making a profession on Patents and how they can be impacted on General Public Licensing (GPL).\nQualcomm makes its money on patents, if you use GPL software you could be voiding your rights to charge for software and patents. Open Source by nature, specifically GPL, says any derivative work is free and code should be shared. Qualcomm wants all derivative work to require a royalty payment payment, also anyone who uses the idea/patent pays royalty.\n\nFrom synopsis.com, “Black Duck® software composition analysis (SCA) helps teams manage the security, quality, and license compliance risks that come from the use of open source and third-party code in applications and containers.” Qualcomm has had 20 technical jobs and 3 lawyers analyzing all the code produced, analyzing code for Open Source inclusion, and analyzing impact of such licenses to its ability to charge royalties for the use of their Patents.\nThis may sound like a simple problem, but think about the Students of Today, often they are given an assignment and instead of developing their own algorithm they opt to copy something off the internet. Well, don’t think the Workers of Today are entirely different. In summary, it is important to know the type of software license you are copying, it could impact billions of dollars in business."
  },
  {
    "objectID": "blog/posts/2022-06-01-legal_ethics.html#license-communities-license-types-guide",
    "href": "blog/posts/2022-06-01-legal_ethics.html#license-communities-license-types-guide",
    "title": "Legal and Ethical Concerns",
    "section": "License Communities, License Types Guide",
    "text": "License Communities, License Types Guide\n\nAdding and selecting a license GitHub instructions. An author, a licensor, needs to determine a license. This may result in asking…\n\n\nDo I want to waive default copyright in reuse?\nDo I want to allow derivative works or not?\nDo I want to require all derivative code to be shared?\n\n\nCreative Commons Zero v1.0 Universal\nThe Creative Commons CC0 Public Domain Dedication waives copyright interest in a work you’ve created and dedicates it to the world-wide public domain.\n\n\nOpen Source MIT License\nThis license in friendly to someone like Qualcomm! This allows using code freely and making and distributing closed source versions.\n\n\nOpen Source GPL License\nThe GNU GPLv3 also lets people do almost anything they want with your project, except distributing closed source versions.\nFor a company like Qualcomm, they are required to institute many practices to deliver their code in parts. Isolating their patent and secret code, far away from the GPL Creative Commons code. In fact, a company that is protecting their patents may need to division engineers, split distribution code, etc. Even though, the customer of the derivative work is required to put the code back together again to make it work."
  },
  {
    "objectID": "blog/posts/2022-06-01-legal_ethics.html#legal-and-ethically",
    "href": "blog/posts/2022-06-01-legal_ethics.html#legal-and-ethically",
    "title": "Legal and Ethical Concerns",
    "section": "Legal and Ethically",
    "text": "Legal and Ethically\nWe need to comply with the terms of licenses. We need to cite sources. (I am particularly bad with internet pictures. However, in the picture of the Black Duck above I am actually advertising the Company).\nAs consumers, we have become aware that Music and Movie companies own content. These companies build DRM (Digital Rights Management) software to protect, play, and/or distribute content. Most of us buy subscriptions to services. However, some figure out ways to bypass systems and allow download. Often we will see these sites disappear, as they are illegal.\nIn software, it can be more complicated to understand all the Creative Commons licenses and its impact to our own ideas and businesses. Mostly, if we use things in class, there is no problem with Open Source as it is considered educational use. Creative Commons software has enabled amazing innovation as we are able to do so much for free, as we have done in this class. However, Individuals and Companies are required to figure out techniques and business models in order to use Open Source software according to terms of license.\nLong ago, I remember being amazed that Red Hat was not selling its Linux distribution, they were giving away the software. They had to as the terms of the license were GPL. However, as an early pioneers in Linux distributions, they established a business model around buying their support agreement. They rose in fortune, became a public company, and had an amazing Initial Public Offering (IPO). Many, many vendors have followed the Red Hat model in building free distributions and establish unique business models. Qualcomm figured out how to mix Patent and GPL businesses and have flourished since abandoning all proprietary, to include Android in its very complicated business model.\nCreative Commons, Open Source are free terminologies! However, businesses will not last without income. And today, businesses won’t last without engineers pulling Open Source software."
  },
  {
    "objectID": "blog/posts/2022-08-15-PT-tool_setup.html",
    "href": "blog/posts/2022-08-15-PT-tool_setup.html",
    "title": "Tool Setup Sprint and Pair Programming",
    "section": "",
    "text": "Points Link"
  },
  {
    "objectID": "blog/posts/2022-08-15-PT-tool_setup.html#real-world-projects",
    "href": "blog/posts/2022-08-15-PT-tool_setup.html#real-world-projects",
    "title": "Tool Setup Sprint and Pair Programming",
    "section": "“Real World” Projects",
    "text": "“Real World” Projects\nYou, your pair, and your Scrum Team will collaboratively Build, deploy and host Web Site. This Web project contains Technicals learned throughout the Trimester. This will be done in increments. Each Monday an assignment will be given and the next week it will be under Live Review.\n\nFeature Considerations for Project\n\nProject Requirements\n\nA fun zone, unique idea(s)\nEducational zones that capture every key learning objective\nA location that highlights individuals, jobs, and technical capabilities (About Us)\n\nProject Technicals\n\nManaging PBL Requirement for Project (Issues, Scrum Board)\nUse of “Python Functions and Classes” in backend.\nUse of “JavaScript” or “Jinja2” in frontend\nData Structure exchange between frontend and backend “SQL” or “MongoDB”\n\n\nIndividual GitHub Pages considerations for Big Ideas 1 - 5\n\nEach week we will be studying Big Ideas in Collage Board Test Prep and PBL Tech Talks\nGH Pages should be used like notes to capture PBL, Python, JavaScript key learnings each week!\n\nBTW, using GH Pages will make you Code and Blog at the same time. Jupyter Notebooks using Python and Markdown will enable running code in notes, the Teachers like running code! Jupyter Notebooks can also do JavaScript, Bash and other languages.\n\n\n\nEstablish PBL and Comp Sci attitude\nWatch a video How I Would Learn To Code - Attitude. An Agile mindset is not knowing the answer, making lots of mistakes and performing iteration. A successful grade is dependent on making mistakes, research, asking questions, and iteration. - Suggestion. Please bring a personal laptop to class daily. The Internet and AP Classroom web site will be considered a text book.\n- Requirements. Everything will be distributed electronically. All code you develop will be delivered to the Cloud. No paper! - Grading guidelines. There will be key technical objectives which will require producing tangibles. Essentially, it is impossible to be late with work if you work consistently attend class, work in class and turn in progressive tangibles each week. Thus, failure to have work will result in a 10% deduction. Additionally, late work must be defended in office hours.\n- High “A” is very tough to achieve, something beyond the given tangible requirements. Something that exhibits an unforced desire to learn and Code/Code/Code. - Low “A” is consistency in producing tangibles toward Team Project and Individual GH Page according to Issues and Scrum Board plans. Plans must be consistent with key objectives and technicals. - “B” is having flaws in consistency or tangible shortcomings, but mostly on track. A flaw would be mostly working code, attempts, but incomplete. - “C” is a lack consistent effort, lacking tangibles. Lack of producing working Code. - Below “C” is composed of Slash/Slash/Slash offenses. Lack of attendance, disruptive behaviors, doing work from other classes during CompSci class time, paper visible in class, and turning in tangibles that you can’t represent in live review. - Zero is a result of plagiarism. The Teachers will likely miss first offense of plagiarism, thus any offense will result in an inquiry on previous work. Remember this is an effort based class."
  },
  {
    "objectID": "blog/posts/2022-08-15-PT-tool_setup.html#assignments-and-work",
    "href": "blog/posts/2022-08-15-PT-tool_setup.html#assignments-and-work",
    "title": "Tool Setup Sprint and Pair Programming",
    "section": "Assignments and Work",
    "text": "Assignments and Work\n\nAssignments mostly Due either Friday or Monday at the start of class (canvas is official record for point guidelines and synergy for points received)\n\nLive Grading, all grading is complemented by Self/Crossover assessments. Teachers are passionate about quality crossover reviews. This a big part of your personal learning. Taking a review lightly is taking your grade lightly, as poor review will cause a reduction in your own points.\nAlways prepare Review Ticket (GH Issue) using canvas assignment as a guide\n\nTrimester starts with 5 point seed (highly engaged +, extra activities +, distracted -)\nThere will be about 50 points per trimester, we will save a big chunk of points for the last few weeks of Trimester. Don’t get comfortable, keep working your CompSci muscles.\n\n\nPBL Sprint 0 / Week 0\nLearning outcome. Getting adapted to the Agile mindset used in Computer Science. Additionally, getting introduced to GitHub and showing usage of VSCode. Building a personal and running Fastpages/GitHub Pages. - Wednesday - “Introduction Sprint”. Pick pair share partner, Pick crossover pair, Establish team of four. Based off of modulo mathematics (remainder) there can only be 3 teams of 5 maximum. Spend some time talking and getting to know each other. Consider key roles in Project Teams as Scrum Master (Issues, Scrum Board), DevOps (GitHub, Deploy, .gitignore, requirements.txt), Frontend Developer (HTML, Jinja2, Javascript), Backend Developer (Flask, Python) - Thursday - Review “Tools and Equipment”. Bringing your laptop. Setup Fastpages and Tools and push code to your Repo and track updates of Fastpages to deployment. - Friday - Start with Pair Share coding. Spend 25 minutes at keyboard finishing installation and performing fastpages coding, while Pair Share observes and consults. Next 25 minutes Pairs reverse roles.\n\n\nEquipment, accounts and tools\n\nA laptop, that you bring to class every day with the Development Tools installed on it.\nGitHub Account, VSCode will be used to push/pull changes. GitHub is where we store and share code in the cloud, think of Google Docs but for Code.\nGitHub Pages will be used to host your personal web site, notes, and experiences. Building pages will teach Markdown, HTML Fragments, and JavaScript.\nJupyter Notebooks will be used in conjunction with GitHub Pages to build running Python Code in your Technical Notes.\nSlack Account, install App on Laptop, get used to reading announcements. Slack is the tool will use for messaging, we have been averaging 50K messages per year.\nPython is the key language you will be using in this class. Flask, Jinja2, HTML, CSS, JavaScript are the key supporting technicals you will be using to enhance your learning.\nVSCode is the code editor we will be using in this class. VSCode is more than and editor, this type of tool is often called an Interactive Development Environment (IDE).\nAWS is used for deployment, an AWS account will be provided by Teacher. AWS Cloud Computing and Servers will be used to Deploy and Support projects on the internet."
  },
  {
    "objectID": "blog/posts/2022-12-01-pbl-2d-iteration.html",
    "href": "blog/posts/2022-12-01-pbl-2d-iteration.html",
    "title": "Python 2D Iteration",
    "section": "",
    "text": "Try to build a Christmas Tree. The top shape and a trunk. There are two ways to do this… - Build it by pre-populating a 2D array - Build it completely programmatically\n\nUse the code below to help guide your adventure\n\n\"\"\"\n* Creator: Nighthawk Coding Society\n2D arrays\n\"\"\"\n\n# Classic nested loops using ij indexes, this shows 2 dimensions\ndef print_matrix1(matrix):\n    print(\"Classic nested loops using ij indexes\")\n    for i in range(len(matrix)):  # outer loop (i), built on length of matrix (rows)\n        for j in range(len(matrix[i])):  # inner loop (j), built on length of items (columns)\n            print(matrix[i][j], end=\" \")  # [i][j] is 2D representation, end changes newline to space\n        print()\n\n\n# Enhanced nested for loops, row and col variables\ndef print_matrix2(matrix):\n    print(\"Enhanced nested for loops\")\n    for row in matrix:  # short hand row iterator, index is not required\n        for col in row:  # short hand column iterator\n            print(col, end=\" \")\n        print()\n\n\n# For loop with shortcut (*) row expansion\ndef print_matrix3(matrix):\n    print(\"For loop with shortcut (*) row expansion\")\n    for row in matrix:\n        print(*row)  # pythons has (*) that is one line expansion of row into columns\n\n\ndef test_matrices():\n    # setup some text matrices\n    keypad = [[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9],\n              [\" \", 0, \" \"]]\n\n    keyboard = [[\"`\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, \"-\", \"=\"],\n                [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\", \"[\", \"]\"],\n                [\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \";\", \"'\"],\n                [\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\", \",\", \".\", \"/\"]]\n\n    numbers = [\n            [0, 1], # binary\n            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], # decimal\n            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"] # hexadecimal\n            ]\n\n    # pack into a list of matrices with titles\n    matrices = [[\"Keypad\", keypad], [\"Keyboard\", keyboard], [\"Number Systems\", numbers]]\n\n    # loop 2D matrix with returning list in [key, value] arrangement\n    for title, matrix in matrices:  # unpack title and matrix as variables\n        \n        # formatted message with concatenation\n        print(title, len(matrix), \"x\", \"~\" + str(len(matrix[0])))  \n        \n        # use three different methods\n        print_matrix1(matrix)\n        print_matrix2(matrix)\n        print_matrix3(matrix)\n        # blank link in between\n        print()\n\n\n# tester section\nif __name__ == \"__main__\":\n    test_matrices()\n\nKeypad 4 x ~3\nClassic nested loops using ij indexes\n1 2 3 \n4 5 6 \n7 8 9 \n  0   \nEnhanced nested for loops\n1 2 3 \n4 5 6 \n7 8 9 \n  0   \nFor loop with shortcut (*) row expansion\n1 2 3\n4 5 6\n7 8 9\n  0  \n\nKeyboard 4 x ~13\nClassic nested loops using ij indexes\n` 1 2 3 4 5 6 7 8 9 0 - = \nQ W E R T Y U I O P [ ] \nA S D F G H J K L ; ' \nZ X C V B N M , . / \nEnhanced nested for loops\n` 1 2 3 4 5 6 7 8 9 0 - = \nQ W E R T Y U I O P [ ] \nA S D F G H J K L ; ' \nZ X C V B N M , . / \nFor loop with shortcut (*) row expansion\n` 1 2 3 4 5 6 7 8 9 0 - =\nQ W E R T Y U I O P [ ]\nA S D F G H J K L ; '\nZ X C V B N M , . /\n\nNumber Systems 3 x ~2\nClassic nested loops using ij indexes\n0 1 \n0 1 2 3 4 5 6 7 8 9 \n0 1 2 3 4 5 6 7 8 9 A B C D E F \nEnhanced nested for loops\n0 1 \n0 1 2 3 4 5 6 7 8 9 \n0 1 2 3 4 5 6 7 8 9 A B C D E F \nFor loop with shortcut (*) row expansion\n0 1\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9 A B C D E F"
  },
  {
    "objectID": "blog/posts/2022-12-01-pbl-2d-iteration.html#hacks-monkey-jumpers-mini-lab",
    "href": "blog/posts/2022-12-01-pbl-2d-iteration.html#hacks-monkey-jumpers-mini-lab",
    "title": "Python 2D Iteration",
    "section": "Hacks Monkey Jumpers (Mini-lab)",
    "text": "Hacks Monkey Jumpers (Mini-lab)\n\nFeel free to use any ASCII art of your choice, there are some much better monkeys here. My little guys were simply made up out of my head while looking at unicode characters.\n\n\nBuild more monkeys, different monkeys or entire rhyme for the “Monkey Jumpers” countdown poem\nAdd names or other properties to the monkeys\nUse a completely different application of something that is 2D.\nPrint monkeys horizontally versus vertically.\n\n\n\"\"\"\n * Creator: Nighthawk Coding Society\n * Mini Lab Name: Hello Series, featuring Monkey Jumpers Poem\n\"\"\"\n\ndef main():\n    print(\"Nursery Rhyme\")  # identification message\n    \n    # ANSI Color Codes\n    Red = \"\\u001b[31m\"\n    Green = \"\\u001b[32m\"\n    Yellow = \"\\u001b[33m\"\n    Blue = \"\\u001b[34m\"\n    Magenta = \"\\u001b[35m\"\n\n    \"\"\" 2D array data assignment \"\"\"\n    monkeys = [\n        [\n            Red,\n            \"ʕง ͠° ͟ل͜ ͡°)ʔ \",  # [0][0] eyes\n            \"  \\\\_⏄_/  \",  # [0][1] chin\n            \"  --0--   \",  # [0][2] body\n            \"  ⎛   ⎞   \"  # [0][3] legs\n        ],\n        [\n            Green,\n            \" ʕ༼ ◕_◕ ༽ʔ \",  # [1][0]\n            \"  \\\\_⎏_/  \",\n            \"  ++1++  \",\n            \"   ⌋ ⌊   \"\n        ],\n        [\n            Yellow,\n            \" ʕ(▀ ⍡ ▀)ʔ\",  # [2][0]\n            \"  \\\\_⎐_/ \",\n            \"  <-2->  \",\n            \"  〈  〉 \"\n        ],\n        [\n            Blue,\n            \"ʕ ͡° ͜ʖ ° ͡ʔ\",  # [3][0]\n            \"  \\\\_⍾_/  \",\n            \"  ==3==  \",\n            \"  _/ \\\\_  \"\n        ],\n        [\n            Magenta,\n            \"  (◕‿◕✿) \",  # [4][0]\n            \"  \\\\_⍾_/ \",  # [4][1]\n            \"  ==4==  \",  # [4][2]\n            \"  _/ \\\\_ \"  # [4][3]\n        ]\n    ]\n\n    \"\"\" 2D array program logic \"\"\"\n    # cycles through 2D array backwards\n    for i in range(len(monkeys), -1, -1):\n        # this print statement shows current count of Monkeys\n        # concatenation (+) of the loop variable and string to form a countdown message\n        print(str(i) + \" little monkeys jumping on the bed...\")\n\n        # cycle through monkeys that are left in poem countdown\n        for row in range(i - 1, -1, -1):  # cycles through remaining monkeys in countdown\n\n            # cycles through monkey part by part\n            for col in range(len(monkeys[row])):\n                # prints specific part of the monkey from the 2D cell\n                print(monkeys[row][col] + \" \")\n\n            # this new line gives separation between stanza of poem\n            print(\"\\u001b[0m\")  # reset color\n\n    # out of all the loops, prints finishing messages\n    print(\"No more monkeys jumping on the bed\")\n    print(\"0000000000000000000000000000000000\")\n    print(\"             THE END              \")\n\n\nif __name__ == \"__main__\":\n    main()\n\nNursery Rhyme\n5 little monkeys jumping on the bed...\n \n  (◕‿◕✿)  \n  \\_⍾_/  \n  ==4==   \n  _/ \\_  \n\n \nʕ ͡° ͜ʖ ° ͡ʔ \n  \\_⍾_/   \n  ==3==   \n  _/ \\_   \n\n \n ʕ(▀ ⍡ ▀)ʔ \n  \\_⎐_/  \n  <-2->   \n  〈  〉  \n\n \n ʕ༼ ◕_◕ ༽ʔ  \n  \\_⎏_/   \n  ++1++   \n   ⌋ ⌊    \n\n \nʕง ͠° ͟ل͜ ͡°)ʔ  \n  \\_⏄_/   \n  --0--    \n  ⎛   ⎞    \n\n4 little monkeys jumping on the bed...\n \nʕ ͡° ͜ʖ ° ͡ʔ \n  \\_⍾_/   \n  ==3==   \n  _/ \\_   \n\n \n ʕ(▀ ⍡ ▀)ʔ \n  \\_⎐_/  \n  <-2->   \n  〈  〉  \n\n \n ʕ༼ ◕_◕ ༽ʔ  \n  \\_⎏_/   \n  ++1++   \n   ⌋ ⌊    \n\n \nʕง ͠° ͟ل͜ ͡°)ʔ  \n  \\_⏄_/   \n  --0--    \n  ⎛   ⎞    \n\n3 little monkeys jumping on the bed...\n \n ʕ(▀ ⍡ ▀)ʔ \n  \\_⎐_/  \n  <-2->   \n  〈  〉  \n\n \n ʕ༼ ◕_◕ ༽ʔ  \n  \\_⎏_/   \n  ++1++   \n   ⌋ ⌊    \n\n \nʕง ͠° ͟ل͜ ͡°)ʔ  \n  \\_⏄_/   \n  --0--    \n  ⎛   ⎞    \n\n2 little monkeys jumping on the bed...\n \n ʕ༼ ◕_◕ ༽ʔ  \n  \\_⎏_/   \n  ++1++   \n   ⌋ ⌊    \n\n \nʕง ͠° ͟ل͜ ͡°)ʔ  \n  \\_⏄_/   \n  --0--    \n  ⎛   ⎞    \n\n1 little monkeys jumping on the bed...\n \nʕง ͠° ͟ل͜ ͡°)ʔ  \n  \\_⏄_/   \n  --0--    \n  ⎛   ⎞    \n\n0 little monkeys jumping on the bed...\nNo more monkeys jumping on the bed\n0000000000000000000000000000000000\n             THE END"
  },
  {
    "objectID": "blog/posts/2022-12-01-pbl-2d-iteration.html#animation-the-energetic-versus-lazy-programmer-methodsmini-lab",
    "href": "blog/posts/2022-12-01-pbl-2d-iteration.html#animation-the-energetic-versus-lazy-programmer-methodsmini-lab",
    "title": "Python 2D Iteration",
    "section": "Animation, the Energetic versus Lazy Programmer methods(Mini-lab)",
    "text": "Animation, the Energetic versus Lazy Programmer methods(Mini-lab)\n\nBuild your own moving object. Make a few frames the energetic way, then figure out how to do it the programmatic way. - Be creative, by the way, I have always wanted my Monkeys jumping on a bed.\n\n\n\"\"\"\n* Creator: Nighthawk Coding Society\nSailing Ship Animation (long method)\n\"\"\"\n\nimport time # used for delay\nfrom IPython.display import clear_output  # jupyter specific clear\n\n# ANSI Color Codes\nColor34 = \"\\u001b[34m\"\nColor37 = \"\\u001b[37m\"\n\n\n# As you can see, its not very optimal \ndef ship1():\n    print(\"    |\\ \")\n    print(\"    |/ \")\n    print(\"\\__ |__/ \")\n    print(\" \\____/ \")\n    print(\"\\u001b[34m -------------------------------------------- \\u001b[37m\")\n\n\ndef ship2():\n    print(\"      |\\ \")\n    print(\"      |/ \")\n    print(\"  \\__ |__/ \")\n    print(\"   \\____/ \")\n    print(\"\\u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \\u001b[37m\")\n\n\ndef ship3():\n    print(\"        |\\ \")\n    print(\"        |/ \")\n    print(\"    \\__ |__/ \")\n    print(\"     \\____/ \")\n    print(\"\\u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \\u001b[37m\")\n\n\ndef ship4():\n    print(\"          |\\ \")\n    print(\"          |/ \")\n    print(\"      \\__ |__/ \")\n    print(\"       \\____/ \")\n    print(\"\\u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \\u001b[37m\")\n\n\ndef ship5():\n    print(\"            |\\ \")\n    print(\"            |/ \")\n    print(\"        \\__ |__/ \")\n    print(\"         \\____/ \")\n    print(\"\\u001b[34m -------------------------------------------- \\u001b[37m\")\n\n\ndef ship6():\n    print(\"              |\\ \")\n    print(\"              |/ \")\n    print(\"          \\__ |__/ \")\n    print(\"           \\____/ \")\n    print(\"\\u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \\u001b[37m\")\n\n\ndef ship7():\n    print(\"                |\\ \")\n    print(\"                |/ \")\n    print(\"            \\__ |__/ \")\n    print(\"             \\____/ \")\n    print(\"\\u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \\u001b[37m\")\n\n\ndef ship8():\n    print(\"                  |\\ \")\n    print(\"                  |/ \")\n    print(\"              \\__ |__/ \")\n    print(\"               \\____/ \")\n    print(\"\\u001b[34m -------------------------------------------- \\u001b[37m\")\n\n\ndef ship9():\n    print(\"                    |\\ \")\n    print(\"                    |/ \")\n    print(\"                \\__ |__/ \")\n    print(\"                 \\____/ \")\n    print(\"\\u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \\u001b[37m\")\n\n\ndef ship10():\n    print(\"                      |\\ \")\n    print(\"                      |/ \")\n    print(\"                  \\__ |__/ \")\n    print(\"                   \\____/ \")\n    print(\"\\u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \\u001b[37m\")\n\n\ndef ship11():\n    print(\"                        |\\ \")\n    print(\"                        |/ \")\n    print(\"                    \\__ |__/ \")\n    print(\"                     \\____/ \")\n    print(\"\\u001b[34m -------------------------------------------- \\u001b[37m\")\n\n\ndef ship12():\n    print(\"                          |\\ \")\n    print(\"                          |/ \")\n    print(\"                      \\__ |__/ \")\n    print(\"                       \\____/ \")\n    print(\"\\u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \\u001b[37m\")\n\n\ndef ship13():\n    print(\"                            |\\ \")\n    print(\"                            |/ \")\n    print(\"                        \\__ |__/ \")\n    print(\"                         \\____/ \")\n    print(\"\\u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \\u001b[37m\")\n\n\ndef ship14():\n    print(\"                              |\\ \")\n    print(\"                              |/ \")\n    print(\"                          \\__ |__/ \")\n    print(\"                           \\____/ \")\n    print(\"\\u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \\u001b[37m\")\n\n\ndef ship15():\n    print(\"                                |\\ \")\n    print(\"                                |/ \")\n    print(\"                            \\__ |__/ \")\n    print(\"                             \\____/ \")\n    print(\"\\u001b[34m -------------------------------------------- \\u001b[37m\")\n\n\ndef ship16():\n    print(\"                                  |\\ \")\n    print(\"                                  |/ \")\n    print(\"                              \\__ |__/ \")\n    print(\"                               \\____/ \")\n    print(\"\\u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \\u001b[37m\")\n\n\ndef ship17():\n    print(\"                                    |\\ \")\n    print(\"                                    |/ \")\n    print(\"                                \\__ |__/ \")\n    print(\"                                 \\____/ \")\n    print(\"\\u001b[34m -------------------------------------------- \\u001b[37m\")\n\n\ndef ship18():\n    print(\"                                      |\\ \")\n    print(\"                                      |/ \")\n    print(\"                                  \\__ |__/ \")\n    print(\"                                   \\____/ \")\n    print(\"\\u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \\u001b[37m\")\n\n\ndef ship19():\n    print(\"                                        |\\ \")\n    print(\"                                        |/ \")\n    print(\"                                    \\__ |__/ \")\n    print(\"                                     \\____/ \")\n    print(\"\\u001b[34m -------------------------------------------- \\u001b[37m\")\n\n\ndef ship20():\n    print(\"                                          |\\ \")\n    print(\"                                          |/ \")\n    print(\"                                      \\__ |__/ \")\n    print(\"                                       \\____/ \")\n    print(\"\\u001b[34m -------------------------------------------- \\u001b[37m\")\n\n\nclear_output(wait=True)\ntime.sleep(.1)\nship1()\ntime.sleep(.5)\nclear_output(wait=True)\nship2()\ntime.sleep(.5)\nclear_output(wait=True)\nship3()\ntime.sleep(.5)\nclear_output(wait=True)\nship4()\ntime.sleep(.5)\nclear_output(wait=True)\nship5()\ntime.sleep(.5)\nclear_output(wait=True)\nship6()\ntime.sleep(.5)\nclear_output(wait=True)\nship7()\ntime.sleep(.5)\nclear_output(wait=True)\nship8()\ntime.sleep(.5)\nclear_output(wait=True)\nship9()\ntime.sleep(.5)\nclear_output(wait=True)\nship10()\ntime.sleep(.5)\nclear_output(wait=True)\nship11()\ntime.sleep(.5)\nclear_output(wait=True)\nship12()\ntime.sleep(.5)\nclear_output(wait=True)\nship13()\ntime.sleep(.5)\nclear_output(wait=True)\nship14()\ntime.sleep(.5)\nclear_output(wait=True)\nship15()\ntime.sleep(.5)\nclear_output(wait=True)\nship16()\ntime.sleep(.5)\nclear_output(wait=True)\nship17()\ntime.sleep(.5)\nclear_output(wait=True)\nship18()\ntime.sleep(.5)\nclear_output(wait=True)\nship19()\ntime.sleep(.5)\nclear_output(wait=True)\nship20()\ntime.sleep(.5)\n\n                                          |\\ \n                                          |/ \n                                      \\__ |__/ \n                                       \\____/ \n -------------------------------------------- \n\n\n\n\"\"\"\n* Creator: Nighthawk Coding Society\nSailing Ship Animation (programatic method)\n\"\"\"\n\nimport time # used for delay\nfrom IPython.display import clear_output  # jupyter specific clear\n\n\n# ANSI Color Codes\nOCEAN_COLOR = u\"\\u001B[34m\\u001B[2D\"\nSHIP_COLOR = u\"\\u001B[32m\\u001B[2D\"\nRESET_COLOR = u\"\\u001B[0m\\u001B[2D\"\n\ndef ship_print(position):  # print ship with colors and leading spaces according to position\n    clear_output(wait=True)\n    print(RESET_COLOR)\n    \n    sp = \" \" * position\n    print(sp + \"    |\\   \")\n    print(sp + \"    |/   \")\n    print(SHIP_COLOR, end=\"\")\n    print(sp + \"\\__ |__/ \")\n    print(sp + \" \\____/  \")\n    print(OCEAN_COLOR + \"--\"*35 + RESET_COLOR)\n\n\ndef ship():  # ship function, loop/controller for animation speed and times\n    # loop control variables\n    start = 0  # start at zero\n    distance = 60  # how many times to repeat\n    step = 2  # count by 2\n\n    # loop purpose is to animate ship sailing\n    for position in range(start, distance, step):\n        ship_print(position)  # call to function with parameter\n        time.sleep(.2)\n\n        \nship() # activate/call ship function\n\n\n                                                              |\\   \n                                                              |/   \n                                                          \\__ |__/ \n                                                           \\____/  \n----------------------------------------------------------------------"
  },
  {
    "objectID": "blog/posts/2022-08-22-PBL-fastpages.html",
    "href": "blog/posts/2022-08-22-PBL-fastpages.html",
    "title": "Fastpages Frontend Development - Tour of GitHub Pages",
    "section": "",
    "text": "<div>\n\n<div style=\"float: left; margin: 0px 10px 10px 0px;\">\n    <a href=\"https://code.visualstudio.com/docs/datascience/jupyter-notebooks\">\n        <img atl=\"Roles and Agile\" src=\"{{site.baseurl}}/images/fastpages.png\" title=\"VS Code screen capture\"\n        width=\"250\">\n    </a>\n</div>\n<div>\n    <hr>\n    <p>\n    GitHub Pages is a static site hosting service that takes files straight from a repository on GitHub,runs the files through a build process, and publishes a website. Fastpages is built on top of GitHub pages.  Fastpages automates the process of creating blog posts, so you don’t have to manually run conversion scripts. This tour begins by looking at Explorer in VS Code.  There are three automations to a GH Pages / Fastpages website...\n    </p>\n    <ul>\n        <li><mark>_notebooks</mark>: jupyter .ipynb files.  This allows building block of markdown, python, java, javascript into a jupyter notebook.</li>\n        <li><mark>_posts</mark>: markdown .md files.  This supports frontend web design with markdown, html, and javascript.</li>\n        <li><mark>_word</mark>: word .docx files.  This allows you to save Microsoft or Goggle documents into a docx format.  Saving these directly to _word folder will streamline steps.</li>\n    </ul>\n    <p>\n    Read more or review files in the <a href=\"https://github.com/fastai/fastpages#readme\">fastpages README.md</a>\n    </p>\n    <hr>\n</div>\n\n</div>\n\n\n\nThere are many resources, tutorials, and reference for building pages with HTML and Markdown. On these subjects, I would say learn it when you need it. Right clicking on Chrome provides View Page Source on any link on the Web. The APCSA/APCSP projects have many examples within these projects. Here are a couple of Web links I often find through google or refer to when looking for ideas … - HTML on W3Schools - Markdown Cheat Sheet\n\n\n\nThe Home page is sourced by the index.html file. This is the file to personalize and customize your Fastpages home page. BTW, index.html is the standard name for your web sites landing page. GH Pages / Fastpages builds allows you to mix Markdown and HTML within the index.html file.\n\n\n\nLook under _pages folder within the Navigator. In this directory, there are several .md files. These allow a combination of HTML and Markdown. Observe that this project has prefix of 01, 02, 03 on the .md files allows control the order of menus from left to right… - 01_search.md: This provides a very cool search on the site. The search.md is renamed but the contents are untouched from fastpages project. - 02_tags.md: This provide a very cool tagging system that is related to the “categories: categoryname” that are seen at the top of all the GH Pages / Fastpages _posts. This tags.md is renamed but the contents are untouched from fastpages project. - 03_about.md: This page is left for your individual customization, similar to index.html - Developers can add .md file of choice and order according to preference.\n\n\n\nLook under images folder and you will see files added to support the site. Some are for customization of the site others are for pages. - Site: favicon.ico, logo.png - Pages: agile.webp, apcsp.png\n\n\n\nThe _config.yml has many strings and preferences that are specific to the site. The file is full of comments that describe what can be changed and what should remain untouched. Note, the .yml files will be seen again as we begin to deploy our own site with Docker."
  },
  {
    "objectID": "blog/posts/2022-08-22-PBL-fastpages.html#hacks",
    "href": "blog/posts/2022-08-22-PBL-fastpages.html#hacks",
    "title": "Fastpages Frontend Development - Tour of GitHub Pages",
    "section": "Hacks",
    "text": "Hacks\nPersonalize index.html file and build your own Fastpages / GH Pages for personal use throughout the year. - Add _pages/notes.md or _pages/vocab.md, insert between tags.md and about.md. Use this area to capture idea and terms throughout the year.\n- Add some personal study or work pages. Consider how you will use these in conjunction with notes/vocab pages, search, and tagging. - Publish _notebook file - Publish _post file with image - Publish _docx file from Google Doc source\n\nExtra Credit\nConsider re-designing and using your home page for this class and for other subjects, other than Computer Science. The searching and tagging features are very powerful and could help recall notes from any class."
  },
  {
    "objectID": "blog/posts/2022-10-24-PT-project_week_2.html",
    "href": "blog/posts/2022-10-24-PT-project_week_2.html",
    "title": "Project Week 2",
    "section": "",
    "text": "Continue PBL - Project, checking issues, progress, - Monday: Tech Talk, Review Videos - Tuesday: Review Videos - Wednesday: Work Day - Thursday: Live Reviews - Friday: Live Reviews"
  },
  {
    "objectID": "blog/posts/2022-10-24-PT-project_week_2.html#live-review-3-points",
    "href": "blog/posts/2022-10-24-PT-project_week_2.html#live-review-3-points",
    "title": "Project Week 2",
    "section": "Live Review (3 points)",
    "text": "Live Review (3 points)\n\nSummary of Points - 1 point for issues - Show your planning process and what you have completed, discuss the problems you have encountered and how you solved them - 1 points for progress - Show what you have accomplish in the last week, discuss what still needs to be completed and explain how you plan to hit your deadline - 1 poinit for commits - Show that you have been making changes to your project"
  },
  {
    "objectID": "blog/posts/post-with-code/index.html",
    "href": "blog/posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "blog/posts/2022-10-10-AP-the_internet.html",
    "href": "blog/posts/2022-10-10-AP-the_internet.html",
    "title": "Big Idea 4 ‘The Internet’",
    "section": "",
    "text": "To date, with deployment individuals and teams have been very active Computing Systems and Networks. Here are some key elements that have been a part of the students Internet experience… 1. HTTP/HTTPs protocol. Think about elements in videos and experience so far in class that relate to this College Board topic. 2. DNS. Where is this show in the College Board materials. Think about Domain Name Service provider and places where you configured or used a Domain. Also, identify a Sub Domain and how it is different than a Domain. Include in discussion usage an purpose of https://www.whatsmydns.net/, A record and CNAME. 3. IP Address. Try to describe at least 6 IP addresses you use daily. Try using and understanding https://www.whatsmyip.org/. 4. Observe Internet Traffic. Try Linux tools bandwidth tools Article 5. Finish up with OSI. Try to make it real, according to what we have done."
  },
  {
    "objectID": "blog/posts/2022-10-10-AP-the_internet.html#hacks",
    "href": "blog/posts/2022-10-10-AP-the_internet.html#hacks",
    "title": "Big Idea 4 ‘The Internet’",
    "section": "Hacks",
    "text": "Hacks\n\nShow individual, pair, and team knowledge of Systems and interactions of Systems. - Review Big Idea Unit 4.1 videos and questions - Produce a Blog showing idea in ths Blog thinking about Systems and Devops so far in your experience. This blog will also show how you are planning and taking notes for College Board and PBL topics. - Electronic and Wall diagrams are highly recommended. These should be incorporated into blog(s)."
  },
  {
    "objectID": "blog/posts/2022-09-05-PBL-applab.html",
    "href": "blog/posts/2022-09-05-PBL-applab.html",
    "title": "Program Design with App Lab by Code.org",
    "section": "",
    "text": "App Lab is a programming environment where you can make simple apps. Design an app, code in JavaScript with either blocks or text, then share your app with Teacher or Student Peers. The big limitations of App Lab, that makes it simple, is that the HTML and CSS are not available to developer/student coder, thus it is not directly transportable to an independent Web server.\n\nTo start, please create a code.org account and click the link\n\n\n\nGo ahead and take a look at the interface, discuss with a partner what features you see.\n\n\n\n\nIn the code toolbox click variables and look at: console.log(“message”) Drag this into your workspace. You can change the message if you would like * The message does not print in the app. Where does it print? * Why would it be useful to have a print statement that the user does not see?\n\n\n\n\n\nMake sure you are in design mode and select the elements to drag into the app. Take a look at the changeable attributes of each elements. You can use the workspace to change these manually or you can try to change the attributes with a line of code.\n\n\nIn the code toolbox click UI controls. There are multiple functions that can affect the elements. Go ahead and play around with the different elements and see what you can do.\n\nShare something interesting you found with your partner.\nHow can you keep track of all the elements you created?"
  },
  {
    "objectID": "blog/posts/2022-09-05-PBL-applab.html#development-and-design-activity",
    "href": "blog/posts/2022-09-05-PBL-applab.html#development-and-design-activity",
    "title": "Program Design with App Lab by Code.org",
    "section": "Development and Design Activity",
    "text": "Development and Design Activity\nHere are some key requirements for this Activity… - Design and Development activity will start by reviewing a running example application - After review students will design a quiz, 3 question at a minimum. Be sure that a Development design is ready before you start coding - After design students will explore the App Lab programming environment - Students will then work in Pair Programming format and alternate in roles of Driver and Navigator. - At conclusion, pairs will go through a series of reviews.\n\nReview Running Example\nThis is an example of an incomplete program.\n\nWhat could you do to improve this program?\n\n\nDesign\n\nCome up with your own idea for 3 question quiz. You will be creating your own quiz with a partner on a topic of your choice. The most important thing you do before coding is to PLAN. Make an outline of the quiz you would like to create before you do any coding, do this in your Blog!!!\n\n\nWhen you are done:\n\nShare your program with the class here\nClass programs can be found here"
  },
  {
    "objectID": "blog/posts/2022-09-05-PBL-applab.html#hacks",
    "href": "blog/posts/2022-09-05-PBL-applab.html#hacks",
    "title": "Program Design with App Lab by Code.org",
    "section": "Hacks",
    "text": "Hacks\n\nThe Hacks on this assignment is described in the information above. - Blog your “design”, “successes”, discoveries, challenges. For “design”, and “successes” try to blog according to Create Performance Task skills and rubric. - Program Purpose and Function - Data Abstraction - Managing Complexity - Procedural Abstraction - Algorithm Implementation - Testing - If you finish your quiz early, try coming up with a different concept or idea for an app you think could work within App Lab. Remember to make a plan before you start any coding."
  },
  {
    "objectID": "blog/posts/2022-09-26-HM-github-sociology.html",
    "href": "blog/posts/2022-09-26-HM-github-sociology.html",
    "title": "GitHub and Git Sociology",
    "section": "",
    "text": "git-pic"
  },
  {
    "objectID": "blog/posts/2022-09-26-HM-github-sociology.html#github-and-git",
    "href": "blog/posts/2022-09-26-HM-github-sociology.html#github-and-git",
    "title": "GitHub and Git Sociology",
    "section": "GitHub and Git",
    "text": "GitHub and Git\n\nGitHub.com was launched in April 2008 by Tom Preston-Werner, Chris Wanstrath, P. J. Hyett and Scott Chaco. GitHub is a subsidiary of Microsoft since 2018 (kind of ironic with Git quote below), but GitHub is not Git it helps manage the server or backend.\n\n\nLinus Torvalds invented Linux and about 2005 invented Git. Quotes by Linus: - “Talk is cheap. Show me the code.” - “Most good programmers do programming not because they expect to get paid or get adulation by the public, but because it is fun to program.” - Microsoft isn’t evil; they just make really crappy operating systems.\n\n\nIn our environments, Git is local and it works with GitHub/Git is in the cloud. Together these tools together have become an industry standard since about 2015. Formerly in industry we used tools like (ClearCase and Perforce), before the 90s we had home brewed systems. Kind of like making smart backups of files.\n\n\nTerms and Usage\n\nA brief review of key commands and concepts. - A “git clone” makes a local Git repository (decentralized) from the cloud server (GitHub/Git).\n- A .git directory contains a local database (see illustration) that keeps track of local changes. - A “git commit” makes a child snapshot of the original parent on the local database. Git commits over time are a series of Secure Hashing Algorithms (SHA’s). This is the math behind a git snapshot. - The .gitignore file tells .git to ignore certain files in directory tree (ie files constructed from source or derived files, like ipynb files that turn into md files). - The “git push” command moves files from local system back to cloud server (GitHub). However, often a merge is required as the decentralized system can have many simultaneous contributors. Students will experience this when they share a repository. - To minimize conflicts, Developers use Git branches and/or GitHub Forks to push code to an isolated locations on the server/cloud. This simply delays the inevitable merge, but has benefit of keeping developers branch of project stable. - Pull requests is common process used to merge code from isolated Fork back to the primary GitHub repository. - A “git rebase” is a common command for Developer on an isolated Git branch to update their environment from the “main” branch. Often this is done prior to a “git push” back the “main” branch.\n\n\n\nProject Based Learning\nIn Project Based Learning, it is required that you have a policy on Contributing Guidelines. Many student have already experienced problems of merging and managing change, by editing code GitHub directly, while editing code on VSCode locally. This will be an every day occurrence when starting a GitHub/Git sociology. Thus, teams need to create a policy to communicate how Scrum Team or Others should contribute to your project. - GitHub and VSCode"
  },
  {
    "objectID": "blog/posts/2022-09-26-HM-github-sociology.html#hacks",
    "href": "blog/posts/2022-09-26-HM-github-sociology.html#hacks",
    "title": "GitHub and Git Sociology",
    "section": "Hacks",
    "text": "Hacks\n\nAny sociology questions within team need to be answered with a Blog, A Scrum Master working with other Developers should establish the Github administration/sociology policies: - What is the main repository for your project? - Did you create a .gitignore to avoid committing files that ’don’t belong in version control? Look at this tool for guidance. - Do you have a requirements.txt file to manage dependencies introduced to your Code Base? - Have you established Issues as part of your Development process? Creating Issues - Have you considered making Pull Requests to track development? Create Pull Request - Have you considered forks or branching techniques with pull requests? Link Issue to PR - Are you managing Issues on a Project Board/Scrum Board like Kanban? Tracking Issues"
  },
  {
    "objectID": "blog/posts/2022-09-05-PT-creative_dev.html",
    "href": "blog/posts/2022-09-05-PT-creative_dev.html",
    "title": "Creative Development Points",
    "section": "",
    "text": "It is important that you make a plan and make note of the steps you take during this process. Work with your partner(s) on process, but you will create your own Blog. - Create a blogpost with an outline of your AppLab project before starting to code.  - Add to or create a blogpost with your thinking and ideas for creating your app, this should be done individually. - This blogpost should help remind you of successes and failures made during your designing process, so be reflective of your work. It is better, if you show the adjustments you needed to make in the process.\n\n\n\n\n\nThis point is earned for the app itself. Add links or screen captures of your created app in AppLab to your blog. - The example app is a quiz, so the expectation is you are able to create your own quiz. You and your partner should work together, but can have individual customizations. - For those looking for a challenge, you can create a more involved app with your partner, testing potential ideas for your create task.\n\n\n\n\n\nAfter going through AppLab process … Now go through the process, with your partner, thinking about what type of App or Web Page you will create for the end of the Trimester Night at the Museum Project that meets College Board criteria. Try applying your AppLab project design and ideas to the Create Performance Task project. - Suggestion is to create a Jupyter notebook for design to be able to add code or markdown in design discussion. - What are all the technical requirements for the project? What can you design now? - What do you need to learn to complete the Create Performance Task design process? What resources do you have available to start on the design journey?\n\n\n\n\n\nEach individual needs to perform their own AppLab work and updates.  However, we would like you to work on the design and solving problems as a pair.   On preliminary design and planning for Create Performance Task, work can be shared… - AppLab project runs with no errors and provides score at the end. Show all features in your app. - AppLab project has Blog in each individuals Fastpages that points to their AppLab project and contains design work according to hack guidelines. - Base off of AppLab project experience. Start to Brain Storm/Idea write a Create Performance Task Planning/Draft showing initial thoughts/purpose for a project, things you know how to do, things you need to learn. Plan to continue to use this blog to fill in future week to fill in the gaps. - Every time requirements - Create Review Ticket.  Crossover grades, Crossover Comments, and Blog(s) used during week. - Be prepared to go fast, but show everything we should be under 5 minutes.  1 minute per person. - Jupyter Notebooks contain Markdown cells with comments to support code."
  },
  {
    "objectID": "blog/posts/2022-07-08-PBL-snake.html",
    "href": "blog/posts/2022-07-08-PBL-snake.html",
    "title": "Classic Snake Game",
    "section": "",
    "text": "{% include nav_frontend.html %}\n\n\n<header class=\"pb-3 mb-4 border-bottom border-primary text-dark\">\n    <p class=\"fs-4\">Snake score: <span id=\"score_value\">0</span></p>\n</header>\n<div class=\"container bg-secondary\" style=\"text-align:center;\">\n    <!-- Main Menu -->\n    <div id=\"menu\" class=\"py-4 text-light\">\n        <p>Welcome to Snake, press <span style=\"background-color: #FFFFFF; color: #000000\">space</span> to begin</p>\n        <a id=\"new_game\" class=\"link-alert\">new game</a>\n        <a id=\"setting_menu\" class=\"link-alert\">settings</a>\n    </div>\n    <!-- Game Over -->\n    <div id=\"gameover\" class=\"py-4 text-light\">\n        <p>Game Over, press <span style=\"background-color: #FFFFFF; color: #000000\">space</span> to try again</p>\n        <a id=\"new_game1\" class=\"link-alert\">new game</a>\n        <a id=\"setting_menu1\" class=\"link-alert\">settings</a>\n    </div>\n    <!-- Play Screen -->\n    <canvas id=\"snake\" class=\"wrap\" width=\"320\" height=\"320\" tabindex=\"1\"></canvas>\n    <!-- Settings Screen -->\n    <div id=\"setting\" class=\"py-4 text-light\">\n        <p>Settings Screen, press <span style=\"background-color: #FFFFFF; color: #000000\">space</span> to go back to playing</p>\n        <a id=\"new_game2\" class=\"link-alert\">new game</a>\n        <br>\n        <p>Speed:\n            <input id=\"speed1\" type=\"radio\" name=\"speed\" value=\"120\" checked/>\n            <label for=\"speed1\">Slow</label>\n            <input id=\"speed2\" type=\"radio\" name=\"speed\" value=\"75\"/>\n            <label for=\"speed2\">Normal</label>\n            <input id=\"speed3\" type=\"radio\" name=\"speed\" value=\"35\"/>\n            <label for=\"speed3\">Fast</label>\n        </p>\n        <p>Wall:\n            <input id=\"wallon\" type=\"radio\" name=\"wall\" value=\"1\" checked/>\n            <label for=\"wallon\">On</label>\n            <input id=\"walloff\" type=\"radio\" name=\"wall\" value=\"0\"/>\n            <label for=\"walloff\">Off</label>\n        </p>\n    </div>\n</div>"
  },
  {
    "objectID": "blog/posts/2022-11-29-AP-unit3_3_to_4.html",
    "href": "blog/posts/2022-11-29-AP-unit3_3_to_4.html",
    "title": "Unit 3 Sections 3-4",
    "section": "",
    "text": "Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better"
  },
  {
    "objectID": "blog/posts/2022-11-29-AP-unit3_3_to_4.html#process-for-presenters",
    "href": "blog/posts/2022-11-29-AP-unit3_3_to_4.html#process-for-presenters",
    "title": "Unit 3 Sections 3-4",
    "section": "Process for Presenters",
    "text": "Process for Presenters\n\nUse “Comments” on this blog page to post materials for lesson\nBe sure to include “Period and Teacher” in instructions\nBe sure homework assignment, hacks and points/rubric are clearly described"
  },
  {
    "objectID": "blog/posts/2022-11-29-AP-unit3_3_to_4.html#process-for-individuals",
    "href": "blog/posts/2022-11-29-AP-unit3_3_to_4.html#process-for-individuals",
    "title": "Unit 3 Sections 3-4",
    "section": "Process for Individuals",
    "text": "Process for Individuals\n\nEach participating Team will post a shared review ticket with individual work clearly listed\nBe sure to include “Period, Teacher and Table” in review ticket\nCollaboration is encouraged but individual and unique work is required"
  },
  {
    "objectID": "blog/posts/2022-12-08-AP-unit3_12_to_13.html",
    "href": "blog/posts/2022-12-08-AP-unit3_12_to_13.html",
    "title": "Unit 3 Sections 12-13",
    "section": "",
    "text": "Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better"
  },
  {
    "objectID": "blog/posts/2022-12-08-AP-unit3_12_to_13.html#process-for-presenters",
    "href": "blog/posts/2022-12-08-AP-unit3_12_to_13.html#process-for-presenters",
    "title": "Unit 3 Sections 12-13",
    "section": "Process for Presenters",
    "text": "Process for Presenters\n\nUse “Comments” on this blog page to post materials for lesson\nBe sure to include “Period and Teacher” in instructions\nBe sure homework assignment, hacks and points/rubric are clearly described"
  },
  {
    "objectID": "blog/posts/2022-12-08-AP-unit3_12_to_13.html#process-for-individuals",
    "href": "blog/posts/2022-12-08-AP-unit3_12_to_13.html#process-for-individuals",
    "title": "Unit 3 Sections 12-13",
    "section": "Process for Individuals",
    "text": "Process for Individuals\n\nEach participating Team will post a shared review ticket with individual work clearly listed\nBe sure to include “Period, Teacher and Table” in review ticket\nCollaboration is encouraged but individual and unique work is required"
  },
  {
    "objectID": "blog/posts/2022-10-17-pbl-webapi_tutorial.html",
    "href": "blog/posts/2022-10-17-pbl-webapi_tutorial.html",
    "title": "Python Web API Endpoints using Jokes",
    "section": "",
    "text": "Model for API\n\nWe will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make “the best computer jokes ever ;)” and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes.\n\n\nThis code planning begins by coming up with some jokes and defining a data “model” to keep and manage the jokes.\n\njokes_data contains a list of dictionary records containing joke and reactions: haha or boohoo\njoke_list contains collection of jokes we will put into jokes_data\n\nNext comes some functions to interact with our jokes\n\ndef initJokes(): initializes jokes_data\ndef getJokes(): returns the complete list of jokes\ndef getJoke(): returns a single joke from our list\n… many more function can be examined by reading comments below …\n\n\n\n# import random\n\n# jokes_data = []\n# joke_list = [\n#     \"If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will \"\n#     \"frustrate them for a lifetime.\",\n#     \"Q: Why did I divide sin by tan? A: Just cos.\",\n#     \"UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.\",\n#     \"Enter any 11-digit prime number to continue.\",\n#     \"If at first you don't succeed; call it version 1.0.\",\n#     \"Java programmers are some of the most materialistic people I know, very object-oriented\",\n#     \"The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just \"\n#     \"1 byte. And then everything crashed.\",\n#     \"Q: Why did Wi-Fi and the computer get married? A: Because they had a connection\",\n#     \"Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.\",\n#     \"Q: What’s a aliens favorite computer key? A: the space bar!\",\n#     \"There are 10 types of people in the world: those who understand binary, and those who don’t.\",\n#     \"If it wasn't for C, we’d all be programming in BASI and OBOL.\",\n#     \"Computers make very fast, very accurate mistakes.\",\n#     \"Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.\",\n#     \"Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.\",\n#     \"The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.\",\n#     \"Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.\",\n#     'An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?'\n# ]\n\n# # Initialize jokes\n# def initJokes():\n#     # setup jokes into a dictionary with id, joke, haha, boohoo\n#     item_id = 0\n#     for item in joke_list:\n#         jokes_data.append({\"id\": item_id, \"joke\": item, \"haha\": 0, \"boohoo\": 0})\n#         item_id += 1\n#     # prime some haha responses\n#     for i in range(200):\n#         id = getRandomJoke()['id']\n#         addJokeHaHa(id)\n#     # prime some haha responses\n#     for i in range(50):\n#         id = getRandomJoke()['id']\n#         addJokeBooHoo(id)\n        \n# # Return all jokes from jokes_data\n# def getJokes():\n#     return(jokes_data)\n\n# # Joke getter\n# def getJoke(id):\n#     return(jokes_data[id])\n\n# # Return random joke from jokes_data\n# def getRandomJoke():\n#     return(random.choice(jokes_data))\n\n# # Liked joke\n# def favoriteJoke():\n#     best = 0\n#     bestID = -1\n#     for joke in getJokes():\n#         if joke['haha'] > best:\n#             best = joke['haha']\n#             bestID = joke['id']\n#     return jokes_data[bestID]\n    \n# # Jeered joke\n# def jeeredJoke():\n#     worst = 0\n#     worstID = -1\n#     for joke in getJokes():\n#         if joke['boohoo'] > worst:\n#             worst = joke['boohoo']\n#             worstID = joke['id']\n#     return jokes_data[worstID]\n\n# # Add to haha for requested id\n# def addJokeHaHa(id):\n#     jokes_data[id]['haha'] = jokes_data[id]['haha'] + 1\n#     return jokes_data[id]['haha']\n\n# # Add to boohoo for requested id\n# def addJokeBooHoo(id):\n#     jokes_data[id]['boohoo'] = jokes_data[id]['boohoo'] + 1\n#     return jokes_data[id]['boohoo']\n\n# # Pretty Print joke\n# def printJoke(joke):\n#     print(joke['id'], joke['joke'], \"\\n\", \"haha:\", joke['haha'], \"\\n\", \"boohoo:\", joke['boohoo'], \"\\n\")\n\n# # Number of jokes\n# def countJokes():\n#     return len(jokes_data)\n\n# # Test Joke Model\n# if __name__ == \"__main__\": \n#     initJokes()  # initialize jokes\n    \n#     # Most likes and most jeered\n#     best = favoriteJoke()\n#     print(\"Most liked\", best['haha'])\n#     printJoke(best)\n#     worst = jeeredJoke()\n#     print(\"Most jeered\", worst['boohoo'])\n#     printJoke(worst)\n    \n#     # Random joke\n#     print(\"Random joke\")\n#     printJoke(getRandomJoke())\n    \n#     # Count of Jokes\n#     print(\"Jokes Count: \" + str(countJokes()))\n\n\n\nBackend Interface for Web API (Control)\n\nAn application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems: 1. Python Backend that stores data beyond a single Web page 2. GH Pages/Fastpages Frontend that is responsible for presenting data\n\nTo communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: - https://flask.nighthawkcodingsociety.com/api/jokes - https://flask.nighthawkcodingsociety.com/api/jokes/2 - https://flask.nighthawkcodingsociety.com/api/jokes/random\nAs you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data.\nThe next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data.\nFYI, there is NO output from this section .\n\n# from flask import Blueprint, jsonify  # jsonify creates an endpoint response object\n# from flask_restful import Api, Resource # used for REST API building\n# import requests  # used for testing \n# import random\n\n# # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place\n# app_api = Blueprint('api', __name__,\n#                    url_prefix='/api/jokes')  # endpoint prefix avoid redundantly typing /api/jokes over and over\n\n# # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1\n# api = Api(app_api)\n\n# class JokesAPI:\n#     # not implemented, this would be where we would allow creation of a new Joke\n#     class _Create(Resource):\n#         def post(self, joke):\n#             pass\n            \n#     # getJokes()\n#     class _Read(Resource):\n#         def get(self):\n#             return jsonify(getJokes())\n\n#     # getJoke(id)\n#     class _ReadID(Resource):\n#         def get(self, id):\n#             return jsonify(getJoke(id))\n\n#     # getRandomJoke()\n#     class _ReadRandom(Resource):\n#         def get(self):\n#             return jsonify(getRandomJoke())\n    \n#     # getRandomJoke()\n#     class _ReadCount(Resource):\n#         def get(self):\n#             count = countJokes()\n#             countMsg = {'count': count}\n#             return jsonify(countMsg)\n\n#     # put method: addJokeHaHa\n#     class _UpdateLike(Resource):\n#         def put(self, id):\n#             addJokeHaHa(id)\n#             return jsonify(getJoke(id))\n\n#     # put method: addJokeBooHoo\n#     class _UpdateJeer(Resource):\n#         def put(self, id):\n#             addJokeBooHoo(id)\n#             return jsonify(getJoke(id))\n\n#     # building RESTapi interfaces, these routes are added to Web Server http://<server</api/jokes\n#     api.add_resource(_Create, '/create/<string:joke>')\n#     api.add_resource(_Read, '/')    # default, which returns all jokes\n#     api.add_resource(_ReadID, '/<int:id>')\n#     api.add_resource(_ReadRandom, '/random')\n#     api.add_resource(_ReadCount, '/count')\n#     api.add_resource(_UpdateLike, '/like/<int:id>/')\n#     api.add_resource(_UpdateJeer, '/jeer/<int:id>/')\n\n\n\nFrontend (View Simulation) and Hacks\n\nThis python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook.\n\nTo work with this code and make observation for learning… - Run a local server from flask_portfolio project and the change server variable to be local - Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests - The “requests” are captured into a List, the List is used in the for loop to extract from RESTful API format.\n- Try running this with Debugging and observe what data is being created at each step (Required) - Try to format this data in Python print statements to be more readable (Required) - Start and stop local server and observe errors\n\n# # Pick the server you want to test comment in/comment out\n# # server = \"http://127.0.0.1:5000/\" # run local\n# server = 'https://flask.nighthawkcodingsociety.com/' # run from web server\n# url = server + \"api/jokes/\"\n# responses = []  # responses list\n\n# # Get the count of jokes on server\n# count_response = requests.get(url+\"count\")\n# count_json = count_response.json()\n# count = count_json['count']\n\n# # Update likes/dislikes test sequence using random joke\n# num = str(random.randint(0, count-1)) # test a random record\n# responses.append(\n#     requests.get(url+num)  # Get/read joke by id\n#     ) \n# responses.append(\n#     requests.put(url+\"like/\"+num) # Put/add to like count\n#     ) \n# responses.append(\n#     requests.put(url+\"jeer/\"+num) # Put/add to jeer count\n#     ) \n\n# # Get a random joke\n# responses.append(\n#     requests.get(url+\"random\")  # Get/read a random joke\n#     ) \n\n# # Cycle through and print responses\n# for response in responses:\n#     print(response)\n#     try:\n#         print(response.json())\n#     except:\n#         print(\"data error\")"
  },
  {
    "objectID": "blog/posts/2022-12-15-AP-unit3_17_to_18.html",
    "href": "blog/posts/2022-12-15-AP-unit3_17_to_18.html",
    "title": "Unit 3 Sections 17-18",
    "section": "",
    "text": "Make sure lesson has the following… - Lesson times is between 20 and 30 minutes - Lesson assigns 30 minutes of Homework / Hacks - Lesson outlines Purpose and Objectives of sections within Unit - Review of Section Materials and Videos from AP Classroom - Key Coding requirements, adapt to Python or JavaScript - Create Jupyter Notebook to transfer to students and encourage participation during discussion - Notebook contains Key Vocabulary - Adapt College Board lessons to teacher/student projects in Data, Data Abstraction, List, APIs, or Binary when possible - Lesson should be interactive and hopefully have fun elements - Highlight any Tricks or Gotchas from the section, this should be added to coding challenge - Games like Jeopardy, Kahoots, etc should be very short or not at all. Hack-a-thon mentality is better"
  },
  {
    "objectID": "blog/posts/2022-12-15-AP-unit3_17_to_18.html#process-for-presenters",
    "href": "blog/posts/2022-12-15-AP-unit3_17_to_18.html#process-for-presenters",
    "title": "Unit 3 Sections 17-18",
    "section": "Process for Presenters",
    "text": "Process for Presenters\n\nUse “Comments” on this blog page to post materials for lesson\nBe sure to include “Period and Teacher” in instructions\nBe sure homework assignment, hacks and points/rubric are clearly described"
  },
  {
    "objectID": "blog/posts/2022-12-15-AP-unit3_17_to_18.html#process-for-individuals",
    "href": "blog/posts/2022-12-15-AP-unit3_17_to_18.html#process-for-individuals",
    "title": "Unit 3 Sections 17-18",
    "section": "Process for Individuals",
    "text": "Process for Individuals\n\nEach participating Team will post a shared review ticket with individual work clearly listed\nBe sure to include “Period, Teacher and Table” in review ticket\nCollaboration is encouraged but individual and unique work is required"
  },
  {
    "objectID": "blog/posts/2022-09-26-PT-deployment.html",
    "href": "blog/posts/2022-09-26-PT-deployment.html",
    "title": "Deployment",
    "section": "",
    "text": "Learning to deploy on AWS. - Monday: Live Review, Test Prep - Tuesday: Live Review, Career Tech - Wednesday: Career Tech - Thursday: Human Prep - Friday: Code, Code, Code\n\n\n\n\nWe will now formally check to see if you are answering the MCQ on collegeboard. - Create a blogpost with proof that you have completed the questions. Will be checking 1.1 - 1.3 - Include any questions/difficulties you had with the problem sets\n\n\n\n\n\nLearn how to deploy on AWS - show the output of your curl command when you are done - make a change and show the change made in the browser"
  },
  {
    "objectID": "blog/posts/2022-09-26-PT-deployment.html#live-grading-presentation.",
    "href": "blog/posts/2022-09-26-PT-deployment.html#live-grading-presentation.",
    "title": "Deployment",
    "section": "Live Grading Presentation. ",
    "text": "Live Grading Presentation. \n\nWe will follow 3 to 4 team review format.\n- Observers will grade up to 1.8/2 on deployment and 0.9/1 on AP prep. Be sure to total up to 2.7/3 - Observers will note anything that was completed that is not mentioned in the outline. This needs to be tangible!!! If student met 2.7 standard, then extra items can make score 2.7+."
  },
  {
    "objectID": "blog/posts/2022-07-21-pbl-neointro.html",
    "href": "blog/posts/2022-07-21-pbl-neointro.html",
    "title": "Neo4J Graph Database Introduction",
    "section": "",
    "text": "CS-Students is a sample knowledge graph that can be used to model any classroom that is relation based (a classroom that has lots of different people, pairs, groups, periods; things like that). This notebook is meant to demonstrate how to query this knowledge graph based on the preset things that are currently in the sample data."
  },
  {
    "objectID": "blog/posts/2022-07-21-pbl-neointro.html#currently-the-data-consists-of-the-following-categories-which-are-labels-in-neo4j",
    "href": "blog/posts/2022-07-21-pbl-neointro.html#currently-the-data-consists-of-the-following-categories-which-are-labels-in-neo4j",
    "title": "Neo4J Graph Database Introduction",
    "section": "Currently, the data consists of the following categories (which are labels in Neo4J):",
    "text": "Currently, the data consists of the following categories (which are labels in Neo4J):\n\nPeriod (most teachers would find it useful to have their data divided into class periods)\n\n\nScrum Team (basically, the largest overarching groups of students, under period)\n\n\nPairs (pairs of students within scrum teams)\n\n\nPerson (object that represents each student)"
  },
  {
    "objectID": "blog/posts/2022-07-21-pbl-neointro.html#the-data-also-has-the-following-relationships",
    "href": "blog/posts/2022-07-21-pbl-neointro.html#the-data-also-has-the-following-relationships",
    "title": "Neo4J Graph Database Introduction",
    "section": "The data also has the following relationships",
    "text": "The data also has the following relationships\n\nIN_PERIOD (to relate teams to the period they are in)\n\n\nCROSSOVER (a relationship that exists to connect pairs of teams which work together)\n\n\nPAIR_SHARE (relationship defining students who are paired together)\n\n\nIN_GROUP (to relate people to the group they are in)"
  },
  {
    "objectID": "blog/posts/2022-07-25-CSP-workshop.html",
    "href": "blog/posts/2022-07-25-CSP-workshop.html",
    "title": "USC Code.org Workshop Notes",
    "section": "",
    "text": "<div>\n\n    <div style=\"float: left; margin: 0px 10px 10px 0px;\">\n        <a href=\"https://docs.google.com/document/d/1s5w7_UnVIGHOdkqCtK2O78rQ7JJFAWlOeZkZNsCovOY/preview\">\n            <img atl=\"Code.org CompSci Principles\" src=\"{{site.baseurl}}/images/students_like.png\" title=\"What Students Like by Code.org\"\n            width=\"300\">\n        </a>\n    </div>\n    <div>\n        <hr>\n        <p>\n        Code.org is sponsor.  Lesson are from published <a href=\"https://docs.google.com/document/d/1s5w7_UnVIGHOdkqCtK2O78rQ7JJFAWlOeZkZNsCovOY/preview\">Curriculum Guide</a>.\n        </p>\n        <ul>\n            <li>Introduction is on equity. 50% girls in school should mean 50% enrollment in CSP</li>\n            <li>Follow up dates.  Saturdays 10/15, 11/19, 1/28, 3/18</li>\n            <li>Met Ken Toma (Canyon Hills, SD), Faith Yeaton (San Gabriel Academy, Pasadena area), Ms O'Masters (Central Valley)</li>\n            <li>Worked with Sean Yeung who is new to my school :).  I would like to see a lot of him this week.</li>\n            <li><a href=\"https://studio.code.org/s/csp1-2022/lessons/3\">Lesson 3 Plan</a>\n            <ul>\n                <li>\n                    <mark>What are 3 things you notice about the lesson plan?</mark>\n                    Circle and square patterns is a lite intro into binary.  Number 7 and permutations of squares and circles are showing representations, which are leading to 1's and 0's that students will see in future.  Group work is used, as one Teacher said in our session... \"to make sure the work gets done\".\n                </li>\n                <li>\n                    <mark>What are 2 things you have questions about? </mark>\n                    I believe 15-18 age group should be able to combine this with binary lesson in same amount of class time listed for this lesson plan (45 minutes).  Elaboration on this would seem like a fall back for me for the few in my school that don't get binary directly.  IMO, binary should be taught in detail when needed, my plan is to teach it through <a href=\"https://csp.nighthawkcodingsociety.com/starter/rgb/\">color codes</a> and through <a href=\"https://nighthawkcoders.github.io/APCSP/frontend/binary\">binary calculator</a>; the later inspired by Harvard CS50.  IMO, in modern languages and frameworks we don't want to lead students down the binary grind until they get interested in CS or binary as part of an application solution.  College Board seems to have delayed this to Big Idea 2 and teaches concepts around data abstraction and data compression.\n                </li>\n                <li>\n                    <mark>What is 1 thing you are interested to find more about or are excited about when you look at this lesson?</mark> \n                    Since we are starting in a lesson, I would like to see 12 weeks or <a href=\"https://docs.google.com/document/d/1s5w7_UnVIGHOdkqCtK2O78rQ7JJFAWlOeZkZNsCovOY/preview#heading=h.p7ous6j4l1b8\">course vision</a>.  I feel like this is a very isolated and simple topic.  Though, it is an easy thing for Teachers to get to know each other.  Perhaps, for our event it is more about Collaboration from Big Idea 1 then Binary in Big Idea 2.\n                </li>\n            </ul>\n            </li>\n        </ul>\n        <hr>\n    </div>\n\n</div>\n\n\n\n\n\nBinary Number System slide #99. The activity requires paper and Teacher thinks analog experience is important. Connect Circle-0 / Square-1. Teacher recognizes different experience level but thinks everyone should create flippy-do. Code.org vocabulary is last, but not to be ignored. - Relation is focussed on these concepts - 0-9 are symbols for numbers in Base 10 - 0-1 are symbols for numbers in Base 2 - Make an adaptation to support Flippy-Do information: Binary Calculator - The 2048 game might be interesting development activity to relate to binary. - This is a general slide on all lessons slide #121. - Color Codes inserted into these lessons seems key to me, or some other purposeful element, encryption was mentioned by Teacher. In general, not seeing “why?” in Code.org lessons as we start… but the appear in the high level description.\n\n\nCompare Unplugged and Plugged Lessons. - What is teacher doing in unplugged lesson? encouragement, walking around, answering questions. Unplugged is not computer: Stand-up meeting, White Board Design - Let them Explore!!! Shared an idea of plugged lesson, shared a tool. Don’t lecture about it, as them what it does, what is happening?\n\n\nTeachers role is described as Lead learner. We may not know, but we can figure it out. My response to questions… - Lead learner allows diverse activities in classroom - Lead learner may provide completely different work for student with special interests or special needs. - Teacher (Jennifer) suggested she needs to build the computer science muscle, including suffer confusion. Student (Patrick) mentioned that students see straight into your capability. - Different rhythms for different students. - Blogging Platforms mentioned - Peer Feedback mentioned - Pair Programming mentioned\n\n\nActions for inclusive classroom culture - Group thought it is more on capability versus culture - Student (Sonya) talked about doing multiple media types (paper, digital) - Student (Patrick) discussed audio and video slides for virtual - Student (Ken Toma) give everybody a voice. Suggested pair-share can provide that platform\n\n\nAsync work - This video discusses a lot of what I believe in and will kickoff PBL well. I think it popped up by accident but it was cool https://www.youtube.com/watch?v=9s29LKfEFjQ - Watched the place, mostly it has a place to complete async activities and surveys. It says I am not enrolled when I attempt survey. - The Place introduced.\n\n\n\n\n\nModule 2 Intro Slides - USC represented shared Web Site - Unit 1 Lesson 7. Played with B/W Widget, on building black and white images. Idea was good on 1st couple of exercises, it quickly seemed to become tedious. I am not sure how it would related to key concepts in CB and not happy with it in PBL (except if we add improvement or design elements). Interaction could be improved to maintain orientation of Hexadecimal to lines. Maybe coding improvement could be to preserve orientation and allow clicking on pic, binary, or both. This exercise in driver navigator would make a lot of sense. Worked with Jp Fletcher, Jason Mahoney, Manuel Hernandez - Unit 1 Lesson 8. Color Images Widget, I like this for the 1st lesson more. It seems like the stair step is not significant and perhaps this might provide more joy. Somewhat a combination of two lessons would make me happier, perhaps one black/white and then color would be good for interactive lecture. Using page: https://studio.code.org/s/csp1-2022/lessons/8/levels/2\n\n04\n02\n18\nFF0000 00FF00 0000FF 000000 \nFFFF00 FF00FF 00FFFF FFFFFF\n\nCourse Framework page 16, computation thinking practices and big ideas. Learning objectives and essential knowledge.\nAsync was on Big Ideas, Computational Thinking practices,… In my experience I focus in on covering the Big Ideas. Students don’t seem to relate will to other weightings. Also, I focus on CTE principle of College Ready through test and Intern ready through PBL. If we teach them to build stuff a lot of the other things fall out.\n\n\n\n\n\nKickoff was reviewing scavenger hunt. People generally have questions as new teachers. - Teacher (Katie) reviewed CB outline. My experience is by doing CB MCQs and PBL, the students think questions are easy/basic. - Next (Katie) covered the Code.org outline. Unit 1-3 cover Big Idea topics in 1, 2, 4. Units 4-7 cover Big Idea 3. - Some discussion on block coding vs scripted in Create Task Project.\n\n\nTransition to Unit 1 Lesson 9-10 Lossless/Lossy Compression. Widget Bubble 1 - Played with Text to Symbol compression, Ken Toma came up with multiple words. - Spoke on introduction, we instructed Patrick to look for associations to make this interesting. - Lossy compression had a reduction widget - Lossy compression had a pick quality slide voting - Summary on these, widgets and ideas are great for intro, but they don’t seem to have depth that I like in the lesson. I want people to learn how to do these.\n\n\nAsync session had a video that shared review of things we missed in workshop versus code.org curriculum. This filled some gaps that I thought were missing in order that we followed.\n-  How you interact with the World. - For tomorrow, there is talk of Internet Simulator / Messaging System that may be good illustration and complement to a Tech Talk. I wonder, do they provide code for these tools? That would be a great thing to teach students to make, it looks like it works over sockets because of instant refresh.\n\n\n\n\n\nInternet Unit A new day of slides\n\n\nPaseo Reflection - Strongly: identify Coach, Parent - Life Advantage: Being Chinese, Entrepreneur - Equity: Teacher, Coach/Teaching - Feel, Identity: Balance on sharing (ego heavy, selling short). Mental health and physical health are important on reflection, feeling selfish. Give people benefit in process of their evaluation.\n\n\nNetwork Challenge. This is the challenge that was familiar to classroom and Colin made this as an app a couple of years ago. - Two people share a line - Multiple connections from persons to lines - Teachers are holding a lot of stock in simplicity and activity. Though, Network are multiply connected to routers and not computers and Network design is complex. It should be clarified that most home computers have a single router. A,B,C,D,E should be conceptual. ISP typically have multiple paths and home networks do not. It is interesting that Group 4 used a hub, challenge #3; this tells me that people are going to think it is computers.\n\n\nIP Addresses and DNS. Started by making a series of appointments. Not much purpose of this other than addressing names and getting a response. Creating a packet of data (Monday, Cheanie) response (OK).\n\n\nAsync work - Mental pictures Blind spots, accept you have them and work on them. - Female: delicate, caring family - Male: career, strong, powerful - Article summary is holding ourself accountable for bias, as I am sure I have some bias that is reflected in my work. However, I believe most of my personal bias has to do with classroom behavior of the individual. - Other notes: sometimes students are looking for bias - Difficulty: those that have history (good or bad) in a year long classroom have difficult going good to bad or bad to good in my eyes. Certainly someone who starts great gets a lot of my respect and favoritism. - Digital information dilemmas, game companies can’t use Lebron James tattoos. There is so much copyright, I am not even sure I can take notes and represent pictures, but I do it.\n\n\n\n\n\nNetwork Simulator and Bias - Network Simulator would be really fun if code was available. I think I would like to mimic it for a development project. Students really resonate toward building this type of thing. It could be built on top of Logging and Image thing. - Bias discussion and my problems exists or are established on behavior. I have favorite students and even invite them into Nighthawk Coding Society. Or they invite themselves. - Student attitude may have something that needs exploration.\n\n\nAsync work is mostly a couple of videos and ability to comment on the material. These are particularly good ideas and are somewhat built into GitHub pages.\n- We should have students comment on most of the lessons or the day after the lessons. This could be a great way to obtains some feedback in context. - Network simulator may be a tool that we could build in class, it would be an interesting project for a team that wants to code.\n\n\nAfter hours work. Because of discussion of awarding people on doing things conversation, plus many asking questions about how to score on doing things… I went back and updated hacks and worked with Sean on getting comments working on Tools Setup. IMO, this solves problem of presenting, providing what to do, and capturing in the same place.\n\n\n\n\n\nWho Belongs in CSP? Thursday Slides - Unit 3 Bridge to programming units starting with Lesson 2 Design Mode, student work in AppLab - Stocks, has several rows and columns. It show a graph and has current price. If you click on a stock it takes you to articles written about the stock\n\n```\nMSFT    /---graph---\\ 274.17\nAAPL    /---graph---\\ 155.98\n```\n\nBlock coding tool is big focus. Pace is slow.\nDesign session introduced JavaScript commands. It showed onEvent with a function. There is kind of a confusing design and tool back and forth, mostly presenter and online issues.\n\n\nAsync very quick example that seems to beg for me to say yes to intervention. But IMO, there are bigger fish to fry than someone knowing a stats answer. - BTW, we saw many mistakes presented in Networking lines game, but people were not speaking up. Sometimes it is best to let people just have an answer. - Debugging was topic in video. Positive “make mistakes message”, goes with grading comment made to have check boxes for points, not right or wrong. Learning is a process, everything does not need ot be corrected.\n\n\nPlanning notes for an Application like the Birds sample, mostly use their code with minor adaptations…\n\n```\n- Stock Quiz -\nStart Screen Begin Button\n\n— 1 —\nWhat is most valuable stock on US exchanges?\nApple (AAPL) and three wrong\n\n— 2 —\nWhat is Robin Hood darling stock in 21-22?\nGame Stop and three wrong\n\n— 3 —\nWhat is a good philosophy in market?\nBuy low Sell high and three wrong\n\n— Winner Screen —\nCongrats.  Here are some tips before you go invest…\nOpen, Close, Day High/Low, 52 week average\n\n— Wrong Answer Screen —   \nTry again, wrong answer.  You must get the right answer to continue (move on).\n```\n\n\n\n\nLab work. Best link for AppLab. My biggest observation was not about the lessons, it was about the cohorts and their Lab work. Many of them were with very excited about their creations. AppLab made some successful and really picked up their excitement. I think Wednesday was a downer for me and perhaps a lot of others and it carried with me into Thu. Today many spirits were lifted. - IMO, Tech success lifts spirits - Teacher cohorts like to see that they coded. AppLab example on QA’s seems to be very intuitive for new coders. I know students like a Quiz and they can lead into Data Analytics, so it is not a bad thing. - I was helping someone that was very new (Patrick) and he seemed to have some intuition about things like Label, Text Box, Button.\n- Less intuition on Sequencing and Events. Perhaps their should be a little intro to these structures, like placing code inside of events. Also, my view was a little difficult so it was difficult to be a great Pair Programmer as I should have caught some extra clicks in producing excess code. - Finally, Pair Programming is an interactive two brain process. It was weird to hear facilitator talk about Driver/Navigator as if Navigator is more in command position.\n\n\n\n\nSaturday Oct 15, Dec 3, Jan 28, Mar 18 workshop days.\n\nEquity in CompSci Classroom. Sindie talked about zero experience, not only the smart student. - Work load. (Asian, 50% Indian) Mental health is a bigger focus for this year (work load management, more in class work, but lots of information at the beginning of year) - Sonya parent pressure, grade 1st (Korean) Debugging the Gender Gap (video), “what does a coder look like?”. - Jason variety not just group work (Hispanic) - Patrick email: Patrick.davis@inglewoodusd.com\n\n\nAssessment changes - Here is instructors percentage guide - Many seem to NOT have a system for this as they don’t have a vision of what they will teach yet.\n\n\n\n\n\nRegarding CompSci Pathway, there are no standards. Districts and even schools pick.\n- My understanding is Districts pick their Curriculum Provider and it often requires Teachers to get a certificate. Code.org is fulfilling district/certificate requirements. Code.org is providing a completely closed platform with its own LMS and tools. - USC and UCSD attachments to Code.org are both using an ncsu.org. NC State system to aggregate teacher completion, for example async work must be captured in the tool. My thoughts are USC, UCSD, NC State are involved in some sort of grant program as an individual pops in and promotes on campus events and opportunities for teacher to get certificate that will help boost pay. There was a USC off campus host managing the class, they are giving Teachers some swag and hours toward certificate. Teachers at training had little and mostly no CompSci experience.\n\n\nCS Discovery is a Code.org brand. According to PLTW web site their brand is Essentials. - College Board Lists Curriculum Providers - From Code.org What is CS Discoveries - CS Discoveries is designed to fit naturally between our CS Fundamentals courses and our CS Principles course - Computer Science Discoveries is an introductory computer science course for 6 - 10th grade students. - From PLTW.org the name is CS Essentials - This lists Essentials, Principles, A, Cybersecurity - Principles description has Cybersecurity emphasis\n\n\nOf course College Board is another business which in turn is advertising groups like Code.org or PLTW.org. However, the are also list Apple which is listed as a provider of curriculum for CompSci Principles. This is kind of fun for me, as it goes back to my Intro year, but this content can be used for CS Principles.\nDevelop in Swift AP CS Principles curriculum helps students build a foundation in programming using Swift—a powerful and intuitive open source programming language designed by Apple—while preparing them for the AP Computer Science Principles Exam. Students will get practical experience with the tools, techniques, and concepts needed to build an iOS app. They’ll learn about the impact of computing, privacy, and security on society, while exploring the technology behind their own activities through interactive stories. Develop in Swift AP CS Principles includes a student and teacher guide available for free on Apple Books. Downloadable Xcode and Playground project files are also available to support the curriculum activities\n\n\nBack to CTE, the students and teacher. Teacher motivations can vary. My philosophy is teach content and test will fall out. Yesterday I had a Teacher in our breakout say to me…\nBottom Line, I want all my students to get 100% on AP exam.  End of story.  But, I don't think the Code.org platform, the training I got, and me are going to make it happen.\nA Student was working with me yesterday and we were dialoguing on Slack. He was working with me on something wrt his internship that was related to certificate deltas between Windows and MacOS. I told the student about my Code.org training\nI don't really like the code.org method. My friend goes to a different school and took AP CSP using that curriculum. I personally was unimpressed with that\nI told the student that I was looking at a softer entrances into PBL\nI don't think code.org is the solution, coming from a student perspective. You might want to take a more traditional class approach by teaching everyday at the beginning, which is what students are used to. Then ease into PBL\nAlso, yesterday I had several students working with me on next years classroom tooling. From this experience, all students had their own blogging and tooling platform. IMO, Student are the center.  Thus, object should form around student.  Not Code.org or LMS. This means they need their own tools and their own objects.  This means an open platform to express their engineering\n\n\nSummary. Sharpen the sword is a phrase used in habit of highly successful people. I learned a lot during the week from Code.org training and platform. Also, I got great exposure to many new teachers entering into Computer Science. I am happy that there is something for these people to grab onto. Also it helped me provide a lesson idea for Sean in our 3rd week (related to interest in block coding). But, for me this is a case of sharpening the sword, there is no intention to adopt the entire curriculum. I hope to continue with my existing approach to CSP curriculum: PBL, Open Platform. Sword sharpening includes: adding softer entries to topics, more traditional lectures in Trimester 1, build muscle for longer term PBL."
  },
  {
    "objectID": "blog/posts/2022-09-12-HM-focus.html",
    "href": "blog/posts/2022-09-12-HM-focus.html",
    "title": "Focus and Habits",
    "section": "",
    "text": "This video is very relevant to students. Laurie Santos is a professor at Yale has produced one of the most popular classes of all time at Yale (1 of 4 students take this class).\n\n\nIn my first watch of this video, right after 2021-2022 school year, these were my observations in improving the well being of Computer Science at Del Norte. - The Teacher needs to reduce academic stress on students. - The Teacher needs to convince Students to form habits of successful people, as discussed in the video. These habits need to be formed collaboratively between Teacher and Student. - Students need to strive to form an attitude of success for life. This takes effort and commitment. Similar to exercise analogies discussed in video. - In active discussions with Ms Naidu who taught at Del Norte in 2021-2022, we determined the biggest weakness in students our students is Collaboration, not Technical.\n- Laure Santos request that students be grateful for their current situation.\n\n\n\nThe AP Computer Science classes at Del Norte in 2022-2023 is structured to do most of the work in the classroom. Students, please prioritize the 4C habits: Collaboration, Communication, Critical Thinking and Creativity in classroom. Additionally, focus, ask questions, Code/Code/Code, and make mistakes. If you do these things, you are in danger of getting 90% on all your assignments.\n\n\n\nA lot of the methods in Agile, Sprints, and Scrums are helping to establish habits and focus. As Engineers, we need to learn to put concepts together! - Habit helpers: Stand-up meetings, Issues, Scrum Board, Review Tickets, Sprints - Focus helpers: Reviewing Issues, Pair Coding, Making mistakes, Fixing Bugs, Scrum accountability - Look at my interpretation of students history over the years. How could habits apply to you and your team(s) through 2023?"
  },
  {
    "objectID": "blog/posts/2022-09-12-HM-focus.html#hacks",
    "href": "blog/posts/2022-09-12-HM-focus.html#hacks",
    "title": "Focus and Habits",
    "section": "Hacks",
    "text": "Hacks\n\nWatch and build a vocabulary about how to use the “Psychology and the Good Life” and maintain it on GH Pages. Think about glitches we have in our mind and how we adapt to those glitches. Here are some ideas…\nBlog a note of gratitude to someone on campus and someone at home, record your experience in GH Pages.\nMake a gratitude list in your Blog.\nThink about some goals you should set.\nThink about the goals in conjunction with happy people.\nStart your own personal journey into Computer Science by using experience and inspiration from Anthony and Sahil, Bria"
  },
  {
    "objectID": "blog/posts/2022-08-29-PT-data_abstraction.html",
    "href": "blog/posts/2022-08-29-PT-data_abstraction.html",
    "title": "Data Abstraction in Python",
    "section": "",
    "text": "Points Link"
  },
  {
    "objectID": "blog/posts/2022-08-29-PT-data_abstraction.html#daily-plans-week-2",
    "href": "blog/posts/2022-08-29-PT-data_abstraction.html#daily-plans-week-2",
    "title": "Data Abstraction in Python",
    "section": "Daily Plans Week 2",
    "text": "Daily Plans Week 2\nIntroduce some concepts in College Board: Big Idea 2 Data (All Sections), College Board: Big Idea Section 3.2 Data Abstraction. - Monday: Introduction for Week. “Live Review” with full Table (4s). Start review topics in College Board. Build your vocabulary blog. - Tuesday: Test Prep - Discuss Lists and Dictionaries\n- Wednesday: Tech Talk - HTML fragments, including behind the Scenes Layout, Code/Code/Code, Completing canvas assignment - Thursday: Human Day - Anthony and Sahil blogging interests and progress in CS. - Friday: Practice Pair Programming Habit of 20 minutes/20 minutes each having 1 commit on Wednesday and prepare comment for next weeks review."
  },
  {
    "objectID": "blog/posts/2022-09-19-pbl-javascript_tutorial.html",
    "href": "blog/posts/2022-09-19-pbl-javascript_tutorial.html",
    "title": "JavaScript Tutorial",
    "section": "",
    "text": "{% include nav_frontend.html %}"
  },
  {
    "objectID": "blog/posts/2022-09-19-pbl-javascript_tutorial.html#javascript-references",
    "href": "blog/posts/2022-09-19-pbl-javascript_tutorial.html#javascript-references",
    "title": "JavaScript Tutorial",
    "section": "JavaScript references",
    "text": "JavaScript references\n\nJavaScript is the most important language you need to learn as a frontend developer. It’s a great first language for web developers to learn.\n\n\nW3Schools - reference\nfeecodecamp.org - pbl\njavascript30.com - pbl\n\n\nconsole.log output\nOutput to console using the classic programming introduction using a “Hello, World!” message.\n- The command or function is console.log() - “Hello, World” is a String literal. This is the referred to as Static text, as it does not change. - “Hello, World” is a parameter to the console.log command. - The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. - Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect->Console from the browser.\n\nconsole.log(\"Hello, World!\");\n\nHello, World!\n\n\n\n\nconsole.log output showing use of variable\nThis second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal.\n- The variable “var msg =” is used to capture the data - The console.log(msg) outputs to console\n\nvar msg = \"Hello, World!\";\nconsole.log(msg);\n\nHello, World!\n\n\n\n\nconsole.log output showing use of a function\nThis example passes the previously defined variable “msg” to the newly defined “function logIt(output)”. - There are two steps in the code, the definition of the function and the call to the function. - “function logIt(output) {}” and everything between curly braces is the definitions of the function. - “logIt(msg)” is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. - Since the variable “msg” was defined in previous cell, it is used a parameter when calling the logMessage function.\n\nfunction logIt(output) {\n    console.log(output);\n}\nlogIt(msg);\n\nHello, World!\n\n\n\n\nShowing reuse of a function\nNow that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. - First call sends a different string message - Second call sends a number\n\nconsole.log(\"Reuse of logIT\")\nlogIt(\"Hello, Students!\");\nlogIt(2022)\n\nReuse of logIT\nHello, Students!\n2022\n\n\n\n\nDynamic or Loosely typed language (string, number)\nJavaScript is a loosely typed language, meaning you don’t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the “typeof” keyword returns the type.\n\nfunction logItType(output) {\n    console.log(typeof output, \";\", output);\n}\nconsole.log(\"Looking at dynamic nature of types in JavaScript\")\nlogItType(\"hello\"); // String\nlogItType(2020);    // Number\nlogItType([1, 2, 3]);  // Object is generic for this Array, which similar to Python List\n\nLooking at dynamic nature of types in JavaScript\nstring ; hello\nnumber ; 2020\nobject ; [ 1, 2, 3 ]\n\n\n\n\nBuild a Person Function/Class object and JSON\nJavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to “function” definitions versus “Class”, thus this lesson uses “function” and “prototype” versus “Class”. - Definition of function allows for a collection of data, the “function Person” allows programmer to retain name, github id, and class of designation. - Definition of a prototype allow for the definition of a method associated with the function , the “Person.prototype.toJSON” allows the collection of data to be expressed in a json/string versus JavaScript object. - Instance of a function, the “var teacher = new Person(”Mr M”, “jm1021”, 1977)” line makes a variable “teacher” which is an object representation of “function Person”.\n\n// define a function to hold data for a Person\nfunction Person(name, ghID, classOf) {\n    this.name = name;\n    this.ghID = ghID;\n    this.classOf = classOf;\n    this.role = \"\";\n}\n\n// define a setter for role in Person data\nPerson.prototype.setRole = function(role) {\n    this.role = role;\n}\n\n// define a JSON conversion \"method\" associated with Person\nPerson.prototype.toJSON = function() {\n    const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role};\n    const json = JSON.stringify(obj);\n    return json;\n}\n\n// make a new Person and assign to variable teacher\nvar teacher = new Person(\"Mr M\", \"jm1021\", 1977);  // object type is easy to work with in JavaScript\nlogItType(teacher);  // before role\nlogItType(teacher.toJSON());  // ok to do this even though role is not yet defined\n\n// output of Object and JSON/string associated with Teacher\nteacher.setRole(\"Teacher\");   // set the role\nlogItType(teacher); \nlogItType(teacher.toJSON());\n\nobject ; Person { name: 'Mr M', ghID: 'jm1021', classOf: 1977, role: '' }\nstring ; {\"name\":\"Mr M\",\"ghID\":\"jm1021\",\"classOf\":1977,\"role\":\"\"}\nobject ; Person { name: 'Mr M', ghID: 'jm1021', classOf: 1977, role: 'Teacher' }\nstring ; {\"name\":\"Mr M\",\"ghID\":\"jm1021\",\"classOf\":1977,\"role\":\"Teacher\"}\n\n\n\n\nBuild a Classroom Array/List of Persons and JSON\nMany key elements are shown again. New elements include… - Building an Array, “var students” is an array of many persons - Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages.\n\n// define a student Array of Person(s)\nvar students = [ \n    new Person(\"Anthony\", \"tonyhieu\", 2022),\n    new Person(\"Bria\", \"B-G101\", 2023),\n    new Person(\"Allie\", \"xiaoa0\", 2023),\n    new Person(\"Tigran\", \"Tigran7\", 2023),\n    new Person(\"Rebecca\", \"Rebecca-123\", 2023),\n    new Person(\"Vidhi\", \"unknown\", 2024)\n];\n\n// define a classroom and build Classroom objects and json\nfunction Classroom(teacher, students){ // 1 teacher, many student\n    // start Classroom with Teacher\n    teacher.setRole(\"Teacher\");\n    this.teacher = teacher;\n    this.classroom = [teacher];\n    // add each Student to Classroom\n    this.students = students;\n    this.students.forEach(student => { student.setRole(\"Student\"); this.classroom.push(student); });\n    // build json/string format of Classroom\n    this.json = [];\n    this.classroom.forEach(person => this.json.push(person.toJSON()));\n}\n\n// make a CompSci classroom from formerly defined teacher and students\ncompsci = new Classroom(teacher, students);\n\n// output of Objects and JSON in CompSci classroom\nlogItType(compsci.classroom);  // constructed classroom object\nlogItType(compsci.classroom[0].name);  // abstract 1st objects name\nlogItType(compsci.json[0]);  // show json conversion of 1st object to string\nlogItType(JSON.parse(compsci.json[0]));  // show JSON.parse inverse of JSON.stringify\n\nobject ; [ Person { name: 'Mr M', ghID: 'jm1021', classOf: 1977, role: 'Teacher' },\n  Person {\n    name: 'Anthony',\n    ghID: 'tonyhieu',\n    classOf: 2022,\n    role: 'Student' },\n  Person { name: 'Bria', ghID: 'B-G101', classOf: 2023, role: 'Student' },\n  Person { name: 'Allie', ghID: 'xiaoa0', classOf: 2023, role: 'Student' },\n  Person {\n    name: 'Tigran',\n    ghID: 'Tigran7',\n    classOf: 2023,\n    role: 'Student' },\n  Person {\n    name: 'Rebecca',\n    ghID: 'Rebecca-123',\n    classOf: 2023,\n    role: 'Student' },\n  Person { name: 'Vidhi', ghID: 'unknown', classOf: 2024, role: 'Student' } ]\nstring ; Mr M\nstring ; {\"name\":\"Mr M\",\"ghID\":\"jm1021\",\"classOf\":1977,\"role\":\"Teacher\"}\nobject ; { name: 'Mr M', ghID: 'jm1021', classOf: 1977, role: 'Teacher' }\n\n\n\n\nIJavaScript and Table formatting using toHTML method\nThis example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter \\[.html which renders output similarly to a real website.  \n- JavaScript in the _toHTML method is broken into three parts...\n    - Style part is building CSS inline formatting\n    - Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td).  The table data is obtained from a Classroom object.  The JavaScript for loop allows the construction of a new row of data for each person object in the Array.\n    - Return part creates the HTML fragment for rendering\n- The last line in the example <mark>\\].html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render\n\n// define an HTML conversion \"method\" associated with Classroom\nClassroom.prototype._toHtml = function() {\n  // HTML Style is build using inline structure\n  var style = (\n    \"display:inline-block;\" +\n    \"border: 2px solid grey;\" +\n    \"box-shadow: 0.8em 0.4em 0.4em grey;\"\n  );\n\n  // HTML Body of Table is build as a series of concatenations (+=)\n  var body = \"\";\n  // Heading for Array Columns\n  body += \"<tr>\";\n  body += \"<th><mark>\" + \"Name\" + \"</mark></th>\";\n  body += \"<th><mark>\" + \"GitHub ID\" + \"</mark></th>\";\n  body += \"<th><mark>\" + \"Class Of\" + \"</mark></th>\";\n  body += \"<th><mark>\" + \"Role\" + \"</mark></th>\";\n  body += \"</tr>\";\n  // Data of Array, iterate through each row of compsci.classroom \n  for (var row of compsci.classroom) {\n    // tr for each row, a new line\n    body += \"<tr>\";\n    // td for each column of data\n    body += \"<td>\" + row.name + \"</td>\";\n    body += \"<td>\" + row.ghID + \"</td>\";\n    body += \"<td>\" + row.classOf + \"</td>\";\n    body += \"<td>\" + row.role + \"</td>\";\n    // tr to end line\n    body += \"<tr>\";\n  }\n\n   // Build and HTML fragment of div, table, table body\n  return (\n    \"<div style='\" + style + \"'>\" +\n      \"<table>\" +\n        body +\n      \"</table>\" +\n    \"</div>\"\n  );\n\n};\n\n// IJavaScript HTML processor receive parameter of defined HTML fragment\n$$.html(compsci._toHtml());\n\n\nNameGitHub IDClass OfRoleMr Mjm10211977TeacherAnthonytonyhieu2022StudentBriaB-G1012023StudentAlliexiaoa02023StudentTigranTigran72023StudentRebeccaRebecca-1232023StudentVidhiunknown2024Student"
  },
  {
    "objectID": "blog/posts/2022-07-19-PBL-calculator.html",
    "href": "blog/posts/2022-07-19-PBL-calculator.html",
    "title": "Calculator Starters",
    "section": "",
    "text": "{% include nav_frontend.html %}   \n\n\n\n\n<!--result-->\n<div class=\"calculator-output\" id=\"output\">0</div>\n<!--row 1-->\n<div class=\"calculator-button\" onclick=\"number('1')\">1</div>\n<div class=\"calculator-button\" onclick=\"number('2')\">2</div>\n<div class=\"calculator-button\" onclick=\"number('3')\">3</div>\n<div class=\"calculator-button\" onclick=\"operation('+')\">+</div>\n<!--row 2-->\n<div class=\"calculator-button\" onclick=\"number('4')\">4</div>\n<div class=\"calculator-button\" onclick=\"number('5')\">5</div>\n<div class=\"calculator-button\" onclick=\"number('6')\">6</div>\n<div class=\"calculator-button\" onclick=\"operation('-')\">-</div>\n<!--row 3-->\n<div class=\"calculator-button\" onclick=\"number('7')\">7</div>\n<div class=\"calculator-button\" onclick=\"number('8')\">8</div>\n<div class=\"calculator-button\" onclick=\"number('9')\">9</div>\n<div class=\"calculator-button\" onclick=\"operation('*')\">*</div>\n<!--row 4-->\n<div class=\"calculator-button\" onclick=\"clearCalc()\">A/C</div>\n<div class=\"calculator-button\" onclick=\"number('0')\">0</div>\n<div class=\"calculator-button\" onclick=\"number('.')\">.</div>\n<div class=\"calculator-button\" onclick=\"equals()\">=</div>"
  },
  {
    "objectID": "blog/posts/2022-09-19-HM-agile.html",
    "href": "blog/posts/2022-09-19-HM-agile.html",
    "title": "Agile Methodology",
    "section": "",
    "text": "<div>\n\n<div style=\"float: left; margin: 0px 10px 10px 0px;\">\n    <a href=\"https://www.scaledagileframework.com/\">\n        <img atl=\"Roles and Agile\" src=\"{{site.baseurl}}/images/agile.webp\" title=\"Visual by Ashika Palacharla\"\n        width=\"250\">\n    </a>\n</div>\n<div>\n    <hr>\n    <p>\n        Agile software development uses practices such as <mark>pair programming</mark>, test-driven development, stand-ups, <mark>planning sessions</mark>, and sprints.  Agile includes the <a href=\"https://www.agilealliance.org/agile101/12-principles-behind-the-agile-manifesto/\">12 Principles</a> expressed in the Manifesto for Agile Software Development.</p>\n    <hr>\n</div>\n\n</div>\n\n\n\nTo ensure transparency during the sprint the Team should meet daily at the daily scrum ( sometimes called a standup). As adaptation for classroom, Team should have a standup meeting for weekly plans, should have assignments for tasks, assignments for integration and deployment. - Scrum Master: The scrum master helps to facilitate the sprint by ensuring that an agile framework is followed. He/she is committed to tracking issues and maintaining scrum boards, but should also remain flexible and open to opportunities for the team to improve their workflow. - DevOps: DevOps is the combination of cultural philosophies, practices, and tools that increases an team’s ability to deliver applications and services at high velocity: version control, integration, managing dependencies (requirements.txt), AWS deployment are some of the key functions that impact velocity. - Development Team: The development team can be comprised of all kinds of people including designers, writers, presenters, developers, etc. Two key roles in Web Development are … - Frontend Developer: A front-end developer builds the front-end portion of websites and web applications—that is, the part that users actually see and interact with. - Backend Developer: Back-end developers a build and maintain the mechanisms that process data and perform actions like data storage, security, and other server-side functions that you cannot see.\n\n\n\nWhen planning there is an expectation of time.\n- Individual in Class Time. You should expect 3 to 4 hours of productive classroom work each week. - Individual at Home Time. To maintain pace in this class, you should consider a 2 hour coding or design session (weekly) outside of class time.\n- Sprint Calculation Time. 5-6 hours of coding or planning per week per individual, or 20-24 hours per team. If we had a two week Sprint this would be 40-48 hours of work. - Key to success. Make great use of time in class. Pair share programming typically provides three time dividend over individual programming when in class and you are learning something new.\n\n\n\nSprint cadences have ideas/issues that are broken into short term work units called tasks.\n\n\n\nThe Scrum Board contains issues that are assigned to individuals, each of these issues will have tangible deliverable links (code/video/…). Scrum Team will use Scrum Board to understand everyone’s ideas and efforts. This includes individual tasks. Use GitHub Projects add Issues to the board. Issues are placed in columns on a Scrum Board (Kanban) to represent progress. The below columns have been successful in our academic environment. 1. To do/backlog 2. In progress 3. Complete 4. Deployed 5. Reviewed/Done\n\n\n\nSprint is a period of time that Team uses to plan work and execute work. This includes planning, research, development, deployment, and test. Typically, sprints will be 2 weeks or longer in the classroom. Anytime a sprint lasts longer than a week, there will be a weekly Review Tickets (formative assessment) and concluding with an end of Review Ticket (summative assessment). Sample sprint follows… - Week 1 - Monday - Sprint Objectives, Scrum Team Planning - Tuesday - Test Prep Tuesday (Student Led) - Wednesday - Code, Code, Code - Thursday - Tech Talk (Teacher) - Friday - Code, Code, Code; Teacher 1 v 2, formative review - 2 hours outside of class for project work\n\nWeek 2\n\nMonday - Sprint Crossover Grading, Scrum Team Planning\nTuesday - Test Prep Tuesday (Student Led)\nWednesday - Code, Code, Code\nThursday - Tech Talk (Teacher)\nFriday - Code, Code, Code; Teacher 1 v 4 including Demos/Review Ticket/Peer, summative review\n2 hours outside of class for project work"
  },
  {
    "objectID": "blog/posts/2022-09-19-HM-agile.html#important-transferable-skills",
    "href": "blog/posts/2022-09-19-HM-agile.html#important-transferable-skills",
    "title": "Agile Methodology",
    "section": "7 Important Transferable Skills",
    "text": "7 Important Transferable Skills\n\nAssessments / Reviews\nDuring Teacher reviews meetings ( 1 v 2 pair, 1 v 4 team), the pair or team will provide Teacher with a Review Ticket. The Review Ticket will be completed, it should reference Tasks Completed and Self/Crossover Score(s). Canvas and/or Points Blog should be used as a guide to completing a review ticket, make sure you account for everything. Make sure a Point total is a the TOP of ticket, as points are important to you! All assessments will be looking for these 7 elements in your work…\n\nCreativity Creativity doesn’t necessarily mean you paint or draw or sculpt well. Creativity in education and workplace, in many cases, presents itself in terms of how you approach tasks and solve problems, Do you do both inside and outside of the box for solutions? Or, do you stick to a planned system? If you solve even the smallest problem, you’ve demonstrated creativity. This skill scales up: Big problems are enlarged small problems; small problems scaled up are big problems.\n\n\nConceptualize problems and solutions\nDisplay foresight\nMake connections\nMake intelligent inferences\nSynthesize ideas and data\n\n\nCritical thinking Solving complex or abstract problems requires critical thinking, especially when the problems are critical. Not only that, but critical thinking skills also enable the discovery of deficiencies that could cause less than optimal results.\n\n\nThe ability to take a step back and look at things more critically and say ‘Where might we have to have gotten this wrong?’ or ‘How might we be able to improve this?’ is critical thinking. If you can articulate this skill you will stand out!\nCritical thinkers head off problems before they arise. And if they do surface, they take them head-on.\n\n\nCommunication Effective communication is the crux of everything you do. It doesn’t matter how creative or intelligent you are, or how many computer languages you know: If you can’t communicate well, your other skills are meaningless. Students are encouraged to talk about how they were able to bring their teams together.\n\n\nVerbal skills. How do you address an audience in terms they can understand.\nListening skills. Learning and understanding without defensiveness.\nWriting skills. You need to be able to write in such a way that non-experts will understand.\nTechnological communication skills. You should be able to discuss highly technical hard skills in a way appropriate to your audience. Communication details are not the same for all audiences.\n\n\nCollaboration through Leadership Leadership skills generally encompass communication, problem-solving and managing conflict, relationship building and being able to get people on your team on board with a mission or project. Leaders are big-picture thinkers who take various interests into account when making major decisions. Leaders are responsible for:\n\n\nDelegating responsibility\nDemonstrating effective time management\nInitiating new ideas\nMajor decision-making\nManaging conflict\nManaging groups\nMultitasking\nTeaching and mentoring\n\n\nCollaboration - Teamwork Individuals that work well with others. This is a important category mentioned in early school. But it applies to High School, College and adults. Trust is the major difference between working alone versus working in groups. And trust can be hard: Some people are skeptical by nature or want to work through an entire project lifecycle solo. But placing trust in an active, dynamic team provides more than just project completion. Teamwork — a sense of community — elevates spirits and improves productivity.\n\n\nAccepting responsibility\nMaking and implementing decisions\nManaging time wisely\nMeeting both short- and long-term goals\nOrganizing\nSetting and meeting deadlines\n\n\nResearching Research is not a process performed by Teacher, Boss, or some upstream process. Everything you do in Technology requires research. Research is a key part of the lifecycle: changing plans, fluctuating results, and roadblocks require research before anyone can take action. Conversing with team members is a form of research: If you’ve asked a peer’s opinion on a technical matter, you’ve performed research.\n\n\nAnalyzing information\nBrainstorming solutions\nDelineating needs and requirements\nExtracting information from data\nGathering information\nForecasting possible roadblocks\nSetting goals\nSolving problems\n\n\nTechnical We live in a tech-heavy world, and you need to understand the tech your project requires. Try to stay current with the many technical advancements on your project. Make sure that play with the different softwares and platforms that are part of your environment. Be knowledgeable and speak to the technical things that you are learning.\n\n\nBeing easy to work with\nQuick to learn\nGlad to learn\nFailing and always willing to try new things\nWilling to open new doors in case of a drastic oversight"
  },
  {
    "objectID": "blog/posts/2022-09-19-HM-agile.html#hacks",
    "href": "blog/posts/2022-09-19-HM-agile.html#hacks",
    "title": "Agile Methodology",
    "section": "Hacks",
    "text": "Hacks\nKey deliverables of this Tech Talk… - Build your own ‘Agile Methodology Diagram’, identify members and Team Member roles - Create a Scrum Board as a weekly output of Team Stand-up Meeting - Build an individual Issue and place it on the Scrum Board, repeat each week. The issue can point to Blog post(s) - Add to PBL vocabulary on your Fastpages / GH Pages"
  },
  {
    "objectID": "blog/posts/2022-11-01-PT-project_week_3.html",
    "href": "blog/posts/2022-11-01-PT-project_week_3.html",
    "title": "Project Week 3",
    "section": "",
    "text": "N@tM Week - Monday: Day Off - Tuesday: Work Day - Wednesday: Work Day - Thursday: N@tM 6 to 7:30pm - Friday: Final Exam Open ## N@tM Schedule Schedule for room and time on evening of event. - 6:00pm Period 1 (A101), Mort 4 (A151) - 6:30pm Period 2 (A101), Yeung 4 (A151) - 7:00pm Period 3 (A101), Yeung 5 (A151) ## N@tM Day (12 points) Summary of Points - Theme, Presentation and Professionalism Status 1 pt x 4 (N@tM is required, make sure Teacher sees you for 1 minute prior to leaving) - Key Technicals BE + DB 1 pt x 5 - Key Technicals FE 1 pt x 3"
  },
  {
    "objectID": "blog/posts/2022-08-22-hm-anthony_and_sahil.html",
    "href": "blog/posts/2022-08-22-hm-anthony_and_sahil.html",
    "title": "Anthony and Sahil’s Reflections",
    "section": "",
    "text": "Anthony: Computer Science Before APCSA\nHello! My name is Anthony Vo, and I graduated Del Norte with the class of 2022.\nMy computer science journey started when I was in second grade. Khan Academy used to have a coding portion of its website, and I remember spending hours making programs that drew simple images. There was no logic involved in the coding, but as an introduction, it got me hooked on the subject. Here’s a recreation of a pig that I made using Khan Academy:\n\n\n\nPig\n\n\nIn elementary school, I used Scratch to create a plethora of games. During the summer, I also took ID Tech Camps that taught me more about game design and programming. Though some of these camps weren’t that helpful in learning computer science (Minecraft mapping isn’t a skill I use to day), they furthered my interest in the subject. You can check out some of my scratch projects here.\nI took more computer science classes in middle school with the two GTT classes. The classes still worked a lot with Scratch, but in 8th grade, I learned more about HTML, CSS, JavaScript, and Python. Those classes didn’t result in the best programs, but it provided a solid foundation for problem solving and syntax that I continue to build off of today. Below are a few programs that I made in eighth grade (updated to conform to modern Python standards).\n\n\"\"\"Anthony Vo\n11-14-17\ncoinflip.py\nTo practice using random numbers\"\"\"\n\n#Imports random module\nimport random\n\n#Initializes variables\nnumberOfHeads = 0\nnumberOfTails = 0\n\n#Flips coins\nfor number in range(20):\n    coinSide = random.randrange(2)\n    if coinSide == 0:\n        numberOfHeads = numberOfHeads + 1\n        print(\"Heads\")\n    else:\n        numberOfTails = numberOfTails + 1\n        print(\"Tails\")\n\n#Gives result\nprint(f\"Overall, heads was flipped {numberOfHeads} times while tails was flipped {numberOfTails} times.\")\n\nTails\nTails\nTails\nTails\nTails\nHeads\nHeads\nTails\nTails\nTails\nTails\nTails\nTails\nTails\nTails\nHeads\nHeads\nTails\nHeads\nTails\nOverall, heads was flipped 5 times while tails was flipped 15 times.\n\n\n\n\"\"\"Anthony Vo\n11-14-17\nfortunecookies.py\nTo practice using random numbers\"\"\"\n\n#Imports random module\nimport random\n\n#Gives messages\nwhichMessage = random.randrange(5)\nif whichMessage == 0:\n    print(\"You will soon have indigestion due to that fortune cookie.\")\nelif whichMessage == 1:\n    print(\"You will buy more Kung Pao Chicken in the future.\")\nelif whichMessage == 2:\n    print(\"Following this retaurant's Facebook page will make you prosperous.\")\nelif whichMessage == 3:\n    print(\"If you go to that fake Chinese restaurant Panda Express, you will become poor.\")\nelse:\n    print(\"Not eating Chinese cuisine will cause you to have many unlucky days.\")\n\nFollowing this retaurant's Facebook page will make you prosperous.\n\n\nThe next computer science class that I took was Mr. Mortensen’s Intro to Computer Science class (which has since been replaced with CSP). This was probably my favorite class in all of high school; hanging out in fifth period with my friends, coding, and having an overall good time was one of the highlights of high school… which probably says something about me ;). I learned how to use GitHub in this class and really collaborate with my peers, which helped me apply my skills to a practical environment. I also learned C which helped me understand more about how computers processed code. Below is a program I made which creates random questions. You can see how much better my programming got after taking this class!\n//\n//  main.c\n//  parameterFunctionQuestion(s)\n//\n//  Created by Vo, Anthony on 9/11/19.\n//  Copyright © 2019 Vo, Anthony. All rights reserved.\n//\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint questionMaker (double arg1, char operator, double arg2) { //function that creates math questions based off of given paramters\n    int input, randomizer, answer, i, j, seqChecker[4];\n    double answerSeq[4];\n    int score = 0, shutOff = 0;\n    srand(time(0)); //initializes score, input, and random seed\n    \n    switch (operator) {\n        case '+':\n            answer = arg1 + arg2;\n            break;\n        case '-':\n            answer = arg1 - arg2;\n            break;\n        case '/':\n            answer = arg1 / arg2;\n            break;\n        case '*':\n            answer = arg1 * arg2;\n            break;\n    } //determines correct answer\n    \n    double answer1 = arg1 + arg2;\n    double answer2 = arg1 - arg2;\n    double answer3 = arg1 / arg2;\n    double answer4 = arg1 * arg2; //gives possible answers\n    \n    if (answer1 == answer4) {\n        if (operator == '+') {\n            answer4 = answer1 - (rand() % 100) + 1;\n        } else {\n            answer1 = answer4 - (rand() % 100) + 1;\n        }\n    }\n    if (answer3 == answer4) {\n        if (operator == '*') {\n            answer3 = answer4 - (rand() % 100) + 1;\n        } else {\n            answer4 = answer3 - (rand() % 100) + 1;\n        }\n    }\n    if (answer2 == answer3) {\n        if (operator == '-') {\n            answer3 = answer2 - (rand() % 100) + 1;\n        } else {\n            answer2 = answer3 - (rand() % 100) + 1;\n        }\n    } //failsafe for if two answers are the same (i.e. 4 - 2 = 4 / 2)\n    \n    for (i = 0; i < 4; i++) {\n        seqChecker[i] = 0;\n    } //cleans up seqChecker (has some random integers inside of it, not sure why)\n    \n    for (i = 0; i < 4; i++) {\n        while (shutOff == 0) {\n            randomizer = rand() % 4;\n            if (seqChecker[0] != randomizer + 1 && seqChecker[1] != randomizer + 1 && seqChecker[2] != randomizer + 1 && seqChecker[3] != randomizer + 1) {\n                shutOff = 1;\n            }\n            \n        }\n        \n        shutOff = 0;\n        randomizer ++;\n        switch(randomizer) {\n            case 1:\n                answerSeq[i] = answer1;\n                seqChecker[i] = 1;\n                break;\n            case 2:\n                answerSeq[i] = answer2;\n                seqChecker[i] = 2;\n                break;\n            case 3:\n                answerSeq[i] = answer3;\n                seqChecker[i] = 3;\n                break;\n            case 4:\n                answerSeq[i] = answer4;\n                seqChecker[i] = 4;\n                break;\n        }\n        \n    } //randomizes answers\n    \n    printf(\"%lf %c %lf is?\\n\", arg1, operator, arg2);\n    printf(\"1) %lf\\n2) %lf\\n3) %lf\\n4) %lf\\n\", answerSeq[0], answerSeq[1], answerSeq[2], answerSeq[3]);\n    scanf(\"%d\", &input); //asks question\n    \n    if (answerSeq[input - 1] == answer) {\n        score++;\n        printf(\"Correct!\\n\");\n    } else {\n        printf(\"Incorrect\\n\");\n    } //checks for correct answer\n    \n    return score; //returns points gained\n}\n\nint main(void) {\n    srand(time(0));\n    int score = 0, questions = 0;\n    /* int i, operator;\n    for (i = 0; i < (rand() % 5) + 1; i++) {\n        operator = rand() % 4;\n        switch(operator) {\n            case 0:\n                score += questionMaker(rand() % 20 + 1, '+', rand() % 20 + 1);\n                break;\n            case 1:\n                score += questionMaker(rand() % 20 + 1, '-', rand() % 20 + 1);\n                break;\n            case 2:\n                score += questionMaker(rand() % 20 + 1, '/', rand() % 20 + 1);\n                break;\n            case 3:\n                score += questionMaker(rand() % 20 + 1, '*', rand() % 20 + 1);\n                break;\n        }\n        questions++;\n    } */ //asks random questions (i.e. random arguments and operators)\n    questionMaker(10, '*', 8);\n    questions++;\n    \n    printf(\"Your final score is %d out of %d\\n\", score, questions);\n    \n    return 0;\n}\n\n\nAnthony: My AP CSA Experience\nFinally, we’ve reached junior year. I took AP CSA during the quarantine year, and it helped me improve my Object Oriented Programming skills by a lot. My success in the class stemmed mostly from motivation to code; I spent my first periods coding instead of playing Roblox (which was a popular alternative that I did in my English classes), and I made sure to finish all of my assignments on time without copying from others. Mr. Mortensen’s AP study plan also helped a lot. We were required to finish a CollegeBoard unit quiz every week, so I would hop in a Discord call with my group members every Friday to do the quiz together. I have a lot of fond memories of staying up until 2 AM with my friends on Friday to meet Mr. Mortensen’s assignment deadline (admittedly, it was a lot more fun than it sounds).\nFor success in AP CSA, I would recommend completing everything on time. Though there is a grace period for a lot of assignments, if you fall behind one week and don’t understand a concept, it can quickly snowball out of control. Get on top of your assignments, make sure you understand each week’s concepts, and you’ll succeed. You don’t need to have had years of prior experience like me; you just need to try your best to understand and work on each week’s work.\nAfter junior year, I realized that I had a big hole in my repretoire. I could code well, sure, but I couldn’t actually present or make anything of substance. So, as I chose senior classes, I decided on CSP to work on my web development skills. I spent the summer writing college essays, playing League of Legends, and hanging out. I also found out that I got a 5 on the AP CSA exam! When fall came, I was ready to begin creating polished websites. During that first trimester, I met a new friend…\n\n\nSahil: Starting Out\nHey, I’m Sahil Samar. I’m currently a senior at Del Norte, in the graduating class of 2023.\nMy computer science journey started out in around 8th grade when I got interested in game development. But game development was a super hard thing to start with! Unity uses a language called C#, and I didn’t have any idea how to use it. I didn’t really understand the architecture of Unity or C# at first; I just kind of dove in and started making projects. I would look up what I didn’t know, and just copy paste in code to get things working. Even this was hard, because when something went wrong I had no idea how to fix it. But with way too many hours, I was able to make some projects. It isn’t easy to get started getting into coding! By the time I got to AP CSP, I still had a lot to learn about the coding mindset.\nMy very first game, 3D Pong:\n\n\n\n3D Pong\n\n\n\n\nSahil: AP CSP\nWhen I got to AP CSP, I still didn’t really have an idea of how coding worked. I just knew how to find code and paste it into my project. But slowly, I began moving away from this. I met Anthony Vo, who you just read a little bit about, in my first trimester. Whenever I didn’t understand something, he would always help me out. He wouldn’t give me code to copy paste though. He would actually explain the code to me, so I could do it myself. This was huge for me, since I actually began to think about my code and be able to develop things on my own. Mr. Mortensen guided me through countless problems, but everytime I asked him for help I walked away with some new understanding of how to debug my code. At the start of the trimester, I would go up to Mr. Mortensen or Anthony as soon as I had a problem. But by the end of the year, I only used them as a last resort, after I had truly tried everything. At that point, I just needed a pair of fresh eyes, and not someone to guide me through the whole process. Moral of the story: you aren’t expected to come in an expert at coding! But, if you use your resources properly, you can use this year to grow. You can develop the mindset of a programmer and learn how to create cool projects and debug your issues when things don’t work out.\n\n\nSahil: After AP CSP\nAP CSP shaped me to be the coder I am today; but you only get out of it what you put into it. If you work hard, then it can completely change your mindset (if you are a new coder), and teach you plenty of skills. After AP CSP, I was able to land a summer internship working in CS at the San Diego Supercomputer Center. During this internship, I worked with huge supercomputers and began to understand what servers really were and how they worked. Our project was called ICICLE. If you want to learn more about it, you could watch this short video: https://www.youtube.com/watch?v=gNFk5tDTtoU. I developed sophisticated authentication methods, and did a lot of “firsts” in the project. I went from having to be guided through basic code in CSP to creating things that had never been done before. It’s possible! After doing a lot of stuff behind the scenes, we got to test our system on massive knowledge graphs and run some machine learning algorithms.\nPicture of one of the computers I worked with, called Expanse:\n\n\n\nExpanse\n\n\nKnowledge Graph of Asteroids, classified using a neural network on being hazarous or not:\n\n\n\nKnowledge Graph\n\n\nI also never gave up on making games! But now, I don’t really need to follow tutorials anymore. I can architect a solution on my own, and when I do need to look something up I learn from it and implement it rather than just copying it. When something goes wrong, I’m not stuck; I know what to do, and I have confidence because I know that every problem has a solution. Here’s a peek at one of the games I’m working on now:\n\n\n\nGame\n\n\n\n\nAnthony: After CSP\nAP CSP helped immensely with my presentation and web development skills. For reference, here’s a website I made for my 10th grade AP European History Final…\n\n\n\nwebsite\n\n\nAs you can see, it looks like garbage! You can also check out my extremely great 11th grade website for AP CSA here.\nAfter taking AP CSP, my websites looked a lot better. I updated a website for my golf coach and made some personal websites. Here’s a quick one that I made to create basketball teams:\n\n\n\nimage\n\n\nEven if you’re new to CS as a whole, knowing how to make websites can help you show off the things you’ve done. Whether it’s a personal portfolio website, an online shop, or anything else, web development is a great skill to have.\n\n\nFinal Thoughts\nAnthony: I hope you have a great year in this class! If you put in the time and effort, you will be really successful and gain skills that you can use for the rest of your life. Best of luck to you all!\nSahil:"
  },
  {
    "objectID": "blog/posts/2022-08-15-AP-pseudo_code.html",
    "href": "blog/posts/2022-08-15-AP-pseudo_code.html",
    "title": "College Board Pseudo Code",
    "section": "",
    "text": "Thousands of different programming languages have been created, and more are being created every year. College Board has designed a pseudo code, non operational programming language, to highlight concepts that it wants every student to learn. College Board pseudo code highlights instructions that are common for many languages.\nBTW, instructions are translated into machine code for computers to execute. The notation we look at is supposed to be easy for the user and their application. For instance, many new languages are being popularized around data science. It is more important that a Data Scientist is successful in their task, than to learn syntax that is not familiar to their traditional workspace.\nCollege Board is trying to remain neutral and build Computer Science Principles off of any language, thus the Teacher is left to pick the language(s) according to application and curriculum.\nExam Reference Sheet\n\n\nCommand Vocabulary | Pseudo code | Python | Purpose Output | DISPLAY(expression) | print(expression, end=” “) | Displays the value of expression, followed by a space. Python defaults to newline, thus the end=” ” Input | a ← INPUT() | a = input(prompt) | Accepts a value from the user and returns it to the variable a. Assignment | a ← expression | a = expression | Evaluates expression and assigns the result to the variable a. Selection | IF (expression) | if expression: | Run commands in the code block associated with the selection Iteration n times | REPEAT n TIMES | for i in range(n): | Repeat commands in the code block associated withe the iteration n times Iteration expression | REPEAT UNTIL (expression) | while expression: | Repeat commands in the code block associated withe the iteration while expression is true List Assignment | list ← [expression1, expression2, expression3] | list = [expression1, expression2, expression3] | Assigns 3 values to list, value can be literal or expressions First index in List | list[1] | list[0] | Access the 1st element in the list[]. FYI, most programming languages start a zero. Last index in List | list[LENGTH(list)] | list[len(list) - 1] | Access the last element in the list[]. If you start at zero, last element is length - 1. Define Procedure | PROCEDURE name (parameter) | def name(parameter): | Create a procedure containing a sequence of programming instructions. Expression equals | a = b | a == b | Evaluate if assigned value of a equals assigned value of b Expression not equals | a ≠ b | a != b | Evaluate if assigned value of a is NOT equal to assigned value of b\n\n\n\na ← 1\nb ← 1\n\nIF (a = b) {\n   DISPLAY(\"A equals B\")\n}\n\n\n\na = 1\nb = 1\nif (a == b):\n    # Python uses indent to establish code block, Teacher use tab key\n    print(\"A equals B\")\n\n\n\nIt is very important that you become fluent in “Command Vocabulary” and “Purpose” of the Pseudo Code versus Python comparison. During the year you will look at JavaScript which has same Command Vocabulary and Purpose. Others may take Java, you will see the same ideas again.\n- Start building Vocabulary and Purpose by Code/Code/Coding - Supplement you Code with comments and outputs using Markdown and Jupyter notebooks. This style allows you to code explore and learn as you go. - Use CB pseudo code as part of your definitions as you build your notebooks."
  },
  {
    "objectID": "blog/posts/2022-08-15-AP-pseudo_code.html#hacks",
    "href": "blog/posts/2022-08-15-AP-pseudo_code.html#hacks",
    "title": "College Board Pseudo Code",
    "section": "Hacks",
    "text": "Hacks\n\nBuild your own Notebook to highlight what you want to capture on pseudo code\nAdd a link in your Notebook to College Board pseudo code reference and other materials you find interesting by searching the internet"
  },
  {
    "objectID": "blog/posts/2022-08-29-PBL-html_fragments.html",
    "href": "blog/posts/2022-08-29-PBL-html_fragments.html",
    "title": "HTML Fragments",
    "section": "",
    "text": "Building an entire Web Application frontend requires HTML, CSS and JavaScript. In our Fastpages/GitHub Pages a lot of the frontend design work has been done by using Fastpages and Minima theme. Jekyll takes our choice of layouts in our _config.yml file (theme: minima), along with our HTML and Markdown fragments and build a complete static website.\n\n\n\n\nIn Fastpages you can build a table in HTML or Markdown. Building in markdown allows you to take advantage of Jekyll.\n- The index.html does markdown conversion and builds a table with blogs - The _posts/**pseudo_code.md file builds a table with Markdown\n\n\n\nIn Fastpages you can insert images in HTML or Markdown. The Teacher finds <img> easier to work with for embedding links when trying to control size. - See index.html for “img” usage - Lookup ![]() syntax for images in markdown guides\n\n\n\nLook up <href> and []() syntax in both HTML and Markdown. These should become easy and familiar.\n\n\n\nMake sure to use tagging and make it provide a nice index into your information under “Tags” menu. If you have a page Week1, Week2, Week3, in a post, perhaps\n---\ntoc: true\nlayout: post\ndescription: HTML fragments are portions of code used in a greater coding system that enable functionality specific to the current page.  Fragments in HTML are a way to abstract complexity.  The greater coding system we use is GitHub Pages which uses Jekyll and Liquid to build and programmatically construct fragments into the larger web site.\ncategories: [weeks]\ntitle:  Week 2 - HTML Fragments\n---\n\n\n\n\nA complete HTML Web Application is typically made off of a Layout and a series of Fragments (sometimes called templates).\n- Web Page Layout. This illustration becomes important when you make your own layout and fragments using frameworks like Jinja2 (for Python) or Thymeleaf (for Java). - The design of GitHub pages allows us to change themes with the _config.yml file (theme: minima) key/value, change the value to a supported theme. But, on my tries it does not work because fastpages has added many features specific to minima. However, you can temporarily change to different look by changing the remote theme to the following location in your _config.yml  - Minima theme, click on link for accurate syntax. Everywhere you see an “include” this layout is including a fragment to complement the page, things like CSS, JavaScript, headers and footers are included into the layout. Where you see “content”, this is the statement that includes page specific fragments we have designed added within the layout. You should associate all of this to “Procedural Abstraction”.\n    <!DOCTYPE html>\n    <html lang=\"{{ page.lang | default: site.lang | default: \"en\" }}\">\n\n    \"include head.html\"\n\n    <body>\n\n        \"include header.html\"\n\n        <main class=\"page-content\" aria-label=\"Content\">\n        <div class=\"wrapper\">\n            \"content\"\n        </div>\n        </main>\n\n        \"include footer.html\"\n\n    </body>\n\n    </html>\n\n\n\n\nI have seen several student customize CSS on their front page. This enables them to add color. In our fastpages project, there is a special way to customize. Look for the direct _sass, it has a minima folder. Inside this directory you will see many sccs files, this is the Sassy of customize your project.\n- Article and findings by Vunsh in CSA to customize to Darkmode - People have customized the dark-mode.scss file to alternate color schemes for different colors, for instance instead of black, I saw Saathvicka change to dark green\n\n\n\n\nStudents spending majority or large portions of time writing custom CSS will be counter productive to College Board goals and CTE goals for this class. Be aware that HTML style is important, but we are trying to focus more on utilizing framework (GitHub Pages) to maximize our success in the style area. Developers, particularly new Developers, need to ensure they are spending majority of time in the key technical of instruction. Pair Programming and Team Programming are aids in speeding up learning, these collaborative techniques are not intended to be used to defer key technical learnings to others!!! In our first week, I saw code that was not understood by the person asking questions. In 2021-2022 several students lost a grade (A down to B) at the end of the trimester because they were out of balance and were solely focused on CSS/style.\nAs an illustration, look at the minima them. Look at the analytics and work that went into it. Leverage off it, don’t recreate it!"
  },
  {
    "objectID": "blog/posts/2022-08-29-PBL-html_fragments.html#hacks",
    "href": "blog/posts/2022-08-29-PBL-html_fragments.html#hacks",
    "title": "HTML Fragments",
    "section": "Hacks",
    "text": "Hacks\nAt the end of this week you should have your theme complements (try altering dark-mode), index.html alterations, a table, multiple external links, and multiple images in your site.\n- Take a screen shot of temporarily changing remote theme, analyze problems in sight after doing so. Blog your findings. - Time Box fragments are very important to show what you have done each week. I want to see cumulative personal history for the Trimester and for the Year. - You should be able to show how you have considered naming an Tagging to help you find materials under categories. - You should be able to show how you have considered search and how you are able to find key elements in your site. - Advanced and part of what would be considered Coding…. Look at how blog or tags is displayed, look at adding data to _config.yml. Look at liquid, put all this together to make a table or time box the lazy programmer way."
  },
  {
    "objectID": "blog/posts/2022-09-12-PBL-python_flask.html",
    "href": "blog/posts/2022-09-12-PBL-python_flask.html",
    "title": "Flask/Python Web Application",
    "section": "",
    "text": "Next up is making a Web Application from a completely customizable framework and language. This project will focus on building a standalone Web Application. The intentions are to use this framework for Group work and backend work. At the conclusion of this article this project will only be run locally. Ultimately, this project will be hosted on AWS.\n- Flask is the Web Application Framework. - Python will be the Backend Development languages. - Jinja2 is the Web Template language, that work well with Flask and Python. - HTML, CSS, JavaScript will support frontend work built into the Flask project. - The external Fastpages/Github Pages project will use the Flask/Python project for backend services, like persistent data or databases (ie SQL).\n\n\n\n\nStart Flask/Python GitHub repo from a Template. Setup VSCode project to run python. Make a change and push to GitHub. - Generate your own copy of repository GitHub: https://github.com/nighthawkcoders/flask_portfolio/generate - “Copy” https address of newly Generated repository, use screen that looks like this:  - Open terminal and goto your vscode directory: cd ~/vscode - Clone new GitHub project by run git clone <paste/replace with https address> - Run VSCode project code <replace with name of project> - In VSCode type Shift-Command-P or Shift-Control-P to select your Python Interpreter  - Select Python that is in Conda environment  - In VSCode terminal install project dependencies: pip3 install -r requirements.txt - Select main.py from VSCode navigator and press ▶️ in upper right corner. An alternate method is type python3 main.py in terminal. Observe terminal output, this sample illustrates a good outcome.  - In terminal output you can shift-click on http://127.0.0.1:5000/, or goto Browser and type: 127.0.0.1:5000 - Navigate the site, look for things to change."
  },
  {
    "objectID": "blog/posts/2022-09-12-PBL-python_flask.html#hacks",
    "href": "blog/posts/2022-09-12-PBL-python_flask.html#hacks",
    "title": "Flask/Python Web Application",
    "section": "Hacks",
    "text": "Hacks\n\nTry a little bit of customization and make sure you are able to run, edit, and push. Most changes should update while server is running\n\n\nConclude setup activity by pushing a minor change to Stub.html. This will verify GitHub support with VSCode.\n\nClick for VSCode guide for version control\nStub.html lines of code to for simple change\n\n\n<div class=\"px-5 py-5 mx-auto\">\n    <h1 class=\"text-primary\"><strong>Stubby Body</strong></h1>\n    <p class=\"text-secondary\">Put your name here</p>\n</div>\n\nGroup/Collaboration activity. Share a GitHub project. - Make a team project, make each person as a Collaborator through GitHub settings. - Each member take the HTML file under the Project menu and customize it to point to individuals material (aka Fastpages). - GitHub gotcha when Collaborating on a Repo. Remember to Pull before you Push/Sync. The repository will be updating while your copy is isolated. Pull or Rebase gets you back on track with the shared branch of code."
  },
  {
    "objectID": "blog/posts/2022-09-26-PBL-deploy.html",
    "href": "blog/posts/2022-09-26-PBL-deploy.html",
    "title": "Flask/Python Deployment Guide",
    "section": "",
    "text": "Deploying a Web Application enables a Server and Web Application to be available to users on the Internet. Development Operations (DevOps) is understanding the tools and service used to enable the Web Application on the Internet. This process can use many different cloud services, as well as choice of many different tools. Here is an overview of what is covered in this procedure.\n\nEC2: Amazon Web Services is a cloud computing platform that the PUSD district has provided for their students to serve our Web Application.\nGitHub: The leading open platform to share a code across the Internet.\nDocker and docker-compose: Used to host a Web Application. A Docker container prepares an environment that contains the Web Application code and all the dependencies (requirements.txt for Python) Docker is an open platform for developing, shipping, and running applications.\nNginx: In order to find a Web Application on a server, there needs to be a process that listens for the Web Application request and directs it to the Web Application service. Nginx is an open source software for web serving, reverse proxy, caching, load balancing, media streaming, and more.\nCertbot: Web traffic on internet is reliably served over Secure Hyper Text Transfer Protocol (https). Certbot is a free, open source software tool for automatically using Let’s Encrypt certifications.\nDNS: Natively, the web works off of IP addresses. Domain Name Services (DNS) allows the assignment of a friendly name to a Web Server. This name is built into Nginx/Certbot configuration files. Freenom is the cloud service described in this blog and has been used to register the nighthawkcodingsociety.com domain.\n\n\n\nListed are Keys, you need to obtain “values” specific to your Web Application setup. It is important that you recognize the sample “values” as you work through these procedures, then replace them with the “values” that are specific to your Web Application use case.\n\nGitHub HTTPS link:\nIAM user:\nEC2 name:\nEC2 Public IPs:\nDNS Name:\nDNS Subdomain name(s)\nDocker Port:\ndocker-compose, proxy pass Port:\ndocker-compose, docker Image name:\nNginx server file(s):"
  },
  {
    "objectID": "blog/posts/2022-09-26-PBL-deploy.html#server-setup-and-initial-deployment",
    "href": "blog/posts/2022-09-26-PBL-deploy.html#server-setup-and-initial-deployment",
    "title": "Flask/Python Deployment Guide",
    "section": "Server Setup and Initial Deployment",
    "text": "Server Setup and Initial Deployment\n\nDevelopment Operations (DevOps) begins with server setup.\n### Amazon Web Services (AWS): Electric Cloud Compute (EC2) Setup Preparing and AWS EC2 instance is the process of creating a cloud computer. This process starts by logging into your AWS IAM user, searching for EC2. - To get started, launch a new AWS EC2 instance to learn process and understand how to work with Linux. here are some key considerations. - Choose an Amazon Machine Image (AMI), the class will be using Ubuntu you should check on last verified version with a Teacher before proceeding - When it comes to picking memory or disk it is VERY important to pick Free Tier. As stated, this will only be used for testing and then it will be disposed for cost efficiency. - When presented with access dialog for http and https, make sure you check these boxes. Remember you are making a Web application that will run over http and https. - Name the security group (.pem) file after your self or team. It may be necessary to use SSH to access your EC2 instance. - The remainder of the steps you can use the defaults, refer to AWS documentation for guidance: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html - At the end of this process you need to “Connect to Instance”. This will provide you a terminal like experience."
  },
  {
    "objectID": "blog/posts/2022-09-26-PBL-deploy.html#deployment-process",
    "href": "blog/posts/2022-09-26-PBL-deploy.html#deployment-process",
    "title": "Flask/Python Deployment Guide",
    "section": "Deployment Process",
    "text": "Deployment Process\n\nDeployment begins with terminal connections. It is necessary to run commands to setup files to enable your Web Application to run on the Internet.\n\n\nConnect to EC2 through cloud\n\nConnect to an Ubuntu EC2 instance on AWS and then begin the system and software setup. - Select your machine and press “Connect” at top middle.  - On next screen ensure things are lined “EC2 Instance Connect” and press “Connect” at bottom.  - Only if this fails you will need to connect from our Anaconda terminal, we need pem file so place it in your home directory.  - Either connection should work at home, school WIFI may be blocking, I have been trying to get this open. A Hot spot or VPN will solve connection errors.\n\n\n\nUpdate, Upgrade, and Install packages\nTerminal commands are shown, these commands will be run from Terminal after you connect to your EC2 instance. It is advised that you try to comprehend and learn these commands as you go through these procedures. Understanding steps is how you become a DevOps Engineer.\n\nThese commands update and then upgrade packages in your system.\n\n$ sudo apt update; sudo apt upgrade\n$ sudo apt install docker\n$ sudo apt install docker-compose -y\n$ sudo apt install html2text\n$ sudo apt install python3-pip nginx\n$ sudo pip3 install virtualenv\n\n\nClone and Change Directory to project location\n\nThis command moves your Web Application code onto you EC2 cloud computer. The example GithUb HTTPs Link is demonstration is: https://github.com/nighthawkcoders/flask_portfolio.git.\n\n$ cd\n$ git clone https://github.com/nighthawkcoders/flask_portfolio.git\n$ cd flask_portfolio\n\nClone needs to be repeated for each Web application on the EC2 instance (Team repository and each individual repository). If repo is named the same use option parameter at the end of clone command git clone https://github.com/nighthawkcoders/flask_portfolio.git flask_portfolio_john, then cd flask_portfolio_john\n\n\n\nTest Web Service\n\nThese steps will require you to understand a few new commands that will not be part of final deployment process. However, these commands will help you understand machine dependencies and validate your requirements.txt for completeness.\n\n$ cd ~/flask_portfolio\n$ virtualenv -p /usr/bin/python3 webapp\n$ source webapp/bin/activate\n$ pip install -r requirements.txt\n$ python main.py\n\nFailed result. If you get a result that looks like the below, your requirements.txt needs work. In this instance, I would need to add flask to the requirements.txt.\n\n(webapp) ubuntu@ip-172-31-1-138:~/flask_portfolio$ python main.py\nTraceback (most recent call last):\n  File \"main.py\", line 2, in <module>\n    from flask import Flask, render_template\nModuleNotFoundError: No module named 'flask'\n(webapp) ubuntu@ip-172-31-1-138:~/flask_portfolio$ \n\nCorrect result. A successful result will look like the following. At this point we will type “ctrl+c” and then at prompt “deactivate”, as we will now build and run a Docker File to deploy in more automated fashion.\n\n(webapp) ubuntu@ip-172-31-1-138:~/flask_portfolio$ python main.py\n * Serving Flask app 'main' (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Debug mode: on\n * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 710-199-540\n\n\nCreate Dockerfile to run Web Service\n\nA Dockerfile is a configuration used to run the Web Service. This is placed in a file called Dockerfile. It is best to add this to VS Code and pull it, or you can update in place with nano, vi, or vim editor and use command line commands to push it into your repository. The Dockerfile should be considered Code!\n\n\nEdit the Dockerfile\n\n$ sudo nano Dockerfile\n\nInsert the Dockerfile commands, note that they are similar to Bash commands performed earlier. Follow prompts on screen to save file when complete, look for Key/Value (GitHub HTTPS link) that requires change for your project.\n\nFROM docker.io/python:3.9\nWORKDIR /app\n# --- Update environment and install python and pip ---\nRUN apt-get update && apt-get upgrade -y && \\\n    apt-get install -y python3 python3-pip git\n# --- Copy repo you updated with clone or pull ---\nCOPY . /app\n# --- Install project specific dependencies ---\nRUN pip3 install --no-cache-dir -r requirements.txt\nRUN pip3 install gunicorn\n# --- Setup args to run 3 workers and run on port 8080 ---\nENV GUNICORN_CMD_ARGS=\"--workers=3 --bind=0.0.0.0:8080\"\n# --- Allow port 8080 to be accessed by system ---\nEXPOSE 8080\n# --- Run Web Application in production style ---\nCMD [ \"gunicorn\", \"main:app\" ]\n\n\nCreate docker-compose file share Web Service\n\nA docker-compose file is a configuration used to share your Docker Web Service and resources with the Linux system. This file enable Linux to have access to the container and the persistent data application via the /volumes location.\n- Once again it is best to add the docker-compose.yml in VS Code and pull it. You can edit it on the machine itself using vi, vim, or nano. - The image: needs to have unique name for each application on server (ie flask_john_v1) - The ports: left value 8086 needs to be unique for each application on server (ie 8087:8080, 8088:8080, etc) - Change device: to match path to volumes directory of your project. Verify this location is correct typing ls /home/ubuntu/flask_portfolio/volumes this should list files sqlite.db  uploads\n\n\nEdit docker-compose.yml\n\n$ sudo nano docker-compose.yml\n\nInsert the docker-compose.yml Keys/Values.\n\nversion: '3'\nservices:\n        web:\n                image: flask_port_v1\n                build: .\n                ports:\n                        - \"8086:8080\"\n                volumes:\n                        - persistent_volume:/app/volumes\nvolumes:\n  persistent_volume:\n    driver: local\n    driver_opts:\n      o: bind\n      type: none\n      device: /home/ubuntu/flask_portfolio/volumes\n      # replace just flask_portfolio\n\n\nRunning Docker using docker-compose.yml\n\nAt this point, it is best to review complete files on GitHub and for Docker and docker-compose: https://github.com/nighthawkcoders/flask_portfolio. Review the Key/Values mentioned in this document. Make sure your Docker and docker-compose files a personalized to your project.\n\n\nEnsure install of docker, docker-compose installed from earlier procedures\n\n$ sudo apt install docker\n$ sudo apt install docker-compose -y\n\nMake sure you are in project directory\n\n$ cd ~/flask_portfolio/\n\nRun docker-compose\n\n$ sudo docker-compose up -d\n\nOutput from docker-compose. When running this command, docker-compose will run all the Docker steps and build a Web Application running in a Docker container, a virtual environment.\n\nCreating network \"flask_portfolio_default\" with the default driver\nBuilding web\nStep 1/9 : FROM docker.io/python:3.9\n ---> d0ce03c9330c\nStep 2/9 : WORKDIR /app\n.... LOTS of STEPs and OUTPUT ...\nSuccessfully built 68d68ad9699b\nSuccessfully tagged flask_port_v1:latest\nWARNING: Image for service web was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating flask_portfolio_web_1 ... done\n\n\nVerifying Web Application via Docker commands\n\nHere is a look at some of the commands behind the scenes. None of these are required to get things working, but show the results of the Docker and docker-compose.yml files and commands.\n\n\ndocker-compose ps View the running Web process, “ps” is a linux command or option that provides information related to the processes on a system. Look at name and ports in relation to outputs of the docker-compose process and settings in docker-compose.yml file.\n\n$ sudo docker-compose ps\n        Name                 Command        State                    Ports                  \n--------------------------------------------------------------------------------------------\nflask_portfolio_web_1   gunicorn main:app   Up      0.0.0.0:8086->8080/tcp,:::8086->8080/tcp\n\ndocker ps View a more comprehensive list of all the docker processes on the system. In this process reports, many of the alternate projects running on this AWS server are show (ie your Team Members). You should be able to identify your IMAGE and PORTS, as they should be unique according to your docker-compose.yml file.\n\n$ sudo docker ps\nCONTAINER ID   IMAGE           COMMAND                  CREATED          STATUS          PORTS                                       NAMES\n749a93bc11ce   flask_port_v1   \"gunicorn main:app\"      45 minutes ago   Up 45 minutes   0.0.0.0:8086->8080/tcp, :::8086->8080/tcp   flask_portfolio_web_1\n89155782b853   java_springv1   \"java -jar target/sp…\"   6 days ago       Up 6 days       0.0.0.0:8085->8080/tcp, :::8085->8080/tcp   spring_portfolio_web_1\n9415d6397d2e   python_cspv1    \"gunicorn main:app\"      2 weeks ago      Up 2 weeks      0.0.0.0:8082->8080/tcp, :::8082->8080/tcp   nighthawk_csp_web_1\n4bf324458bf6   python_laxv1    \"gunicorn main:app\"      5 weeks ago      Up 5 weeks      0.0.0.0:8084->8080/tcp, :::8084->8080/tcp   lax_web_1\n7a6dff6425e9   python_ctev1    \"gunicorn main:app\"      5 weeks ago      Up 5 weeks      0.0.0.0:8083->8080/tcp, :::8083->8080/tcp   cte_web_1\nabd77b8e77af   java_csav2      \"java -jar target/cs…\"   5 weeks ago      Up 5 weeks      0.0.0.0:8081->8080/tcp, :::8081->8080/tcp   nighthawk_csa_web_1\n\ndocker images This lists all of the docker images, or containers, that are used to serve the process shown above. The flask_port_v1 is the REPOSITORY is named in docker-compose.yml. The IMAGE ID is container for the running Web application.\n\n$ sudo docker images\nREPOSITORY      TAG             IMAGE ID       CREATED          SIZE\nflask_port_v1   latest          68d68ad9699b   51 minutes ago   1.01GB\njava_springv1   latest          e85a584b1836   6 days ago       523MB\npython_laxv1    latest          713c84a30d3b   5 weeks ago      1.16GB\npython_ctev1    latest          1608eaee06c7   5 weeks ago      1.18GB\npython_cspv1    latest          b9bb27be863b   5 weeks ago      1.12GB\njava_csav2      latest          4055a9fd5ea7   5 weeks ago      570MB\npython          3.9             d0ce03c9330c   7 weeks ago      915MB\nalpine          latest          e66264b98777   8 weeks ago      5.53MB\nopenjdk         16-alpine3.13   2aa8569968b8   17 months ago    324MB\n\ndocker volume ls This list volume names are the locations where application stores files that that the developer wants to keep. The volume name is specified in the docker-compose.yml file.\n\n$ sudo docker volume ls\nDRIVER    VOLUME NAME\nlocal     flask_portfolio_persistent_volume\nlocal     nighthawk_csa_persistent_volume\nlocal     nighthawk_csp_persistent_volume\nlocal     spring_portfolio_persistent_volume\n\n\nTesting localhost endpoint\nVerify everything is working with your docker configurations.\n\nLocal Test of Web Application Endpoint. This should return HTML related to the home page of your Web site. If this fails, you need to review Docker and docker-compose configurations. Failed to connect means you need to review your port assignments in docker-compose.yml and the docker-compose ps outputs above.\n\n$ curl http://localhost:8086\n\nMore readable view of Web Application Endpoint. This requires sudo apt install html2text. This output is a form of Web Scrapping, as it pull text out of the HTML and makes it easier for us to read and identify the content.\n\n$ curl http://localhost:8086 | html2text\n\nCongrats. If you are to this point you are successfully running your Web Application with Docker and verifying that it is running with Curl."
  },
  {
    "objectID": "blog/posts/2022-09-26-PBL-deploy.html#test-preparation-for-docker-web-application-using-ip-for-internet-access",
    "href": "blog/posts/2022-09-26-PBL-deploy.html#test-preparation-for-docker-web-application-using-ip-for-internet-access",
    "title": "Flask/Python Deployment Guide",
    "section": "Test preparation for Docker Web Application using IP for Internet Access",
    "text": "Test preparation for Docker Web Application using IP for Internet Access\nEach student scrum team will perform Nginx test and verify Group Web Project is working on EC2 instance. This step is can only support a single Web Application at a time.\nThis Step is dependent on… - EC2 Public IPs: 3.233.212.71 - Docker Port: 8086\nEnable Nginx to retrieve default Web Application using IP Address from internet request (Reverse Proxy)!\n\nInstall Nginx on Ubuntu servers\n\n$ sudo apt install nginx\n\nGo to location of Nginx server configuration files\n\n$ cd /etc/nginx/sites-available\n\nOpen editor to Create your own “Nginx test configuration”.\n\n\n$ sudo nano test\n\nEdit your own Nginx server configuration making modifications to:\n\nIP Address: 3.233.212.71\ndocker-compose, proxy pass Port: 8086\n\n\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name 3.233.212.71;\n\n    location / {\n        proxy_pass http://localhost:8086;\n        # Simple requests\n        if ($request_method ~* \"(GET|POST)\") {\n                add_header \"Access-Control-Allow-Origin\"  *;\n        }\n\n        # Preflight requests\n        if ($request_method = OPTIONS ) {\n                add_header \"Access-Control-Allow-Origin\"  *;\n                add_header \"Access-Control-Allow-Methods\" \"GET, POST, OPTIONS, HEAD\";\n                add_header \"Access-Control-Allow-Headers\" \"Authorization, Origin, X-Requested-With, Content-Type, Accept\";\n                return 200;\n        }\n    }\n}\n\nActivating Nginx configuration\n\nActivate/enabled Nginx server configuration:\n\nnginx configuration file: test\n\n$ sudo ln -s /etc/nginx/sites-available/test /etc/nginx/sites-enabled\n$ sudo nginx -t\nIf there are errors, something is wrong…\n\nPerhaps you are missing semicolon at the end of server)name or proxy_pass lines.\nPerhaps link to file in sites-enabled is bad as a result of bad syntax in ln -a command.\n\nThere are two directories /etc/nginx/sites-available and /etc/nginx/sites-enabled.\n\nThe 1st is for preliminary editing, the second is for activation. Perform ls in /etc/nginx/sites-enabled and make sure all the names look correct.\n\nCorrect by rm of mistake in /etc/nginx/sites-enabled without deleting original file in /etc/nginx/sites-available. Then repeat ln -s command.\n\n\nIf there are no errors, restart NGINX so the server to activate /etc/nginx/sites-enabled files:\n\n$ sudo systemctl restart nginx\n\n\nTesting HTTP endpoint\n\nWhen completing this section, you will show that the Internet is resolving your Web application and port from an IP address (aka reverse proxy).\n\n\nVerify AWS Web application again. Make sure curl is still working on local machine. Make sure endpoint you placed in Nginx test file match.\n\n$ curl http://localhost:8086\n\nNow test public IP on the internet. Go to a browser anywhere in the world and type your IP address:\n\nhttp://3.233.212.71\n\nNote. Address is Unsecure and you are using IP address versus Domain.\nTimeout problem. This means something is wrong with EC2 Public IP.\nNginx Default page. This means Nginx is working, but something is wrong with you Nginx test configuration.\nBroken Gateway. This means Nginx is working, but something is wrong with Web Application endpoint on machine. This requires you to look at port configuration OR restart Docker.\n\n\nCongratulations. If you have arrived at this point you now have capability to access your team Web Application from the Internet. Hurray!!!"
  },
  {
    "objectID": "blog/posts/2022-09-26-PBL-deploy.html#final-preparation-the-docker-web-application-using-dns-for-internet-access",
    "href": "blog/posts/2022-09-26-PBL-deploy.html#final-preparation-the-docker-web-application-using-dns-for-internet-access",
    "title": "Flask/Python Deployment Guide",
    "section": "Final preparation the Docker Web Application using DNS for Internet Access",
    "text": "Final preparation the Docker Web Application using DNS for Internet Access\nThere are additional steps to this preparation. We need to direct the internet to the AWS server running the Web Application, this is done using Domain Name Service (DNS). After being directed to the Web Server, the server needs to respond to the HTTP (Hyper Text Transfer Protocol) request. The proxy of HTTP to your Web Application is manged by Nginx. Finally, we will Secure HTTP (HTTPS), with a utility called Certbot. ### DNS provider and setup Each student scrum team is required to learn how to obtain a DNS provider and setup an independent domain.\nA picture is included to show key elements in setting up a domain with a DNS provider. The nighthawkcodingsociety.com is using Freenom as its service provider. As you build your own DNS endpoint, you will need to obtain your own IP address mapped to a Domain.\nThis Freenom illustration is dependent on… - DNS Name: nighthawkcodingsociety.com - DNS Subdomain name(s): battleship.nighthawkcodingsociety.com. cowboys.nighthawkcodingsociety.com\nA minimum configuration will have the two “A” type definitions using you Public IP address. These two are resolved with a single Web Application. The “CNAME” type is used for subdomains, these will resolve to a different Web Application.\nSetup DNS mapping to your Public IP address now!!! This is needed to complete Nginx and Certbot configurations below. You will not be able to proceed until you have setup ‘A’ record.\n\n\nOpen editor to Create your own “Nginx Web Application configuration” for your group project. This looks very similar to test configurations, but the change is the Domain names. These Domain names must be created through DNS provider and you must setup ‘A’ entries in DNS for them to work. For clarity, the name nighthawk should reflect your application name, domain or subdomain. The name needs to be unique for each web application (ie john_nighthawk for john.nighthawk.com).\n\n$ sudo nano nighthawk\n\nEdit your own Nginx server configuration making modifications:\n\nDNS Name(s): nighthawkcodingsociety.com www.nighthawkcodingsociety.com\ndocker-compose, proxy pass Port: 8086\n\n\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name nighthawkcodingsociety.com www.nighthawkcodingsociety.com;\n\n    location / {\n        proxy_pass http://localhost:8086;\n        # Simple requests\n        if ($request_method ~* \"(GET|POST)\") {\n                add_header \"Access-Control-Allow-Origin\"  *;\n        }\n\n        # Preflight requests\n        if ($request_method = OPTIONS ) {\n                add_header \"Access-Control-Allow-Origin\"  *;\n                add_header \"Access-Control-Allow-Methods\" \"GET, POST, OPTIONS, HEAD\";\n                add_header \"Access-Control-Allow-Headers\" \"Authorization, Origin, X-Requested-With, Content-Type, Accept\";\n                return 200;\n        }\n    }\n}\n\nOr, or in addition, edit your own Nginx server configuration making modifications to subdomain file (0 to many). These Domain names must be created through DNS provider and you must setup ‘A’ or ‘CNAME’ entries in DNS for them to work:\n\nDNS Name(s): flask.nighthawkcodingsociety.com\ndocker-compose, proxy pass Port: 8087\n\n\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name flask.nighthawkcodingsociety.com;\n\n    location / {\n        proxy_pass http://localhost:8087;\n        # Simple requests\n        if ($request_method ~* \"(GET|POST)\") {\n                add_header \"Access-Control-Allow-Origin\"  *;\n        }\n\n        # Preflight requests\n        if ($request_method = OPTIONS ) {\n                add_header \"Access-Control-Allow-Origin\"  *;\n                add_header \"Access-Control-Allow-Methods\" \"GET, POST, OPTIONS, HEAD\";\n                add_header \"Access-Control-Allow-Headers\" \"Authorization, Origin, X-Requested-With, Content-Type, Accept\";\n                return 200;\n        }\n    }\n}\n\nActivate/enabled Nginx server configuration:\n\nnginx configuration file: nighthawk\n\n$ sudo ln -s /etc/nginx/sites-available/nighthawk /etc/nginx/sites-enabled\n$ sudo nginx -t\nIf there are no errors, restart NGINX so the server is an endpoint to the internet:\n\n$ sudo systemctl restart nginx\n\nTesting HTTP endpoint\nBefore finishing, this is a good opportunity to review everything you have done.\n\nMake sure curl is still working on local machine.\n\n$ curl http://localhost:8086\n$ curl http://localhost:8087\netc\n\nNow test unsecure HTTP endpoint on the internet. Go to a browser anywhere and type your DNS domain: http://nighthawkcodingsociety.com or http://flask.nighthawkcodingsociety.com.\n\nTimeout. This means something is wrong with EC2 Public IP.\nNginx Default page. This means DNS is working, but something is wrong with you Nginx configuration.\nBroken Gateway. This means Nginx is working, but something is wrong with Web Application endpoint on machine, if this fails something is wrong with Web Application. This requires you to look at Docker and docker-compose configuration.\n\n\n\n\nCertbot install and configuration\nEach student scrum team will learn Certbot on on AWS EC2 test server, establish working https web application. The final configuration will be on AWS server managed by Teachers or Student DevOps Engineers.\n$ sudo snap install core; sudo snap refresh core\n$ sudo snap install --classic certbot\n$ sudo ln -s /snap/bin/certbot /usr/bin/certbot\n$ sudo certbot --nginx\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nPlugins selected: Authenticator nginx, Installer nginx\n\nWhich names would you like to activate HTTPS for?\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n1: nighthawkcodingsociety.com\n2: csa.nighthawkcodingsociety.com\n3: csp.nighthawkcodingsociety.com\n4: flm.nighthawkcodingsociety.com\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nSelect the appropriate numbers separated by commas and/or spaces, or leave input\nblank to select all options shown (Enter 'c' to cancel):    \nCert not yet due for renewal\n\nYou have an existing certificate that has exactly the same domains or certificate name you requested and isn't close to expiry.\n(ref: /etc/letsencrypt/renewal/nighthawkcodingsociety.com-0001.conf)\n\nWhat would you like to do?\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n1: Attempt to reinstall this existing certificate\n2: Renew & replace the cert (limit ~5 per 7 days)\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nSelect the appropriate number [1-2] then [enter] (press 'c' to cancel): 2\nRenewing an existing certificate\nPerforming the following challenges:\nhttp-01 challenge for nighthawkcodingsociety.com\nhttp-01 challenge for csa.nighthawkcodingsociety.com\nhttp-01 challenge for cso.nighthawkcodingsociety.com\nhttp-01 challenge for flm.nighthawkcodingsociety.com\nWaiting for verification...\nCleaning up challenges\nDeploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_society\nDeploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_csa\nDeploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_csp\nDeploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_flm\n\nPlease choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n1: No redirect - Make no further changes to the webserver configuration.\n2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for\nnew sites, or if you're confident your site works on HTTPS. You can undo this\nchange by editing your web server's configuration.\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nSelect the appropriate number [1-2] then [enter] (press 'c' to cancel): 2\nTraffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_society\nTraffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_csa\nTraffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_csp\nTraffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_flm\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nYour existing certificate has been successfully renewed, and the new certificate\nhas been installed.\n\nThe new certificate covers the following domains:\nhttps://nighthawkcodingsociety.com, \nhttps://csa.nighthawkcodingsociety.com, \nhttps://csp.nighthawkcodingsociety.com, and\nhttps://flm.nighthawkcodingsociety.com,\n\nYou should test your configuration at:\nhttps://www.ssllabs.com/ssltest/analyze.html?d=nighthawkcodingsociety.com\nhttps://www.ssllabs.com/ssltest/analyze.html?d=csa.nighthawkcodingsociety.com\nhttps://www.ssllabs.com/ssltest/analyze.html?d=csp.nighthawkcodingsociety.com\nhttps://www.ssllabs.com/ssltest/analyze.html?d=flm.nighthawkcodingsociety.com\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at:\n   /etc/letsencrypt/live/nighthawkcodingsociety.com-0001/fullchain.pem\n   Your key file has been saved at:\n   /etc/letsencrypt/live/nighthawkcodingsociety.com-0001/privkey.pem\n   Your cert will expire on 2022-03-06. To obtain a new or tweaked\n   version of this certificate in the future, simply run certbot again\n   with the \"certonly\" option. To non-interactively renew *all* of\n   your certificates, run \"certbot renew\"\n - If you like Certbot, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le"
  },
  {
    "objectID": "blog/posts/2022-09-26-PBL-deploy.html#update-deployment-this-process-is-after-you-change-code",
    "href": "blog/posts/2022-09-26-PBL-deploy.html#update-deployment-this-process-is-after-you-change-code",
    "title": "Flask/Python Deployment Guide",
    "section": "Update Deployment, this process is after you change code",
    "text": "Update Deployment, this process is after you change code\n\nThis procedure is a very short, as much of the deployment performed is persistent on your EC2/Ubuntu.\n\n\nGoto Project directory\n\nCheck your docker processes. Make sure git has nothing to commit.\n\n$ cd ~/flask_portfolio\n$ sudo docker-compose ps\n       Name                 Command        State                    Ports                  \n--------------------------------------------------------------------------------------------\nflask_portfolio_web_1   gunicorn main:app   Up      0.0.0.0:8086->8080/tcp,:::8086->8080/tcp\n\n$ sudo docker ps\nCONTAINER ID   IMAGE           COMMAND                  CREATED        STATUS        PORTS                                       NAMES\nee3fd0edfdcd   flask_port_v1   \"gunicorn main:app\"      6 weeks ago    Up 6 weeks    0.0.0.0:8086->8080/tcp, :::8086->8080/tcp   flask_portfolio_web_1\n\n$ git status\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nnothing to commit, working tree clean\n\n\nShutdown process and update source\n\nStop docker processes and git pull\n\n$ sudo docker-compose kill  # run ps on docker-compose and docker and you should observe changes\nKilling flask_portfolio_web_1 ... done\n\nAt this point your server is down, look at it from browser\n\n502 Bad Gateway\n\nUpdate code\n\n$ git pull    # dialog will look as follows\nremote: Enumerating objects: 42, done.\nremote: Counting objects: 100% (42/42), done.\nremote: Compressing objects: 100% (23/23), done.\nremote: Total 33 (delta 17), reused 24 (delta 9), pack-reused 0\nUnpacking objects: 100% (33/33), 7.42 KiB | 474.00 KiB/s, done.\nFrom https://github.com/nighthawkcoders/flask_portfolio\n   f0b6ba1..def0da9  main       -> origin/main\n\n... These are the files you changed ...\n\nmodel_jokes.py                                 |   4 ++--\nrequirements.txt                               |   8 ++++----\n\n\nRebuild and Restart Web Application\n\nForce rebuild of docker container. This can take a couple of minutes.\n\n$ sudo docker-compose build --no-cache\nBuilding web\nStep 1/9 : FROM docker.io/python:3.9\n ---> d0ce03c9330c\nStep 2/9 : WORKDIR /app\n ---> Running in 3f705fefc681\nRemoving intermediate container 3f705fefc681\n ---> 9c6ebd23dcb1\n\n... Build steps 1 through 9 ...\n\nStep 9/9 : CMD [ \"gunicorn\", \"main:app\" ]\n ---> Running in 9ca595a79669\nRemoving intermediate container 9ca595a79669\n ---> 54ca7ab064b4\nSuccessfully built 54ca7ab064b4\nSuccessfully tagged flask_port_v1:latest\n\nRun docker-compose\n\n$ sudo docker-compose up -d\nRecreating flask_portfolio_web_1 ... done\n\nNow server is up, test in Browser for recent change\n\nPython Home Page"
  },
  {
    "objectID": "blog/posts/2022-09-26-PBL-deploy.html#good-examples",
    "href": "blog/posts/2022-09-26-PBL-deploy.html#good-examples",
    "title": "Flask/Python Deployment Guide",
    "section": "Good Examples",
    "text": "Good Examples\n\ngit clone Plan what your name will be on shared server and this can be different than repo name by using 4th argument.\n\ngit clone <git_project> avaflaskproject  # identifiable name \n\ndocker-compose.yml (sudo docker-compose up -d)\n\ndocker-compose.yml Setup before you clone, this needs to be versioned controlled. There are 3 edits!\n\nservices:\n        web:\n                image: flask_ava_v1  # identifiable name for shared machine\n                build: .\n                ports:\n                        - \"8089:8080\" # port distinct from others\n                volumes:\n                        - persistent_volume:/app/volumes\nvolumes:\n  persistent_volume:\n    driver: local\n    driver_opts:\n      o: bind\n      type: none\n      device: /home/ubuntu/avaflaskproject/volumes  # name consistent with repo\n\n\nDocker PS\n\nsudo docker ps Verification shows practice of easy to identify owners and ports. At this point it is very clear to see who owns Ports.\n\nCONTAINER ID   IMAGE              COMMAND               CREATED        STATUS        PORTS                                       NAMES\n6f4572c00f22   flask_shruthi_v1   \"gunicorn main:app\"   3 hours ago    Up 3 hours    0.0.0.0:8083->8080/tcp, :::8083->8080/tcp   flaskpython_web_1\n0dd6254cf662   flask_ava_v1       \"gunicorn main:app\"   17 hours ago   Up 17 hours   0.0.0.0:8089->8080/tcp, :::8089->8080/tcp   avaflaskproject_web_1\n\n\nNginx IP test file (sudo systemctl nginx restart)\n\nnginx IP address test file There are 2 edits. Notice the Public IP address on screen. Identify that with configuration. Also, what application will run on the IP address?\n\n\n\n\nnginx test\n\n\n\n\nNginx sites-available (cd /etc/nginx/sites-available)\n\navailable directory names Notice names and how they can be identified. This is were you work on configurations.\n\nubuntu@ip-172-31-18-94:/etc/nginx/sites-available$ ls\nava_nighthawk  default  shruthi_nighthawk  test\n\n\nNginx file published to work with a domain (nano ava_nighthawk)\n\nnginx domain name file This is identical to test file, but now it is working off of the domain versus the IP address.\n\n    server_name ava.nighthawkcodingsociety.com;\n\n\nNginx sites-enable (cd /etc/nginx/sites-enabled)\n\nenabled directory names Notice how names point back to sites-available. This is setup with ln -s command. Whose file still needs to be published.\n\nubuntu@ip-172-31-18-94:/etc/nginx/sites-enabled$ ls -l\ntotal 0\nlrwxrwxrwx 1 root root 34 Sep 28 21:31 default -> /etc/nginx/sites-available/default\nlrwxrwxrwx 1 root root 44 Oct  2 20:19 shruthi_nighthawk -> /etc/nginx/sites-available/shruthi_nighthawk\nlrwxrwxrwx 1 root root 31 Oct  4 00:48 test -> /etc/nginx/sites-available/test"
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()"
  },
  {
    "objectID": "schedule/index.html",
    "href": "schedule/index.html",
    "title": "APCSP2",
    "section": "",
    "text": "{% assign all = null | compact %} {% assign all = all | concat:site.posts | concat:site.pages %}\n\n{% assign units = “4,3,2,1” | split: ‘,’ %} {% for unit in units %}\n {% if unit == “1” %} {% assign start = 0 %} {% assign end = 3 %} ## Unit {{unit}}: Introduction to Tools and Resources > The initial weeks focus on introducing Tools, Pair Programming, and the AP Resources that we plan to use throughout the year. At the end of Weeks 0-3, students will be exposed to blogging with GitHub Pages; developing with Jupyter Notebooks, Python, JavaScript, HTML, and Code.org AppLab; working with AP classroom and becoming familiar with Create Performance Task project requirements. {% elsif unit == “2” %} {% assign start = 4 %} {% assign end = 7 %} ## Unit {{unit}}: Introduction to Web Development > Websites are made up of several key parts: Frontend, Backend, Data and Deployment. The focus for these weeks is to enable students to perform the aspects of constructing and deploying a simple Website. Fastpages got us started on these concepts, but now we will start building a Website from the ground up. Once again, there will be a lot of learning focused tools and getting things working. But, by the end of the Unit, students will be ready to start many of the technical coding aspects of Web Development, having established a Deployed Website. On Nov 3rd our Trimester work will end with a project and student participation in Electives Department “Night at the Museum” (N@tM).\n{% elsif unit == “3” %} {% assign start = 8 %} {% assign end = 12 %} ## Unit {{unit}}: N@tM Project, Web, Systems, and Data > The beginning of Trimester 2 is focussed on Algorithms and Coding. Student need to build their own portfolio. That portfolio should focus on their interests in Python and JavaScript programming.\n{% elsif unit == “4” %} {% assign start = 13 %} {% assign end = 16 %} ## Unit {{unit}}: Algorithmic Programming > Trimester 2 begins with student teaching and a focus on algorithms. Each week a “Student Team” has a teaching assignment supported by College Board materials. Additionally, the Teacher is providing Career Tech mini-labs that correspond to one or more topics for the week. Use the two things together as you improve your learning experience, Frontend blog and Jupyter Notebooks.\n{% endif %}\n\n\n{% assign units = null | compact %}  {% assign sym = “|||” %}  {% assign deli = sym | compact %} {% for i in (start..end) -%} {% assign pt = null | compact %}  {% assign ap = null | compact %} {% assign tt = null | compact %} {% assign hm = null | compact %} {% assign uk = null | compact %}{% for post in all %}{% assign week = post.week | plus: 0 %}  {% assign title = post.title | compact %} {% assign url = post.url | compact %}{% if week == i %}{% if post.type == “plan” %} {% assign pt = pt | push: title %} {% assign pt = pt | push: url %} {% elsif post.type == “ap” %} {% assign ap = ap | push: title %} {% assign ap = ap | push: url %}\n{% elsif post.type == “pbl” %} {% assign tt = tt | push: title %} {% assign tt = tt | push: url %} {% elsif post.type == “human” %} {% assign hm = hm | push: title %} {% assign hm = hm | push: url %} {% else %} {% assign uk = uk | push: title %} {% assign uk = uk | push: url %}\n{% endif %}{% endif %} {% endfor %}{% assign units = units | concat:pt | concat:deli | concat:ap | concat:deli | concat:tt | concat:deli | concat:hm %}<td>\n  {% assign units = units | shift %} <!-- remove delimiter -->\n{% else %} <!-- make a link in the column -->\n  - <a href=\"{{site.baseurl}}/{{units[1]}}\">{{units[0]}}</a> <br/> \n  {% assign units = units | shift | shift %} <!-- remove title and url -->\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n\nWeek\n\n\nSprint/Points Link\n\n\nAP Test Prep\n\n\nCareer Tech\n\n\nHuman Prep\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{{i}}\n\n\n{% for i in (0..100) -%}  {% if units.size == 0 %}  {% break %} {% elsif units[0] == sym %} \n\n\n\n\n\n\n{% endfor %}"
  },
  {
    "objectID": "ap/index.html",
    "href": "ap/index.html",
    "title": "APCSP2",
    "section": "",
    "text": "{% if site.categories.size > 0 %}\n\nAP Standards\n\n{% assign categories = “” | split:“” %} {% for c in site.categories %} {% assign categories = categories | push: c[0] %} {% endfor %} {% assign categories = categories | sort_natural %}\n{% for category in categories %} {% if category == “1.A” or category == “1.B” or category == “1.C” or category == “1.D” or category == “2.A” or category == “2.B” or category == “3.A” or category == “3.B” or category == “3.C” or category == “4.A” or category == “4.B” or category == “4.C” or category == “5.A” or category == “5.B” or category == “5.C” or category == “5.D” or category == “5.E” or category == “6.A” or category == “6.B” or category == “6.C” %} {% if category == “1.A” %}\n\n {{ category }} Investigate the situation, context, or task\n\n  {% elsif category == \"1.B\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Determine and design an appropriate method or approach to achieve the purpose </h3>\n  {% elsif category == \"1.C\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Explain how collaboration affects the development of a solution </h3>\n  {% elsif category == \"1.D\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Evaluate solution options </h3>\n  {% elsif category == \"2.A\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Represent algorithmic processes without using a programming language </h3>\n  {% elsif category == \"2.B\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Implement and apply an algorithm </h3>\n  {% elsif category == \"3.A\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Generalize data sources through variables </h3>\n  {% elsif category == \"3.B\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Use abstraction to manage complexity in a program </h3>\n  {% elsif category == \"3.C\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Explain how abstraction manages complexity </h3>\n  {% elsif category == \"4.A\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Explain how a code segment or program functions </h3>\n  {% elsif category == \"4.B\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Determine the result of code segments </h3>\n  {% elsif category == \"4.C\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Identify and correct errors in algorithms and programs, including error discovery through testing </h3>\n  {% elsif category == \"5.A\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Explain how computing systems work </h3>\n  {% elsif category == \"5.B\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Explain how knowledge can be generated from data </h3>\n  {% elsif category == \"5.C\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Describe the impact of a computing innovation </h3>\n  {% elsif category == \"5.D\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Describe the impact of gathering data </h3>\n  {% elsif category == \"5.E\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Evaluate the use of computing based on legal and ethical factors </h3>\n  {% elsif category == \"6.A\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Collaborate in the development of solutions </h3>\n  {% elsif category == \"6.B\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Use safe and secure methods when using computing devices </h3>\n  {% elsif category == \"6.C\" %}\n    <h3 id =\"{{ category }}\"><i class=\"fas fa-tags category-tags-icon\"></i></i> {{ category }} Acknowledge the intellectual property of others </h3>\n  {% endif %}  \n  <a name=\"{{ category | slugize }}\"></a>\n  {% for post in site.categories[category] %}\n    {% if post.hide != true %}\n    {%- assign date_format = site.minima.date_format | default: \"%b %-d, %Y\" -%}\n    <article class=\"archive-item\">\n      <p class=\"post-meta post-meta-title\"><a class=\"page-meta\" href=\"{{ site.baseurl }}{{ post.url }}\">{{post.title}}</a>  • {{ post.date | date: date_format }}</p>\n    </article>\n    {% endif %}\n  {% endfor %}\n{% endif %}  \n{% endfor %}\n{% endif %}"
  }
]